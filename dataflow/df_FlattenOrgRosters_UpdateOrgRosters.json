{
	"name": "df_FlattenOrgRosters_UpdateOrgRosters",
	"properties": {
		"folder": {
			"name": "04_Rosters"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adsl2_stnidoprodeastau100_json_2",
						"type": "DatasetReference"
					},
					"name": "sourceApi"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "sourceSql"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "sinkSql",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls2_stnidoprodeastau100",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "FlattenItems"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "SelectOutArrayColumns1"
				},
				{
					"name": "CastDateType1"
				},
				{
					"name": "FlattenIncludedRosterEmployees"
				},
				{
					"name": "Join1"
				},
				{
					"name": "NotExistsDelete"
				},
				{
					"name": "NotExistsInsert"
				},
				{
					"name": "ExistsUpdate"
				},
				{
					"name": "Update"
				},
				{
					"name": "Insert"
				},
				{
					"name": "Delete"
				},
				{
					"name": "UnionAlterRowCondition"
				},
				{
					"name": "CastDateType2"
				}
			],
			"script": "parameters{\n\tPipelineTriggerTime as string,\n\tPipelineRunId as string,\n\tPipelineName as string\n}\nsource(output(\n\t\titems as (ceaseDate as string, commencementDate as string, costingSettings as string, customPeriodDuration as short, defaultPeriodDurationType as string, definedCostingPayItems as string[], description as string, includedRosterEmployees as (employee as (id as string, name as string), includedRosterEmployeeId as string, primaryAssignments as string)[], includedRosterRoles as (includedRosterRoleId as string, role as (id as string, name as string))[], isTemplate as boolean, name as string, notifyEmployeesByDefault as boolean, paid as boolean, rosterId as string, showAsTwelveHourTime as boolean)[],\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nsource(output(\n\t\tceaseDate as date,\n\t\tcommencementDate as date,\n\t\tcostingSettings as string,\n\t\tcustomPeriodDuration as short,\n\t\tdefaultPeriodDurationType as string,\n\t\tdescription as string,\n\t\tisTemplate as boolean,\n\t\tname as string,\n\t\tnotifyEmployeesByDefault as boolean,\n\t\tpaid as boolean,\n\t\trosterId as string,\n\t\tshowAsTwelveHourTime as boolean,\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tSourceFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSql\nsourceApi foldDown(unroll(items, items),\n\tmapColumn(\n\t\tceaseDate = items.ceaseDate,\n\t\tcommencementDate = items.commencementDate,\n\t\tcostingSettings = items.costingSettings,\n\t\tcustomPeriodDuration = items.customPeriodDuration,\n\t\tdefaultPeriodDurationType = items.defaultPeriodDurationType,\n\t\tdefinedCostingPayItems = items.definedCostingPayItems,\n\t\tdescription = items.description,\n\t\tincludedRosterEmployees = items.includedRosterEmployees,\n\t\tincludedRosterRoles = items.includedRosterRoles,\n\t\tisTemplate = items.isTemplate,\n\t\tname = items.name,\n\t\tnotifyEmployeesByDefault = items.notifyEmployeesByDefault,\n\t\tpaid = items.paid,\n\t\trosterId = items.rosterId,\n\t\tshowAsTwelveHourTime = items.showAsTwelveHourTime,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FlattenItems\nUnionAlterRowCondition alterRow(insertIf(equals(AlterRowCondition,\"Insert\")),\n\tupdateIf(equals(AlterRowCondition,\"Update\")),\n\tdeleteIf(equals(AlterRowCondition,\"Delete\"))) ~> AlterRow1\nCastDateType1 select(mapColumn(\n\t\tceaseDate,\n\t\tcommencementDate,\n\t\tcostingSettings,\n\t\tcustomPeriodDuration,\n\t\tdefaultPeriodDurationType,\n\t\tdescription,\n\t\tisTemplate,\n\t\tname,\n\t\tnotifyEmployeesByDefault,\n\t\tpaid,\n\t\trosterId,\n\t\tshowAsTwelveHourTime,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutArrayColumns1\nFlattenItems derive(ceaseDate = toDate(ceaseDate),\n\t\tcommencementDate = toDate(commencementDate),\n\t\tpipelineTriggerTime = fromUTC(toTimestamp(pipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType1\nFlattenItems foldDown(unroll(includedRosterEmployees, includedRosterEmployees),\n\tmapColumn(\n\t\temployeeId = includedRosterEmployees.employee.id,\n\t\temployeeName = includedRosterEmployees.employee.name,\n\t\tincludedRosterEmployeeId = includedRosterEmployees.includedRosterEmployeeId,\n\t\tprimaryAssignments = includedRosterEmployees.primaryAssignments,\n\t\trosterId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FlattenIncludedRosterEmployees\nFlattenItems, FlattenIncludedRosterEmployees join(FlattenItems@rosterId == FlattenIncludedRosterEmployees@rosterId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nCastDateType2, SelectOutArrayColumns1 exists(sourceSql@rosterId == SelectOutArrayColumns1@rosterId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsDelete\nSelectOutArrayColumns1, CastDateType2 exists(SelectOutArrayColumns1@rosterId == sourceSql@rosterId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nSelectOutArrayColumns1, CastDateType2 exists(SelectOutArrayColumns1@rosterId == sourceSql@rosterId,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistsUpdate\nExistsUpdate derive(AlterRowCondition = \"Update\") ~> Update\nNotExistsInsert derive(AlterRowCondition = \"Insert\") ~> Insert\nNotExistsDelete derive(AlterRowCondition = \"Delete\") ~> Delete\nInsert, Update, Delete union(byName: true)~> UnionAlterRowCondition\nsourceSql derive(pipelineTriggerTime = fromUTC(toTimestamp(pipelineTriggerTime))) ~> CastDateType2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['rosterId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false) ~> sinkSql"
		}
	}
}