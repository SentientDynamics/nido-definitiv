{
	"name": "df_FlattenOrgPayRuns_UpdateOrgPayRuns",
	"properties": {
		"folder": {
			"name": "07_PayRuns"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
						"type": "DatasetReference"
					},
					"name": "SourceBlobDefinitivPayRuns"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AlterRow1"
				}
			],
			"script": "source(output(\n\t\tOrg as (LegalName as string, OrganizationId as string),\n\t\tOrgPayRun as (PipelineName as string, PipelineRunId as string, PipelineTriggerTime as string),\n\t\tPayCalendar as (atoLodgementsEnabled as boolean, description as string, payCalendarId as string, period as string, periodStartDate as string, proRataMode as string, weeklyFactor as double, weeklyFactorEquation as short),\n\t\tcurrentFinancialYearEndDate as string,\n\t\tcurrentFinancialYearStartDate as string,\n\t\tdateLastCalculated as string,\n\t\tdateOpened as string,\n\t\tdatePublished as string,\n\t\temployeeCount as short,\n\t\teofyLodgementStatus as string,\n\t\tfinancialYearEndDate as string,\n\t\tfinancialYearStartDate as string,\n\t\tinitiatingUserId as string,\n\t\tinitiatingUserName as string,\n\t\tlodgementStatus as string,\n\t\tnotes as string,\n\t\tpayCalendarId as string,\n\t\tpayCalendarName as string,\n\t\tpayRunId as string,\n\t\tpaymentDate as string,\n\t\tpayslipGenerationStatus as string,\n\t\tperiodEnd as string,\n\t\tperiodStart as string,\n\t\tpublishingUserId as string,\n\t\tpublishingUserName as string,\n\t\trunNumber as short,\n\t\tstatus as string,\n\t\tsuperannuationPaymentDate as string,\n\t\ttype as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivPayRuns\nSourceBlobDefinitivPayRuns alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:true,\n\tkeys:['payRunId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}