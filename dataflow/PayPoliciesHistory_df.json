{
	"name": "PayPoliciesHistory_df",
	"properties": {
		"folder": {
			"name": "00_Definitv Dataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PayPoliciesHistory_ds",
						"type": "DatasetReference"
					},
					"name": "jsoninput"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "WriteToSQLDB"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          payPolicyAssignmentId as string,",
				"          payPolicyId as string,",
				"          payPolicyName as string,",
				"          commencementDate as date,",
				"          ceaseDate as date,",
				"          hoursInWorkingWeek as string,",
				"          fullTimeEquivalentWeeklyHours as float,",
				"          customPayPolicy as (customPayPolicyId as string, name as string, baseRate as (isDraft as boolean, type as string, salary as string, totalPackage as string, weeklyHours as string, fullTimeEquivalentWeeklyHours as float, dailyRate as string, dailyHours as string, hourlyRate as float, allPurposeRate as string, hourlyRateRuleId as string), payRates as string[], payRateRules as string[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true,",
				"     documentForm: 'documentPerLine') ~> jsoninput",
				"jsoninput foldDown(unroll(),",
				"     mapColumn(",
				"          {Policy Name} = payPolicyName,",
				"          {Commencement Date} = commencementDate,",
				"          {Cease Date} = ceaseDate,",
				"          {FTE Weekly Hours} = fullTimeEquivalentWeeklyHours,",
				"          {Custom Policy Name} = customPayPolicy.name,",
				"          {Custom FTE Weekly Hours} = customPayPolicy.baseRate.fullTimeEquivalentWeeklyHours,",
				"          {Hourly Rate} = customPayPolicy.baseRate.hourlyRate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
			]
		}
	}
}