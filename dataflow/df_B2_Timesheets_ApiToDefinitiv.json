{
	"name": "df_B2_Timesheets_ApiToDefinitiv",
	"properties": {
		"folder": {
			"name": "03_Timesheets"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
						"type": "DatasetReference"
					},
					"name": "SourceBlobDefinitivTimesheets"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "SourceSqlDefinitivTimesheets"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "SourceSqlOrgRosters"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "SinkSqlDefinitivTimesheets",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls2_stnidoprodeastau100",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AlterRow1"
				},
				{
					"name": "CastDateType1"
				},
				{
					"name": "FilterPeriodEndDate"
				},
				{
					"name": "Insert"
				},
				{
					"name": "NotExistsDelete"
				},
				{
					"name": "Delete"
				},
				{
					"name": "Update"
				},
				{
					"name": "UnionAlterRowCondition"
				},
				{
					"name": "CastDateType2"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Select2"
				},
				{
					"name": "ExistsUpdate"
				},
				{
					"name": "NotExistsInsert"
				},
				{
					"name": "SelectSqlOrgRosters"
				},
				{
					"name": "LeftOuterOrgRosters"
				},
				{
					"name": "Filter1"
				}
			],
			"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string,\n\tPipelineName as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivTimesheets\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPipelineTimesheetEndDate as date,\n\t\tPipelineTimesheetStartDate as date,\n\t\tEmployeeId as string,\n\t\tLeaveApplicationId as string,\n\t\tOrganizationId as string,\n\t\tTimesheetId as string,\n\t\tRosterId as string,\n\t\tRosterName as string,\n\t\tRosterDescription as string,\n\t\tRosterPeriodDurationType as string,\n\t\tRosterPeriodDurationCustomTypeValue as string,\n\t\tRosterIsTwleveHourTime as boolean,\n\t\tRosterIsPaid as boolean,\n\t\tRosterEndDate as date,\n\t\tRosterStartDate as date,\n\t\tApprovalStatus as string,\n\t\tCentreCostCode as string,\n\t\tDate as date,\n\t\tEmployee as string,\n\t\tEmployeeRefNo as integer,\n\t\tEmploymentType as string,\n\t\tEnd as timestamp,\n\t\tRoom as string,\n\t\tRoomCostCode as string,\n\t\tStart as timestamp,\n\t\tTotalCost as double,\n\t\tTotalHours as double,\n\t\tWorkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivTimesheets\nsource(output(\n\t\tceaseDate as date,\n\t\tcommencementDate as date,\n\t\tcostingSettings as string,\n\t\tcustomPeriodDuration as short,\n\t\tdefaultPeriodDurationType as string,\n\t\tdescription as string,\n\t\tisTemplate as boolean,\n\t\tname as string,\n\t\tnotifyEmployeesByDefault as boolean,\n\t\tpaid as boolean,\n\t\trosterId as string,\n\t\tshowAsTwelveHourTime as boolean,\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tSourceFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlOrgRosters\nLeftOuterOrgRosters alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nSelect2 derive() ~> CastDateType1\nCastDateType1 filter(greater(Date, toDate(\"2021-10-15\", 'yyyy-MM-dd'))) ~> FilterPeriodEndDate\nNotExistsInsert derive(AlterRowCondition = \"Insert\",\n\t\tRecordCreatedDate = toTimestamp($PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'),\n\t\tRecordIsDeleted = false(),\n\t\tFolderPath = concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")) ~> Insert\nCastDateType2, FilterPeriodEndDate exists(Select1@EmployeeId == Select2@EmployeeId\n\t&& Select1@RosterId == Select2@RosterId\n\t&& Select1@TimesheetId == Select2@TimesheetId\n\t&& Select1@LeaveApplicationId == Select2@LeaveApplicationId,\n\tnegate:true,\n\tbroadcast: 'right')~> NotExistsDelete\nNotExistsDelete derive(AlterRowCondition = \"Delete\",\n\t\tRecordIsDeleted = true()) ~> Delete\nExistsUpdate derive(AlterRowCondition = \"Update\",\n\t\tRecordModifiedDate = toTimestamp($PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'),\n\t\tRecordIsDeleted = false(),\n\t\tFolderPath = concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss')),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")) ~> Update\nUpdate, Insert, Delete union(byName: true)~> UnionAlterRowCondition\nSelect1 derive(PipelineTriggerTime = fromUTC(toTimestamp($PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType2\nSourceSqlDefinitivTimesheets select(mapColumn(\n\t\tEmployeeId,\n\t\tLeaveApplicationId,\n\t\tOrganizationId,\n\t\tTimesheetId,\n\t\tRosterId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSourceBlobDefinitivTimesheets select(mapColumn(\n\t\tApprovalStatus = approvalStatus,\n\t\tCentreCostCode = centreCostCode,\n\t\tDate = date,\n\t\tEmployee = employee,\n\t\tEmployeeId = employeeId,\n\t\tEmployeeRefNo = {employeeRef.No},\n\t\tEmploymentType = employmentType,\n\t\tEnd = end,\n\t\tLeaveApplicationId = leaveApplicationId,\n\t\tOrganizationId = paramOrganizationId,\n\t\tRoom = room,\n\t\tRoomCostCode = roomCostCode,\n\t\tRosterName = roster,\n\t\tRosterId = rosterId,\n\t\tStart = start,\n\t\tTimesheetId = timesheetId,\n\t\tTotalCost = totalCost,\n\t\tTotalHours = totalHours,\n\t\tPipelineTimesheetStartDate = varTimesheetDate,\n\t\tWorkType = workType,\n\t\tPipelineSourceFileName = SourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nFilterPeriodEndDate, CastDateType2 exists(Select2@EmployeeId == Select1@EmployeeId\n\t&& Select2@RosterId == Select1@RosterId\n\t&& Select2@TimesheetId == Select1@TimesheetId\n\t&& Select2@LeaveApplicationId == Select1@LeaveApplicationId,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nFilterPeriodEndDate, CastDateType2 exists(Select2@EmployeeId == Select1@EmployeeId\n\t&& Select2@RosterId == Select1@RosterId\n\t&& Select2@TimesheetId == Select1@TimesheetId\n\t&& Select2@LeaveApplicationId == Select1@LeaveApplicationId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nSourceSqlOrgRosters select(mapColumn(\n\t\tRosterEndDate = ceaseDate,\n\t\tRosterStartDate = commencementDate,\n\t\tRosterPeriodDurationTypeCustomValue = customPeriodDuration,\n\t\tRosterPeriodDurationType = defaultPeriodDurationType,\n\t\tRosterDescription = description,\n\t\tRosterName = name,\n\t\tRosterIsPaid = paid,\n\t\tRosterId = rosterId,\n\t\tRosterIsTwelveHourTime = showAsTwelveHourTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSqlOrgRosters\nUnionAlterRowCondition, SelectSqlOrgRosters join(upper(UnionAlterRowCondition@RosterId) == upper(SelectSqlOrgRosters@RosterId),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftOuterOrgRosters\nLeftOuterOrgRosters filter(isNull(RosterStartDate)) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmployeeId','RosterId','TimesheetId','LeaveApplicationId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tApprovalStatus,\n\t\tCentreCostCode,\n\t\tDate,\n\t\tEmployee,\n\t\tEmployeeId,\n\t\tEmployeeRefNo,\n\t\tEmploymentType,\n\t\tEnd,\n\t\tLeaveApplicationId,\n\t\tOrganizationId,\n\t\tRoom,\n\t\tRoomCostCode,\n\t\tRosterName = {UnionAlterRowCondition@RosterName},\n\t\tRosterId = UnionAlterRowCondition@RosterId,\n\t\tStart,\n\t\tTimesheetId,\n\t\tTotalCost,\n\t\tTotalHours,\n\t\tPipelineTimesheetStartDate,\n\t\tWorkType,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tPipelineTriggerTime,\n\t\tRosterStartDate = RosterEndDate,\n\t\tRosterEndDate,\n\t\tRosterPeriodDurationTypeCustomValue,\n\t\tRosterPeriodDurationType,\n\t\tRosterDescription,\n\t\tRosterName,\n\t\tRosterIsPaid,\n\t\tRosterId = SelectSqlOrgRosters@RosterId,\n\t\tRosterIsTwelveHourTime\n\t)) ~> SinkSqlDefinitivTimesheets"
		}
	}
}