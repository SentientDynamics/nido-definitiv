{
	"name": "df_UpdateDraftPayslips_Definitiv",
	"properties": {
		"folder": {
			"name": "01_Payslips"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "SourceSqlDraft"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "SourceSqlDefinitiv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_tnk001",
						"type": "DatasetReference"
					},
					"name": "SinkSql",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls2_stnidoprodeastau100",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AlterRow1"
				},
				{
					"name": "UnionAlterRowCondition"
				},
				{
					"name": "ExistsUpdate"
				},
				{
					"name": "NotExistsInsert"
				},
				{
					"name": "Update"
				},
				{
					"name": "Insert"
				}
			],
			"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDraft\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitiv\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\")) ~> AlterRow1\nUpdate, Insert union(byName: true)~> UnionAlterRowCondition\nSourceSqlDefinitiv, SourceSqlDraft exists(SourceSqlDefinitiv@RecordId == SourceSqlDraft@RecordId \r\n    && SourceSqlDefinitiv@RecordVersion != SourceSqlDraft@RecordVersion,\n\tnegate:false,\n\tbroadcast: 'left')~> ExistsUpdate\nSourceSqlDefinitiv, SourceSqlDraft exists(SourceSqlDefinitiv@RecordId == SourceSqlDraft@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nExistsUpdate derive(AlterRowCondition = \"Update\") ~> Update\nNotExistsInsert derive(AlterRowCondition = \"Insert\") ~> Insert\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['RecordId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportPayslipsErrorOutput/\", toString($PipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $PipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tRecordId,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tEmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayslipLineItemId,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tAlterRowCondition\n\t)) ~> SinkSql"
		}
	}
}