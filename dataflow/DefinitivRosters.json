{
	"name": "DefinitivRosters",
	"properties": {
		"folder": {
			"name": "00_Definitv"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Rosters_ds",
						"type": "DatasetReference"
					},
					"name": "jsoninput"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLSink",
						"type": "DatasetReference"
					},
					"name": "WriteToSQLDB",
					"description": "Export data to SQLSink"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
				"          reportData as (organisationName as string, organisationExportCode as string, organisationGLCode as string, teamHierarchy as string, rosterName as string, rosterDescription as string, rosterPeriod as string, shiftPublishedState as string, sourceType as string, status as string, employee as string, date as string, dayIndex as string, role as string, timePeriodMode as string, startTimeOfDay as string, endTimeOfDay as string, durationHours as double, publicHolidayWorked as string, position as string, shiftType as string, project as string, projectWorkOrder as string, department as string, location as string, notes as string, breakTimes as string, breakDurationHours as double, responseDateTime as string, responseReason as string, deleted as string, customFields as (kmAllowance as string, staffMeeting as (StartTimeOfDay as string, EndTimeOfDay as string, DurationHours as string, Value as boolean)[]))[],",
				"          extraReportData as string[],",
				"          serverTime as string,",
				"          addFooterRow as boolean,",
				"          addStatusBar as boolean,",
				"          reportVariantTag as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> jsoninput",
				"jsoninput foldDown(unroll(reportData),",
				"     mapColumn(",
				"          Organisation = reportData.organisationName,",
				"          {Organisation GL Code} = reportData.organisationGLCode,",
				"          {Roster Name} = reportData.rosterName,",
				"          {Roster Period} = reportData.rosterPeriod,",
				"          {Shift Published State} = reportData.shiftPublishedState,",
				"          {Source Type} = reportData.sourceType,",
				"          Status = reportData.status,",
				"          Employee = reportData.employee,",
				"          Date = reportData.date,",
				"          DayofWeek = reportData.dayIndex,",
				"          Role = reportData.role,",
				"          Position = reportData.position,",
				"          {Shift Type} = reportData.shiftType,",
				"          Project = reportData.project,",
				"          {Project WorkOrder} = reportData.projectWorkOrder,",
				"          Department = reportData.department,",
				"          Location = reportData.location,",
				"          {Time Period Mode} = reportData.timePeriodMode,",
				"          {Start Time} = reportData.startTimeOfDay,",
				"          {End Time} = reportData.endTimeOfDay,",
				"          {Duration Hours} = reportData.durationHours,",
				"          {Break Duration Hours} = reportData.breakDurationHours,",
				"          {Public Holiday Worked} = reportData.publicHolidayWorked,",
				"          Notes = reportData.notes,",
				"          {Break Times} = reportData.breakTimes,",
				"          {Response DateTime} = reportData.responseDateTime,",
				"          {Response Reason} = reportData.responseReason,",
				"          {Deleted?} = reportData.deleted",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
			]
		}
	}
}