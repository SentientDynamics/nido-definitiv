{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-nido-prod-eastau-100"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RostersCosts_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "string"
					},
					"ds_PipelineRunId": {
						"type": "string"
					},
					"ds_FileSystem": {
						"type": "string"
					},
					"ds_Directory": {
						"type": "string"
					},
					"ds_PipelineName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_Definitiv Datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RostersV3_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "string"
					},
					"ds_PipelineRunId": {
						"type": "string"
					},
					"ds_FileSystem": {
						"type": "string"
					},
					"ds_Directory": {
						"type": "string"
					},
					"ds_PipelineName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_Definitiv Datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"headers": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"filterDisabled": {
										"type": "boolean"
									},
									"sortDisabled": {
										"type": "boolean"
									},
									"hiddenByDefault": {
										"type": "boolean"
									},
									"searchDisabled": {
										"type": "boolean"
									},
									"dataType": {
										"type": "string"
									},
									"fieldName": {
										"type": "string"
									},
									"defaultPivotColumnOrder": {
										"type": "integer"
									},
									"defaultPivotRowOrder": {
										"type": "integer"
									},
									"defaultPivotValueOrder": {
										"type": "integer"
									},
									"defaultSortOrder": {
										"type": "integer"
									},
									"defaultSortDirection": {
										"type": "string"
									},
									"defaultPivotAggregation": {
										"type": "null"
									},
									"isDynamicColumns": {
										"type": "boolean"
									},
									"isCustomFields": {
										"type": "boolean"
									},
									"customFieldsKeyName": {
										"type": "null"
									},
									"createDayOfWeekColumn": {
										"type": "boolean"
									},
									"prependBaseColumnNameToDayOfWeekColumn": {
										"type": "boolean"
									},
									"trueText": {
										"type": "null"
									},
									"falseText": {
										"type": "null"
									},
									"nullDisplayText": {
										"type": "null"
									},
									"disableDefaultAggregation": {
										"type": "boolean"
									},
									"numericPrecision": {
										"type": "null"
									}
								}
							}
						},
						"reportData": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"organisationName": {
										"type": "string"
									},
									"organisationExportCode": {
										"type": "string"
									},
									"organisationGLCode": {
										"type": "string"
									},
									"teamHierarchy": {
										"type": "null"
									},
									"rosterName": {
										"type": "string"
									},
									"rosterDescription": {
										"type": "string"
									},
									"rosterPeriod": {
										"type": "string"
									},
									"shiftPublishedState": {
										"type": "string"
									},
									"sourceType": {
										"type": "string"
									},
									"status": {
										"type": "string"
									},
									"employee": {
										"type": "string"
									},
									"date": {
										"type": "string"
									},
									"dayIndex": {
										"type": "string"
									},
									"role": {
										"type": "string"
									},
									"timePeriodMode": {
										"type": "string"
									},
									"startTimeOfDay": {
										"type": "string"
									},
									"endTimeOfDay": {
										"type": "string"
									},
									"durationHours": {
										"type": "number"
									},
									"publicHolidayWorked": {
										"type": "null"
									},
									"position": {
										"type": "string"
									},
									"shiftType": {
										"type": "string"
									},
									"project": {
										"type": "string"
									},
									"projectWorkOrder": {
										"type": "string"
									},
									"department": {
										"type": "string"
									},
									"location": {
										"type": "string"
									},
									"notes": {
										"type": "string"
									},
									"breakTimes": {
										"type": "string"
									},
									"breakDurationHours": {
										"type": "number"
									},
									"responseDateTime": {
										"type": "null"
									},
									"responseReason": {
										"type": "null"
									},
									"deleted": {
										"type": "string"
									},
									"customFields": {
										"type": "object",
										"properties": {
											"kmAllowance": {
												"type": "null"
											},
											"staffMeeting": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"StartTimeOfDay": {
															"type": "null"
														},
														"EndTimeOfDay": {
															"type": "null"
														},
														"DurationHours": {
															"type": "null"
														},
														"Value": {
															"type": "boolean"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"extraReportData": {
							"type": "array"
						},
						"serverTime": {
							"type": "string"
						},
						"addFooterRow": {
							"type": "boolean"
						},
						"addStatusBar": {
							"type": "boolean"
						},
						"reportVariantTag": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Timesheets_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "string"
					},
					"ds_PipelineRunId": {
						"type": "string"
					},
					"ds_FileSystem": {
						"type": "string"
					},
					"ds_Directory": {
						"type": "string"
					},
					"ds_PipelineName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_Definitiv Datasets"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"headers": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"filterDisabled": {
										"type": "boolean"
									},
									"sortDisabled": {
										"type": "boolean"
									},
									"hiddenByDefault": {
										"type": "boolean"
									},
									"searchDisabled": {
										"type": "boolean"
									},
									"dataType": {
										"type": "string"
									},
									"fieldName": {
										"type": "string"
									},
									"defaultPivotColumnOrder": {
										"type": "integer"
									},
									"defaultPivotRowOrder": {
										"type": "integer"
									},
									"defaultPivotValueOrder": {
										"type": "integer"
									},
									"defaultSortOrder": {
										"type": "integer"
									},
									"defaultSortDirection": {
										"type": "string"
									},
									"defaultPivotAggregation": {
										"type": "null"
									},
									"isDynamicColumns": {
										"type": "boolean"
									},
									"isCustomFields": {
										"type": "boolean"
									},
									"customFieldsKeyName": {
										"type": "null"
									},
									"createDayOfWeekColumn": {
										"type": "boolean"
									},
									"prependBaseColumnNameToDayOfWeekColumn": {
										"type": "boolean"
									},
									"trueText": {
										"type": "null"
									},
									"falseText": {
										"type": "null"
									},
									"nullDisplayText": {
										"type": "null"
									},
									"disableDefaultAggregation": {
										"type": "boolean"
									},
									"numericPrecision": {
										"type": "null"
									}
								}
							}
						},
						"reportData": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"organisationName": {
										"type": "string"
									},
									"glCode": {
										"type": "string"
									},
									"exportCode": {
										"type": "null"
									},
									"employeeNumber": {
										"type": "string"
									},
									"printName": {
										"type": "string"
									},
									"firstName": {
										"type": "string"
									},
									"surname": {
										"type": "string"
									},
									"employmentStatus": {
										"type": "string"
									},
									"payCalendar": {
										"type": "string"
									},
									"date": {
										"type": "string"
									},
									"approvalStatus": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"leaveType": {
										"type": "null"
									},
									"leaveReason": {
										"type": "null"
									},
									"project": {
										"type": "string"
									},
									"projectCode": {
										"type": "string"
									},
									"role": {
										"type": "string"
									},
									"roleCode": {
										"type": "null"
									},
									"location": {
										"type": "string"
									},
									"locationCode": {
										"type": "string"
									},
									"department": {
										"type": "string"
									},
									"departmentCode": {
										"type": "null"
									},
									"shiftType": {
										"type": "null"
									},
									"shiftTypeCode": {
										"type": "null"
									},
									"workOrder": {
										"type": "null"
									},
									"workOrderCode": {
										"type": "null"
									},
									"durationHours": {
										"type": "number"
									},
									"breakDurationHours": {
										"type": "number"
									},
									"startTime": {
										"type": "string"
									},
									"finishTime": {
										"type": "string"
									},
									"submittedBy": {
										"type": "null"
									},
									"submittedDateTime": {
										"type": "string"
									},
									"approvers": {
										"type": "string"
									},
									"approvedBy": {
										"type": "null"
									},
									"approvalTime": {
										"type": "null"
									},
									"notes": {
										"type": "null"
									},
									"leaveTypeCode": {
										"type": "null"
									},
									"leaveReasonCode": {
										"type": "null"
									},
									"customFields": {
										"type": "object",
										"properties": {
											"kmAllowance": {
												"type": "null"
											},
											"staffMeeting": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"staffMeetingHours": {
												"type": "number"
											}
										}
									},
									"publicHolidayWorked": {
										"type": "null"
									}
								}
							}
						},
						"extraReportData": {
							"type": "array"
						},
						"serverTime": {
							"type": "string"
						},
						"addFooterRow": {
							"type": "boolean"
						},
						"addStatusBar": {
							"type": "boolean"
						},
						"reportVariantTag": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls2_stnidoprodeastau100_json_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "string",
						"defaultValue": "2022-01-25T00:18:17.611502Z"
					},
					"ds_PipelineRunId": {
						"type": "string",
						"defaultValue": "187d99be-a307-4534-9acc-0a17fc03d0ab"
					},
					"ds_FileSystem": {
						"type": "string",
						"defaultValue": "container-adf-nido-prod-eastau-100-1"
					},
					"ds_Directory": {
						"type": "string",
						"defaultValue": "ds_adls2_stnidoprodeastau100_json_output"
					},
					"ds_PipelineName": {
						"type": "string",
						"defaultValue": "pl_B1_Payslips_ApiToDefinitiv"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rest_definitiv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_rest_definitiv",
					"type": "LinkedServiceReference",
					"parameters": {
						"sourceBaseUrl": "https://nido.definitiv.com.au"
					}
				},
				"parameters": {
					"sourceRelativeUrl": {
						"type": "String",
						"defaultValue": "/api/v2/organizations"
					}
				},
				"folder": {
					"name": "00_Definitiv Datasets"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().sourceRelativeUrl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_tnk001')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_tnk001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"param_TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_Definitiv Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().param_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Compliance_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Compliance_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WritetoSQLDB",
							"description": "Export data to ds_sql_tnk001"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (employeeNumber as string, printName as string, projectAssignment as string, projectExportCode as string, departmentAssignment as string, departmentExportCode as string, locationAssignment as string, locationExportCode as string, roleAssignment as string, roleExportCode as string, firstName as string, surname as string, qualification as string, dateObtained as string, expiryDate as string, isExpired as boolean, employeeId as string, qualificationId as string, customFields as ({} as string), attachments as string, comments as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          employeeNumber = reportData.employeeNumber,",
						"          printName = reportData.printName,",
						"          projectAssignment = reportData.projectAssignment,",
						"          projectExportCode = reportData.projectExportCode,",
						"          departmentAssignment = reportData.departmentAssignment,",
						"          locationAssignment = reportData.locationAssignment,",
						"          roleAssignment = reportData.roleAssignment,",
						"          qualification = reportData.qualification,",
						"          dateObtained = reportData.dateObtained,",
						"          expiryDate = reportData.expiryDate,",
						"          isExpired = reportData.isExpired,",
						"          employeeId = reportData.employeeId,",
						"          attachments = reportData.attachments,",
						"          comments = reportData.comments",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     postSQLs:['DELETE FROM Definitiv_Compliance\\nWHERE employeeNumber IS NULL'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WritetoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeePayPolicies_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeePayPolicies_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (employeeNumber as string, printName as string, title as string, firstName as string, surname as string, middleName as string, preferredName as string, gender as string, dateOfBirth as string, hireDate as string, hireReason as string, terminationDate as string, terminationReason as string, employmentStatus as string, payCalendar as string, policyCode as string, policyType as string, policyName as string, commencementDate as string, ceaseDate as string, payRateType as string, salary as string, salaryFte as string, totalPackage as string, totalPackageFte as string, weeklyHours as string, fullTimeEquivalentWeeklyHours as string, fullTimeEquivalentRatio as string, dailyRate as string, dailyHours as string, hourlyRate as double, allPurposeRate as double, payRates as string[], primaryProject as string, primaryProjectCode as string, canOnlyWorkAssignedProjects as string, primaryRole as string, primaryRoleCode as string, primaryLocation as string, primaryLocationCode as string, primaryDepartment as string, primaryDepartmentCode as string, workSchedule as string, workScheduleDescription as string, shiftType as string, shiftTypeCode as string, usualPlaceOfResidence as string, employeeId as string, primaryProjectId as string, primaryRoleId as string, primaryLocationId as string, primaryDepartmentId as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          Gender = reportData.gender,",
						"          {Date of Birth} = reportData.dateOfBirth,",
						"          {Hire Date} = reportData.hireDate,",
						"          {Hire Reason} = reportData.hireReason,",
						"          {Termination Date} = reportData.terminationDate,",
						"          {Termination Reason} = reportData.terminationReason,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          {Policy Type} = reportData.policyType,",
						"          {Policy Name} = reportData.policyName,",
						"          {Commencement Date} = reportData.commencementDate,",
						"          {Cease Date} = reportData.ceaseDate,",
						"          {Pay Rate Type} = reportData.payRateType,",
						"          Salary = reportData.salary,",
						"          {Salary FTE} = reportData.salaryFte,",
						"          {Total Package} = reportData.totalPackage,",
						"          {Total Package FTE} = reportData.totalPackageFte,",
						"          {Weekly Hours} = reportData.weeklyHours,",
						"          {FTE Weekly Hours} = reportData.fullTimeEquivalentWeeklyHours,",
						"          {FTE Ratio} = reportData.fullTimeEquivalentRatio,",
						"          {Daily Rate} = reportData.dailyRate,",
						"          {Daily Hours} = reportData.dailyHours,",
						"          {Hourly Rate} = reportData.hourlyRate,",
						"          {All Purpose Rate} = reportData.allPurposeRate,",
						"          {Primary Project} = reportData.primaryProject,",
						"          {Primary Project Code} = reportData.primaryProjectCode,",
						"          {Can Only Work Assigned Projects} = reportData.canOnlyWorkAssignedProjects,",
						"          {Primary Role} = reportData.primaryRole,",
						"          {Primary Role Code} = reportData.primaryRoleCode,",
						"          {Primary Location} = reportData.primaryLocation,",
						"          {Primary Location Code} = reportData.primaryLocationCode,",
						"          {Primary Department} = reportData.primaryDepartment,",
						"          {Primary Department Code} = reportData.primaryDepartmentCode,",
						"          {Work Schedule} = reportData.workSchedule,",
						"          {Work Schedule Description} = reportData.workScheduleDescription,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Usual Place of Residence} = reportData.usualPlaceOfResidence,",
						"          {Employee ID} = reportData.employeeId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeesHistory_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeesHistory_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, title as string, firstName as string, surname as string, middleName as string, preferredName as string, gender as string, dateOfBirth as string, phoneNumbers as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], addresses as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], emailAddresses as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], hireDate as string, yearsOfServiceStartDate as string, hireReason as string, terminateDate as string, terminationReason as string, lastPaidDate as string, positionOrgChart as string, divisionOrgChart as string, employmentStatus as string, managerIds as string, payCalendar as string, primaryProjectName as string, primaryProjectCode as string, canOnlyWorkAssignedProjects as string, primaryRoleName as string, primaryRoleCode as string, primaryLocationName as string, primaryLocationCode as string, primaryDepartmentName as string, primaryDepartmentCode as string, workSchedule as string, shiftType as string, shiftTypeCode as string, usualPlaceOfResidence as string, employeeId as string, primaryProjectId as string, primaryRoleId as string, primaryLocationId as string, primaryDepartmentId as string, username as string, customFields as (asOfDate as string, contractedHours as double, jobAdderCandidateId as string, aboriginalTorresStIslanderStatus as boolean, bonus2 as string, notes as string, legalRightToWorkInAustralia as boolean, probationEndDate as string, ineligibleForPerformanceReview as boolean))[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Organisation Export Code} = reportData.exportCode,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          Gender = reportData.gender,",
						"          {Date of Birth} = reportData.dateOfBirth,",
						"          {Hire Date} = reportData.hireDate,",
						"          {Years of Service Start Date} = reportData.yearsOfServiceStartDate,",
						"          {Hire Reason} = reportData.hireReason,",
						"          {Termination Date} = reportData.terminateDate,",
						"          {Termination Reason} = reportData.terminationReason,",
						"          {Last Paid Date} = reportData.lastPaidDate,",
						"          {Position - Org Chart} = reportData.positionOrgChart,",
						"          {Division - Org Chart} = reportData.divisionOrgChart,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Line Manager(s) Emp No} = reportData.managerIds,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          {Primary Project} = reportData.primaryProjectName,",
						"          {Primary Project Code} = reportData.primaryProjectCode,",
						"          {Can Only Work Assigned Projects} = reportData.canOnlyWorkAssignedProjects,",
						"          {Primary Role} = reportData.primaryRoleName,",
						"          {Primary Role Code} = reportData.primaryRoleCode,",
						"          {Primary Location} = reportData.primaryLocationName,",
						"          {Primary Location Code} = reportData.primaryLocationCode,",
						"          {Primary Department} = reportData.primaryDepartmentName,",
						"          {Primary Department Code} = reportData.primaryDepartmentCode,",
						"          {Work Schedule} = reportData.workSchedule,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Usual Place of Residence} = reportData.usualPlaceOfResidence,",
						"          {Employee ID} = reportData.employeeId,",
						"          {User Account Created} = reportData.username,",
						"          {Aboriginal Torres St Islander Status} = reportData.customFields.aboriginalTorresStIslanderStatus,",
						"          Bonus = reportData.customFields.bonus2,",
						"          {Contracted Hours} = reportData.customFields.contractedHours,",
						"          {Ineligible for Performance Review} = reportData.customFields.ineligibleForPerformanceReview,",
						"          {Job Adder Candidate Id} = reportData.customFields.jobAdderCandidateId,",
						"          {Legal Right to Work in Australia} = reportData.customFields.legalRightToWorkInAustralia,",
						"          Notes = reportData.customFields.notes,",
						"          {Probation End Date} = reportData.customFields.probationEndDate,",
						"          {Phone No - MobilePhone} = reportData.phoneNumbers.value,",
						"          {Address - Home} = reportData.addresses.value,",
						"          {Email - Primary} = reportData.emailAddresses.value,",
						"          AsOfDate = reportData.customFields.asOfDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     postSQLs:['  DELETE FROM [Definitiv_Employees_History]\\n  WHERE [Organisation GL Code] IS NULL'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Employees_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employees_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, title as string, firstName as string, surname as string, middleName as string, preferredName as string, gender as string, dateOfBirth as string, phoneNumbers as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], addresses as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], emailAddresses as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], hireDate as string, yearsOfServiceStartDate as string, hireReason as string, terminateDate as string, terminationReason as string, lastPaidDate as string, positionOrgChart as string, divisionOrgChart as string, employmentStatus as string, managerIds as string, payCalendar as string, primaryProjectName as string, primaryProjectCode as string, canOnlyWorkAssignedProjects as string, primaryRoleName as string, primaryRoleCode as string, primaryLocationName as string, primaryLocationCode as string, primaryDepartmentName as string, primaryDepartmentCode as string, workSchedule as string, shiftType as string, shiftTypeCode as string, usualPlaceOfResidence as string, employeeId as string, primaryProjectId as string, primaryRoleId as string, primaryLocationId as string, primaryDepartmentId as string, username as string, customFields as (asOfDate as string, contractedHours as double, jobAdderCandidateId as string, aboriginalTorresStIslanderStatus as boolean, bonus2 as string, notes as string, legalRightToWorkInAustralia as boolean, probationEndDate as string, ineligibleForPerformanceReview as boolean))[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Organisation Export Code} = reportData.exportCode,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          Gender = reportData.gender,",
						"          {Date of Birth} = reportData.dateOfBirth,",
						"          {Hire Date} = reportData.hireDate,",
						"          {Years of Service Start Date} = reportData.yearsOfServiceStartDate,",
						"          {Hire Reason} = reportData.hireReason,",
						"          {Termination Date} = reportData.terminateDate,",
						"          {Termination Reason} = reportData.terminationReason,",
						"          {Last Paid Date} = reportData.lastPaidDate,",
						"          {Position - Org Chart} = reportData.positionOrgChart,",
						"          {Division - Org Chart} = reportData.divisionOrgChart,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Line Manager(s) Emp No} = reportData.managerIds,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          {Primary Project} = reportData.primaryProjectName,",
						"          {Primary Project Code} = reportData.primaryProjectCode,",
						"          {Can Only Work Assigned Projects} = reportData.canOnlyWorkAssignedProjects,",
						"          {Primary Role} = reportData.primaryRoleName,",
						"          {Primary Role Code} = reportData.primaryRoleCode,",
						"          {Primary Location} = reportData.primaryLocationName,",
						"          {Primary Location Code} = reportData.primaryLocationCode,",
						"          {Primary Department} = reportData.primaryDepartmentName,",
						"          {Primary Department Code} = reportData.primaryDepartmentCode,",
						"          {Work Schedule} = reportData.workSchedule,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Usual Place of Residence} = reportData.usualPlaceOfResidence,",
						"          {Employee ID} = reportData.employeeId,",
						"          {User Account Created} = reportData.username,",
						"          {Aboriginal Torres St Islander Status} = reportData.customFields.aboriginalTorresStIslanderStatus,",
						"          Bonus = reportData.customFields.bonus2,",
						"          {Contracted Hours} = reportData.customFields.contractedHours,",
						"          {Ineligible for Performance Review} = reportData.customFields.ineligibleForPerformanceReview,",
						"          {Job Adder Candidate Id} = reportData.customFields.jobAdderCandidateId,",
						"          {Legal Right to Work in Australia} = reportData.customFields.legalRightToWorkInAustralia,",
						"          Notes = reportData.customFields.notes,",
						"          {Probation End Date} = reportData.customFields.probationEndDate,",
						"          {Phone No - MobilePhone} = reportData.phoneNumbers.value,",
						"          {Address - Home} = reportData.addresses.value,",
						"          {Email - Primary} = reportData.emailAddresses.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     postSQLs:['DROP TABLE TerminatedEmployeeEmails;\\n  \\nSELECT DISTINCT value AS Email\\n     INTO TerminatedEmployeeEmails\\n     FROM      [Definitiv_Employees] CROSS APPLY STRING_SPLIT(TRIM(REPLACE(REPLACE(REPLACE([Email - Primary], \\'[\"\\', \\'\\'), \\'\"]\\', \\'\\'), \\'\"\\', \\'\\')), \\',\\')\\n    WHERE   [Email - Primary] <> \\'[null]\\' AND ([Termination Date] < GETDATE() AND [Termination Reason] NOT LIKE \\'Transferred%\\') \\n               AND [Email - Primary] NOT IN (SELECT [Email - Primary]\\n                                              FROM      [dbo].[Definitiv_Employees]\\n                                              WHERE   [Termination Date] IS NULL OR [Termination Date] >= GETDATE());'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LeaveApplications_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LeaveApplications_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to SQLSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, firstName as string, surname as string, gender as string, leaveDateStart as string, leaveDateEnd as string, leaveAppNumDays as integer, leaveUnits as double, leaveUnitOfMeasure as string, leavePaymentStatus as string, leaveTypeName as string, leaveReasonName as string, leaveNotes as string, status as string, dateSubmitted as string, approvers as string, leaveApplicationId as string, employeeId as string, leaveTypeId as string, primaryProject as string, primaryProjectGlCode as string, primaryProjectCode as string, primaryRole as string, primaryRoleCode as string, primaryLocation as string, primaryLocationGlCode as string, primaryLocationCode as string, primaryDepartment as string, primaryDepartmentGlCode as string, primaryDepartmentCode as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          LeaveDateStart = reportData.leaveDateStart,",
						"          LeaveDateEnd = reportData.leaveDateEnd,",
						"          LeaveAppNumDays = reportData.leaveAppNumDays,",
						"          LeaveUnits = reportData.leaveUnits,",
						"          LeaveUnitOfMeasure = reportData.leaveUnitOfMeasure,",
						"          LeavePaymentStatus = reportData.leavePaymentStatus,",
						"          LeaveTypeName = reportData.leaveTypeName,",
						"          LeaveReasonName = reportData.leaveReasonName,",
						"          Status = reportData.status,",
						"          {Date Submitted} = reportData.dateSubmitted,",
						"          Approvers = reportData.approvers,",
						"          LeaveApplicationID = reportData.leaveApplicationId,",
						"          {Employee ID} = reportData.employeeId,",
						"          LeaveTypeID = reportData.leaveTypeId,",
						"          Project = reportData.primaryProject,",
						"          {Project Code} = reportData.primaryProjectCode,",
						"          Role = reportData.primaryRole,",
						"          Location = reportData.primaryLocation,",
						"          {Location Code} = reportData.primaryLocationCode,",
						"          Department = reportData.primaryDepartment",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     postSQLs:['DELETE FROM Definitiv_LeaveApplications\\nWHERE [LeaveApplicationID] IN (SELECT [LeaveApplicationID] FROM Definitiv_LeaveApplications_Staging);\\n\\nINSERT INTO Definitiv_LeaveApplications\\nSELECT * FROM Definitiv_LeaveApplications_Staging\\nWHERE LeaveDateStart IS NOT NULL;\\n\\nTRUNCATE TABLE Definitiv_LeaveApplications_Staging;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LeaveBalances_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LeaveBalances_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to SQLSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, firstName as string, surname as string, leaveTypeName as string, leaveEntitlementHours as double, leaveProRataHours as double, leaveTotalHours as double, primaryProjectName as string, primaryProjectGlCode as string, primaryProjectCode as string, primaryRoleName as string, primaryRoleCode as string, primaryLocationName as string, primaryLocationGlCode as string, primaryLocationCode as string, primaryDepartmentName as string, primaryDepartmentGlCode as string, primaryDepartmentCode as string, employeeId as string, leaveTypeId as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Employee ID} = reportData.employeeId,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          LeaveTypeName = reportData.leaveTypeName,",
						"          LeaveEntitlementHours = reportData.leaveEntitlementHours,",
						"          LeaveProRataHours = reportData.leaveProRataHours,",
						"          LeaveTotalHours = reportData.leaveTotalHours,",
						"          Project = reportData.primaryProjectName,",
						"          {Project Code} = reportData.primaryProjectCode,",
						"          Role = reportData.primaryRoleName,",
						"          Location = reportData.primaryLocationName,",
						"          Department = reportData.primaryDepartmentName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     postSQLs:['DELETE FROM Definitiv_LeaveBalances\\nWHERE Organisation IS NULL'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrganisationPayPolicies_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrganisationPayPolcies_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          payPolicyId as string,",
						"          name as string,",
						"          description as string,",
						"          lastUpdated as string,",
						"          commencementDate as string,",
						"          ceaseDate as string,",
						"          currentVersion as string,",
						"          currentVersionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Organizations_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Organizations_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          organizationId as string,",
						"          organizationCode as string,",
						"          legalName as string,",
						"          tradingName as string,",
						"          wpn as string,",
						"          abn as string,",
						"          branchCode as string,",
						"          acn as string,",
						"          employeeSupportEmail as string,",
						"          contactTitle as string,",
						"          contactFirstName as string,",
						"          contactSurname as string,",
						"          contactEmail as string,",
						"          contactPhone as string,",
						"          fbtExempt as boolean,",
						"          intermediary as string,",
						"          beamTermsConfirmUserId as string,",
						"          beamTermsConfirmUserName as string,",
						"          beamTermsConfirmDate as string,",
						"          streetAddress as string,",
						"          reference as string,",
						"          softwareProviderABN as string,",
						"          softwareProviderName as string,",
						"          softwareSubscriptionId as string,",
						"          notificationUserIds as string,",
						"          notifyLodgementSubmitters as boolean,",
						"          excludeReportableFbtBelowThreshold as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PayslipsDaily_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Payslips_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to SQLSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, firstName as string, surname as string, employmentStatus as string, payRunNumber as integer, paymentDate as string, payCalendar as string, payRunType as string, payRunStatus as string, isBackpay as boolean, date as string, payItemType as string, payItemCode as string, payItem as string, unitOfMeasure as string, units as double, rate as double, total as double, awardPolicyName as string, awardSource as string, payItemGlDebitCode as string, payItemGlCreditCode as string, role as string, roleCode as string, project as string, projectGlCode as string, projectCode as string, location as string, locationGlCode as string, locationCode as string, department as string, departmentGlCode as string, departmentCode as string, workOrder as string, workOrderGLCode as string, workOrderCode as string, superFundName as string, leaveType as string, leaveReason as string, periodStartDate as string, periodEndDate as string, notes as string, payItemCustomFields as (alternateGLCode as string))[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          organisationName = reportData.organisationName,",
						"          glCode = reportData.glCode,",
						"          employeeNumber = reportData.employeeNumber,",
						"          printName = reportData.printName,",
						"          employmentStatus = reportData.employmentStatus,",
						"          payRunNumber = reportData.payRunNumber,",
						"          paymentDate = reportData.paymentDate,",
						"          payCalendar = reportData.payCalendar,",
						"          payRunType = reportData.payRunType,",
						"          payRunStatus = reportData.payRunStatus,",
						"          date = reportData.date,",
						"          payItemType = reportData.payItemType,",
						"          payItemCode = reportData.payItemCode,",
						"          payItem = reportData.payItem,",
						"          unitOfMeasure = reportData.unitOfMeasure,",
						"          units = reportData.units,",
						"          rate = reportData.rate,",
						"          total = reportData.total,",
						"          role = reportData.role,",
						"          roleCode = reportData.roleCode,",
						"          project = reportData.project,",
						"          projectCode = reportData.projectCode,",
						"          location = reportData.location,",
						"          locationCode = reportData.locationCode,",
						"          department = reportData.department,",
						"          departmentCode = reportData.departmentCode,",
						"          workOrder = reportData.workOrder,",
						"          workOrderCode = reportData.workOrderCode,",
						"          leaveType = reportData.leaveType,",
						"          leaveReason = reportData.leaveReason,",
						"          periodStartDate = reportData.periodStartDate,",
						"          periodEndDate = reportData.periodEndDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     postSQLs:['DELETE FROM Definitiv_Payslips_Daily\\nWHERE periodEndDate IS NULL'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Payslips_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Payslips_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to SQLSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, firstName as string, surname as string, employmentStatus as string, payRunNumber as integer, paymentDate as string, payCalendar as string, payRunType as string, payRunStatus as string, isBackpay as boolean, date as string, payItemType as string, payItemCode as string, payItem as string, unitOfMeasure as string, units as double, rate as double, total as double, awardPolicyName as string, awardSource as string, payItemGlDebitCode as string, payItemGlCreditCode as string, role as string, roleCode as string, project as string, projectGlCode as string, projectCode as string, location as string, locationGlCode as string, locationCode as string, department as string, departmentGlCode as string, departmentCode as string, workOrder as string, workOrderGLCode as string, workOrderCode as string, superFundName as string, leaveType as string, leaveReason as string, periodStartDate as string, periodEndDate as string, notes as string, payItemCustomFields as (alternateGLCode as string))[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          organisationName = reportData.organisationName,",
						"          glCode = reportData.glCode,",
						"          employeeNumber = reportData.employeeNumber,",
						"          printName = reportData.printName,",
						"          employmentStatus = reportData.employmentStatus,",
						"          payRunNumber = reportData.payRunNumber,",
						"          paymentDate = reportData.paymentDate,",
						"          payCalendar = reportData.payCalendar,",
						"          payRunType = reportData.payRunType,",
						"          payRunStatus = reportData.payRunStatus,",
						"          payItemType = reportData.payItemType,",
						"          payItemCode = reportData.payItemCode,",
						"          payItem = reportData.payItem,",
						"          unitOfMeasure = reportData.unitOfMeasure,",
						"          units = reportData.units,",
						"          rate = reportData.rate,",
						"          total = reportData.total,",
						"          role = reportData.role,",
						"          roleCode = reportData.roleCode,",
						"          project = reportData.project,",
						"          projectCode = reportData.projectCode,",
						"          location = reportData.location,",
						"          locationCode = reportData.locationCode,",
						"          department = reportData.department,",
						"          departmentCode = reportData.departmentCode,",
						"          workOrder = reportData.workOrder,",
						"          workOrderCode = reportData.workOrderCode,",
						"          leaveType = reportData.leaveType,",
						"          leaveReason = reportData.leaveReason,",
						"          periodStartDate = reportData.periodStartDate,",
						"          periodEndDate = reportData.periodEndDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RostersCosts_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RostersCosts_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to SQLSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, organisationExportCode as string, organisationGLCode as string, rosterName as string, employeeNumber as string, employee as string, employmentStatus as string, date as string, payItemType as string, payItemCode as string, payItem as string, unitOfMeasure as string, units as double, rate as double, total as double, payItemGLDebitCode as string, payItemGLCreditCode as string, role as string, roleCode as string, project as string, projectCode as string, projectGlCode as string, location as string, locationCode as string, locationGlCode as string, department as string, departmentCode as string, departmentGlCode as string, projectWorkOrder as string, projectWorkOrderCode as string, leaveType as string, leaveReason as string, notes as string, payItemCustomFields as (customFieldId as string, targetEntity as integer, dataType as string, value as string, name as string, displayName as string, description as string, enabled as boolean, global as boolean, options as string[], isMandatory as boolean, order as integer, dateDriven as boolean, timeBased as boolean, displayOnTimesheetSummary as boolean, preventMultipleEntries as boolean, timePeriodMode as string, inheritTimesheetPeriod as string, customFieldDisplayStatus as string)[])[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.organisationGLCode,",
						"          {Roster Name} = reportData.rosterName,",
						"          {Emp No} = reportData.employeeNumber,",
						"          Employee = reportData.employee,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          Date = reportData.date,",
						"          PayItemType = reportData.payItemType,",
						"          PayItemCode = reportData.payItemCode,",
						"          PayItem = reportData.payItem,",
						"          UnitOfMeasure = reportData.unitOfMeasure,",
						"          Units = reportData.units,",
						"          Rate = reportData.rate,",
						"          Total = reportData.total,",
						"          Role = reportData.role,",
						"          {Role Code} = reportData.roleCode,",
						"          Project = reportData.project,",
						"          {Project Code} = reportData.projectCode,",
						"          Location = reportData.location,",
						"          {Location Code} = reportData.locationCode,",
						"          Department = reportData.department,",
						"          {Department Code} = reportData.departmentCode,",
						"          {Work Order} = reportData.projectWorkOrder,",
						"          {Work Order Code} = reportData.projectWorkOrderCode,",
						"          {Leave Type} = reportData.leaveType,",
						"          {Leave Reason} = reportData.leaveReason",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['DELETE FROM [dbo].[Definitiv_Rosters_Costs]\\nWHERE Date BETWEEN CAST(DATEADD(DAY, -7, SYSDATETIMEOFFSET() AT TIME ZONE \\'AUS Eastern Standard Time\\') AS DATE) \\n               AND CAST(DATEADD(DAY, 26, SYSDATETIMEOFFSET() AT TIME ZONE \\'AUS Eastern Standard Time\\') AS DATE)'],",
						"     postSQLs:['DELETE FROM [dbo].[Definitiv_Rosters_Costs]\\nWHERE Date IS NULL'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RostersCosts_ds')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RostersV3_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RostersV3_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput",
							"description": "Import data from RostersV3_ds"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to SQLSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, organisationExportCode as string, organisationGLCode as string, teamHierarchy as string, rosterName as string, rosterDescription as string, rosterPeriod as string, shiftPublishedState as string, sourceType as string, status as string, employee as string, date as string, dayIndex as string, role as string, timePeriodMode as string, startTimeOfDay as string, endTimeOfDay as string, durationHours as double, publicHolidayWorked as string, position as string, shiftType as string, project as string, projectWorkOrder as string, department as string, location as string, notes as string, breakTimes as string, breakDurationHours as double, responseDateTime as string, responseReason as string, deleted as string, customFields as (kmAllowance as string, staffMeeting as (StartTimeOfDay as string, EndTimeOfDay as string, DurationHours as string, Value as boolean)[]))[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          organisationName = reportData.organisationName,",
						"          organisationGLCode = reportData.organisationGLCode,",
						"          rosterName = reportData.rosterName,",
						"          rosterDescription = reportData.rosterDescription,",
						"          rosterPeriod = reportData.rosterPeriod,",
						"          shiftPublishedState = reportData.shiftPublishedState,",
						"          sourceType = reportData.sourceType,",
						"          status = reportData.status,",
						"          employee = reportData.employee,",
						"          date = reportData.date,",
						"          dayIndex = reportData.dayIndex,",
						"          role = reportData.role,",
						"          timePeriodMode = reportData.timePeriodMode,",
						"          startTimeOfDay = reportData.startTimeOfDay,",
						"          endTimeOfDay = reportData.endTimeOfDay,",
						"          durationHours = reportData.durationHours,",
						"          publicHolidayWorked = reportData.publicHolidayWorked,",
						"          project = reportData.project,",
						"          projectWorkOrder = reportData.projectWorkOrder,",
						"          department = reportData.department,",
						"          location = reportData.location,",
						"          breakTimes = reportData.breakTimes,",
						"          breakDurationHours = reportData.breakDurationHours,",
						"          deleted = reportData.deleted,",
						"          notes = reportData.notes",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     postSQLs:['DELETE FROM [dbo].[Definitiv_Rosters_V3]\\nWHERE [date] IS NULL OR sourceType = \\'Leave Application\\' OR deleted = \\'Yes\\' OR shiftPublishedState <> \\'Published\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RostersV3_ds')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Timesheets_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Timesheets_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput",
							"description": "Import data from Timesheets_ds"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to AzureSQLDatabaseTable"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, firstName as string, surname as string, employmentStatus as string, payCalendar as string, date as string, approvalStatus as string, type as string, leaveType as string, leaveReason as string, project as string, projectCode as string, role as string, roleCode as string, location as string, locationCode as string, department as string, departmentCode as string, shiftType as string, shiftTypeCode as string, workOrder as string, workOrderCode as string, durationHours as double, breakDurationHours as double, startTime as string, finishTime as string, submittedBy as string, submittedDateTime as string, approvers as string, approvedBy as string, approvalTime as string, notes as string, leaveTypeCode as string, leaveReasonCode as string, customFields as (kmAllowance as string, staffMeeting as string[], staffMeetingHours as double), publicHolidayWorked as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          Date = reportData.date,",
						"          {Approval Status} = reportData.approvalStatus,",
						"          Type = reportData.type,",
						"          {Leave Type} = reportData.leaveType,",
						"          {Leave Reason} = reportData.leaveReason,",
						"          Project = reportData.project,",
						"          {Project Code} = reportData.projectCode,",
						"          Role = reportData.role,",
						"          {Role Code} = reportData.roleCode,",
						"          Location = reportData.location,",
						"          {Location Code} = reportData.locationCode,",
						"          Department = reportData.department,",
						"          {Department Code} = reportData.departmentCode,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Work Order} = reportData.workOrder,",
						"          {Work Order Code} = reportData.workOrderCode,",
						"          Duration = reportData.durationHours,",
						"          {Break Duration} = reportData.breakDurationHours,",
						"          {Start Time} = reportData.startTime,",
						"          {Finish Time} = reportData.finishTime,",
						"          {Submitted By} = reportData.submittedBy,",
						"          {Submitted Time} = reportData.submittedDateTime,",
						"          Approvers = reportData.approvers,",
						"          {Approved By} = reportData.approvedBy,",
						"          {Approval Time} = reportData.approvalTime,",
						"          {Leave Type Code} = reportData.leaveTypeCode,",
						"          {Leave Reason Code} = reportData.leaveReasonCode,",
						"          {Public Holiday Worked} = reportData.publicHolidayWorked,",
						"          {Staff Meeting} = reportData.customFields.staffMeeting,",
						"          {Staff Meeting Hours} = reportData.customFields.staffMeetingHours",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['DELETE FROM [dbo].[Definitiv_Timesheets]\\nWHERE Date BETWEEN CAST(DATEADD(DAY, -28, SYSDATETIMEOFFSET() AT TIME ZONE \\'AUS Eastern Standard Time\\') AS DATE) \\n               AND CAST(DATEADD(DAY, -1, SYSDATETIMEOFFSET() AT TIME ZONE \\'AUS Eastern Standard Time\\') AS DATE)'],",
						"     postSQLs:['DELETE FROM [dbo].[Definitiv_Timesheets]\\nWHERE Date IS NULL'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Timesheets_ds')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Employees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Sentient Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployee",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeePaymentAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeePhoneNumbers",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeStreetAddresses",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeSuperAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeSuperContributions",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeTaxDeclaration",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns1"
						},
						{
							"name": "selectPaymentAccounts"
						},
						{
							"name": "flattenPaymentAccounts"
						},
						{
							"name": "selectEmployee"
						},
						{
							"name": "selectPhoneNumbers"
						},
						{
							"name": "flattenPhoneNumbers"
						},
						{
							"name": "selectStreetAddresses"
						},
						{
							"name": "flattenStreetAddresses"
						},
						{
							"name": "selectSuperAccounts"
						},
						{
							"name": "flattenSuperAccounts"
						},
						{
							"name": "selectSuperContributions"
						},
						{
							"name": "flattenSuperContributions"
						},
						{
							"name": "selectTaxDeclarationObject"
						},
						{
							"name": "selectTaxDeclarationItems"
						},
						{
							"name": "castDateColumns7"
						},
						{
							"name": "castDateColumns6"
						},
						{
							"name": "castDateColumns5"
						},
						{
							"name": "castDateColumns4"
						},
						{
							"name": "castDateColumns3"
						},
						{
							"name": "castDateColumns2"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Employees\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tdateOfBirth as date,\n\t\temailAddress as string,\n\t\temployeeId as string,\n\t\temployeeNumber as integer,\n\t\tfirstName as string,\n\t\tgender as string,\n\t\thiredDate as date,\n\t\tlastModified as string,\n\t\tmiddleName as string,\n\t\torganization as (name as string, organizationId as string),\n\t\torganizationId as string,\n\t\tpaymentAccounts as (bankAccount as (accountName as string, accountNumber as integer, bsb as string, reference as string), employeePaymentAccountId as string, paySplit as (amount as double, type as string), sortOrder as boolean)[],\n\t\tphoneNumbers as (type as string, value as string)[],\n\t\tpreferredName as string,\n\t\tstreetAddresses as (components as string, coordinate as string, countryCode as string, fullAddress as string, postCode as short, state as string, street as string, suburb as string, type as string)[],\n\t\tsuperAccounts as (ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, fundABN as long, fundESA as string, fundName as string, fundType as string, fundUSI as string, membershipNumber as string, smsfBankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string))[],\n\t\tsuperContributions as (amount as double, ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, employeeSuperannuationContributionId as string, minimumAmount as string, payItemDescription as string, payItemId as string, valueType as string)[],\n\t\tsurname as string,\n\t\ttaxDeclaration as (australianResidentForTaxPurposes as boolean, canEdit as boolean, claimDependantsOrSpecialTaxOffset as boolean, claimMedicareLevyVariation as boolean, claimSeniorsPensionersOffset as boolean, claimTaxFreeThreshold as boolean, effectiveDate as string, employeeId as string, employeeTaxDeclarationId as string, financialSupplementDebt as boolean, helpDebt as boolean, lodgementDate as string, lodgementStatus as string, signatureDate as string, signaturePresent as string, taxFileNumber as integer, taxFileNumberExemption as string, workingHolidayMaker as boolean),\n\t\ttitle as string,\n\t\tusername as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nselectEmployee derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%')||like(name,'%lastModified%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns1\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tpaymentAccounts,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectPaymentAccounts\nselectPaymentAccounts foldDown(unroll(paymentAccounts),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\temployeePaymentAccountId = paymentAccounts.employeePaymentAccountId,\n\t\tsortOrder = paymentAccounts.sortOrder,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName,\n\t\tevery(paymentAccounts.bankAccount,match(true()),\n\t\t\t$0 = $$),\n\t\tevery(paymentAccounts.paySplit,match(true()),\n\t\t\t$0 = $$)\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPaymentAccounts\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tdateOfBirth,\n\t\temailAddress,\n\t\temployeeNumber,\n\t\tfirstName,\n\t\tgender,\n\t\thiredDate,\n\t\tlastModified,\n\t\tmiddleName,\n\t\tpreferredName,\n\t\tsurname,\n\t\ttitle,\n\t\tusername,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectEmployee\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tphoneNumbers,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectPhoneNumbers\nselectPhoneNumbers foldDown(unroll(phoneNumbers),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttype = phoneNumbers.type,\n\t\tvalue = phoneNumbers.value,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPhoneNumbers\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tstreetAddresses,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectStreetAddresses\nselectStreetAddresses foldDown(unroll(streetAddresses),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tcomponents = streetAddresses.components,\n\t\tcoordinate = streetAddresses.coordinate,\n\t\tcountryCode = streetAddresses.countryCode,\n\t\tfullAddress = streetAddresses.fullAddress,\n\t\tpostCode = streetAddresses.postCode,\n\t\tstate = streetAddresses.state,\n\t\tstreet = streetAddresses.street,\n\t\tsuburb = streetAddresses.suburb,\n\t\ttype = streetAddresses.type,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenStreetAddresses\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tsuperAccounts,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectSuperAccounts\nselectSuperAccounts foldDown(unroll(superAccounts),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tceaseDate = superAccounts.ceaseDate,\n\t\tcommencementDate = superAccounts.commencementDate,\n\t\t{superAccounts.employeeId} = superAccounts.employeeId,\n\t\temployeeSuperannuationAccountId = superAccounts.employeeSuperannuationAccountId,\n\t\tfundABN = superAccounts.fundABN,\n\t\tfundESA = superAccounts.fundESA,\n\t\tfundName = superAccounts.fundName,\n\t\tfundType = superAccounts.fundType,\n\t\tfundUSI = superAccounts.fundUSI,\n\t\tmembershipNumber = superAccounts.membershipNumber,\n\t\t{smsfBankAccount.accountName} = superAccounts.smsfBankAccount.accountName,\n\t\t{smsfBankAccount.accountNumber} = superAccounts.smsfBankAccount.accountNumber,\n\t\t{smsfBankAccount.bsb} = superAccounts.smsfBankAccount.bsb,\n\t\t{smsfBankAccount.reference} = superAccounts.smsfBankAccount.reference,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenSuperAccounts\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tsuperContributions,\n\t\tPipelineName,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectSuperContributions\nselectSuperContributions foldDown(unroll(superContributions),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tamount = superContributions.amount,\n\t\tceaseDate = superContributions.ceaseDate,\n\t\tcommencementDate = superContributions.commencementDate,\n\t\t{superContributions.employeeId} = superContributions.employeeId,\n\t\temployeeSuperannuationAccountId = superContributions.employeeSuperannuationAccountId,\n\t\temployeeSuperannuationContributionId = superContributions.employeeSuperannuationContributionId,\n\t\tminimumAmount = superContributions.minimumAmount,\n\t\tpayItemDescription = superContributions.payItemDescription,\n\t\tpayItemId = superContributions.payItemId,\n\t\tvalueType = superContributions.valueType,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenSuperContributions\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttaxDeclaration,\n\t\tPipelineName,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectTaxDeclarationObject\nselectTaxDeclarationObject select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttaxDeclaration = taxDeclaration.australianResidentForTaxPurposes,\n\t\tcanEdit = taxDeclaration.canEdit,\n\t\tclaimDependantsOrSpecialTaxOffset = taxDeclaration.claimDependantsOrSpecialTaxOffset,\n\t\tclaimMedicareLevyVariation = taxDeclaration.claimMedicareLevyVariation,\n\t\tclaimSeniorsPensionersOffset = taxDeclaration.claimSeniorsPensionersOffset,\n\t\tclaimTaxFreeThreshold = taxDeclaration.claimTaxFreeThreshold,\n\t\teffectiveDate = taxDeclaration.effectiveDate,\n\t\t{taxDeclaration.employeeId} = taxDeclaration.employeeId,\n\t\temployeeTaxDeclarationId = taxDeclaration.employeeTaxDeclarationId,\n\t\tfinancialSupplementDebt = taxDeclaration.financialSupplementDebt,\n\t\thelpDebt = taxDeclaration.helpDebt,\n\t\tlodgementDate = taxDeclaration.lodgementDate,\n\t\tlodgementStatus = taxDeclaration.lodgementStatus,\n\t\tsignatureDate = taxDeclaration.signatureDate,\n\t\tsignaturePresent = taxDeclaration.signaturePresent,\n\t\ttaxFileNumber = taxDeclaration.taxFileNumber,\n\t\ttaxFileNumberExemption = taxDeclaration.taxFileNumberExemption,\n\t\tworkingHolidayMaker = taxDeclaration.workingHolidayMaker,\n\t\tPipelineName,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectTaxDeclarationItems\nselectTaxDeclarationItems derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns7\nflattenSuperContributions derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns6\nflattenSuperAccounts derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns5\nflattenStreetAddresses derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns4\nflattenPhoneNumbers derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns3\nflattenPaymentAccounts derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns2\ncastDateColumns1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployee\ncastDateColumns2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 7,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeePaymentAccounts\ncastDateColumns3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 6,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeePhoneNumbers\ncastDateColumns4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 5,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeStreetAddresses\ncastDateColumns5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeSuperAccounts\ncastDateColumns6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeSuperContributions\ncastDateColumns7 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeTaxDeclaration"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		}
	]
}