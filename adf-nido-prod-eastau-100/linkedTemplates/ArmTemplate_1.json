{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-nido-prod-eastau-100"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DefinitivTimesheets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Timesheets_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput",
							"description": "Import data from Timesheets_ds"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLSink",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB",
							"description": "Export data to AzureSQLDatabaseTable"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, firstName as string, surname as string, employmentStatus as string, payCalendar as string, date as string, approvalStatus as string, type as string, leaveType as string, leaveReason as string, project as string, projectCode as string, role as string, roleCode as string, location as string, locationCode as string, department as string, departmentCode as string, shiftType as string, shiftTypeCode as string, workOrder as string, workOrderCode as string, durationHours as double, breakDurationHours as double, startTime as string, finishTime as string, submittedBy as string, submittedDateTime as string, approvers as string, approvedBy as string, approvalTime as string, notes as string, leaveTypeCode as string, leaveReasonCode as string, customFields as (kmAllowance as string, staffMeeting as string[]), publicHolidayWorked as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          Date = reportData.date,",
						"          {Approval Status} = reportData.approvalStatus,",
						"          Type = reportData.type,",
						"          {Leave Type} = reportData.leaveType,",
						"          {Leave Reason} = reportData.leaveReason,",
						"          Project = reportData.project,",
						"          {Project Code} = reportData.projectCode,",
						"          Role = reportData.role,",
						"          {Role Code} = reportData.roleCode,",
						"          Location = reportData.location,",
						"          {Location Code} = reportData.locationCode,",
						"          Department = reportData.department,",
						"          {Department Code} = reportData.departmentCode,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Work Order} = reportData.workOrder,",
						"          {Work Order Code} = reportData.workOrderCode,",
						"          Duration = reportData.durationHours,",
						"          {Break Duration} = reportData.breakDurationHours,",
						"          {Start Time} = reportData.startTime,",
						"          {Finish Time} = reportData.finishTime,",
						"          {Submitted By} = reportData.submittedBy,",
						"          {Submitted Time} = reportData.submittedDateTime,",
						"          Approvers = reportData.approvers,",
						"          {Approved By} = reportData.approvedBy,",
						"          {Approval Time} = reportData.approvalTime,",
						"          {Leave Type Code} = reportData.leaveTypeCode,",
						"          {Leave Reason Code} = reportData.leaveReasonCode,",
						"          {Public Holiday Worked} = reportData.publicHolidayWorked",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeMaster')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeMaster_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLSink",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (organisationName as string, glCode as string, exportCode as string, employeeNumber as string, printName as string, title as string, firstName as string, surname as string, middleName as string, preferredName as string, gender as string, dateOfBirth as string, phoneNumbers as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], addresses as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], emailAddresses as (headerName as string, value as string, dataType as string, defaultPivotAggregation as string, defaultPivotValueOrder as string, defaultDynamicHidden as string, columnTooltip as string)[], hireDate as string, yearsOfServiceStartDate as string, hireReason as string, terminateDate as string, terminationReason as string, lastPaidDate as string, positionOrgChart as string, divisionOrgChart as string, employmentStatus as string, managerIds as string, payCalendar as string, primaryProjectName as string, primaryProjectCode as string, canOnlyWorkAssignedProjects as string, primaryRoleName as string, primaryRoleCode as string, primaryLocationName as string, primaryLocationCode as string, primaryDepartmentName as string, primaryDepartmentCode as string, workSchedule as string, shiftType as string, shiftTypeCode as string, usualPlaceOfResidence as string, employeeId as string, primaryProjectId as string, primaryRoleId as string, primaryLocationId as string, primaryDepartmentId as string, username as string, customFields as (asOfDate as string, contractedHours as double, jobAdderCandidateId as string, aboriginalTorresStIslanderStatus as boolean, bonus2 as string, notes as string, legalRightToWorkInAustralia as boolean, probationEndDate as string, ineligibleForPerformanceReview as boolean))[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          Organisation = reportData.organisationName,",
						"          {Organisation GL Code} = reportData.glCode,",
						"          {Organisation Export Code} = reportData.exportCode,",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          Gender = reportData.gender,",
						"          {Date of Birth} = reportData.dateOfBirth,",
						"          {Hire Date} = reportData.hireDate,",
						"          {Years of Service Start Date} = reportData.yearsOfServiceStartDate,",
						"          {Hire Reason} = reportData.hireReason,",
						"          {Termination Date} = reportData.terminateDate,",
						"          {Termination Reason} = reportData.terminationReason,",
						"          {Last Paid Date} = reportData.lastPaidDate,",
						"          {Position - Org Chart} = reportData.positionOrgChart,",
						"          {Division - Org Chart} = reportData.divisionOrgChart,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Line Manager(s) Emp No} = reportData.managerIds,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          {Primary Project} = reportData.primaryProjectName,",
						"          {Primary Project Code} = reportData.primaryProjectCode,",
						"          {Can Only Work Assigned Projects} = reportData.canOnlyWorkAssignedProjects,",
						"          {Primary Role} = reportData.primaryRoleName,",
						"          {Primary Role Code} = reportData.primaryRoleCode,",
						"          {Primary Location} = reportData.primaryLocationName,",
						"          {Primary Location Code} = reportData.primaryLocationCode,",
						"          {Primary Department} = reportData.primaryDepartmentName,",
						"          {Primary Department Code} = reportData.primaryDepartmentCode,",
						"          {Work Schedule} = reportData.workSchedule,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Usual Place of Residence} = reportData.usualPlaceOfResidence,",
						"          {Employee ID} = reportData.employeeId,",
						"          {User Account Created} = reportData.username,",
						"          {Aboriginal Torres St Islander Status} = reportData.customFields.aboriginalTorresStIslanderStatus,",
						"          Bonus = reportData.customFields.bonus2,",
						"          {Contracted Hours} = reportData.customFields.contractedHours,",
						"          {Ineligible for Performance Review} = reportData.customFields.ineligibleForPerformanceReview,",
						"          {Job Adder Candidate Id} = reportData.customFields.jobAdderCandidateId,",
						"          {Legal Right to Work in Australia} = reportData.customFields.legalRightToWorkInAustralia,",
						"          Notes = reportData.customFields.notes,",
						"          {Probation End Date} = reportData.customFields.probationEndDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeePayPolicies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "00_Definitv"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeePayPolicies_ds",
								"type": "DatasetReference"
							},
							"name": "jsoninput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLSink",
								"type": "DatasetReference"
							},
							"name": "WriteToSQLDB"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          headers as (title as string, filterDisabled as boolean, sortDisabled as boolean, hiddenByDefault as boolean, searchDisabled as boolean, dataType as string, fieldName as string, defaultPivotColumnOrder as integer, defaultPivotRowOrder as integer, defaultPivotValueOrder as integer, defaultSortOrder as integer, defaultSortDirection as string, defaultPivotAggregation as string, isDynamicColumns as boolean, isCustomFields as boolean, customFieldsKeyName as string, createDayOfWeekColumn as boolean, prependBaseColumnNameToDayOfWeekColumn as boolean, trueText as string, falseText as string, nullDisplayText as string, disableDefaultAggregation as boolean, numericPrecision as string)[],",
						"          reportData as (employeeNumber as string, printName as string, title as string, firstName as string, surname as string, middleName as string, preferredName as string, gender as string, dateOfBirth as string, hireDate as string, hireReason as string, terminationDate as string, terminationReason as string, employmentStatus as string, payCalendar as string, policyCode as string, policyType as string, policyName as string, commencementDate as string, ceaseDate as string, payRateType as string, salary as string, salaryFte as string, totalPackage as string, totalPackageFte as string, weeklyHours as string, fullTimeEquivalentWeeklyHours as string, fullTimeEquivalentRatio as string, dailyRate as string, dailyHours as string, hourlyRate as double, allPurposeRate as double, payRates as string[], primaryProject as string, primaryProjectCode as string, canOnlyWorkAssignedProjects as string, primaryRole as string, primaryRoleCode as string, primaryLocation as string, primaryLocationCode as string, primaryDepartment as string, primaryDepartmentCode as string, workSchedule as string, workScheduleDescription as string, shiftType as string, shiftTypeCode as string, usualPlaceOfResidence as string, employeeId as string, primaryProjectId as string, primaryRoleId as string, primaryLocationId as string, primaryDepartmentId as string)[],",
						"          extraReportData as string[],",
						"          serverTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          reportVariantTag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> jsoninput",
						"jsoninput foldDown(unroll(reportData),",
						"     mapColumn(",
						"          {Emp No} = reportData.employeeNumber,",
						"          {Print Name} = reportData.printName,",
						"          Gender = reportData.gender,",
						"          {Date of Birth} = reportData.dateOfBirth,",
						"          {Hire Date} = reportData.hireDate,",
						"          {Hire Reason} = reportData.hireReason,",
						"          {Termination Date} = reportData.terminationDate,",
						"          {Termination Reason} = reportData.terminationReason,",
						"          {Employment Status} = reportData.employmentStatus,",
						"          {Pay Calendar} = reportData.payCalendar,",
						"          {Policy Type} = reportData.policyType,",
						"          {Policy Name} = reportData.policyName,",
						"          {Commencement Date} = reportData.commencementDate,",
						"          {Cease Date} = reportData.ceaseDate,",
						"          {Pay Rate Type} = reportData.payRateType,",
						"          Salary = reportData.salary,",
						"          {Salary FTE} = reportData.salaryFte,",
						"          {Total Package} = reportData.totalPackage,",
						"          {Total Package FTE} = reportData.totalPackageFte,",
						"          {Weekly Hours} = reportData.weeklyHours,",
						"          {FTE Weekly Hours} = reportData.fullTimeEquivalentWeeklyHours,",
						"          {FTE Ratio} = reportData.fullTimeEquivalentRatio,",
						"          {Daily Rate} = reportData.dailyRate,",
						"          {Daily Hours} = reportData.dailyHours,",
						"          {Hourly Rate} = reportData.hourlyRate,",
						"          {All Purpose Rate} = reportData.allPurposeRate,",
						"          {Primary Project} = reportData.primaryProject,",
						"          {Primary Project Code} = reportData.primaryProjectCode,",
						"          {Can Only Work Assigned Projects} = reportData.canOnlyWorkAssignedProjects,",
						"          {Primary Role} = reportData.primaryRole,",
						"          {Primary Role Code} = reportData.primaryRoleCode,",
						"          {Primary Location} = reportData.primaryLocation,",
						"          {Primary Location Code} = reportData.primaryLocationCode,",
						"          {Primary Department} = reportData.primaryDepartment,",
						"          {Primary Department Code} = reportData.primaryDepartmentCode,",
						"          {Work Schedule} = reportData.workSchedule,",
						"          {Work Schedule Description} = reportData.workScheduleDescription,",
						"          {Shift Type} = reportData.shiftType,",
						"          {Shift Type Code} = reportData.shiftTypeCode,",
						"          {Usual Place of Residence} = reportData.usualPlaceOfResidence,",
						"          {Employee ID} = reportData.employeeId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> WriteToSQLDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Employees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployee",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeePaymentAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeePhoneNumbers",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeStreetAddresses",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeSuperAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeSuperContributions",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeTaxDeclaration",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns1"
						},
						{
							"name": "selectPaymentAccounts"
						},
						{
							"name": "flattenPaymentAccounts"
						},
						{
							"name": "selectEmployee"
						},
						{
							"name": "selectPhoneNumbers"
						},
						{
							"name": "flattenPhoneNumbers"
						},
						{
							"name": "selectStreetAddresses"
						},
						{
							"name": "flattenStreetAddresses"
						},
						{
							"name": "selectSuperAccounts"
						},
						{
							"name": "flattenSuperAccounts"
						},
						{
							"name": "selectSuperContributions"
						},
						{
							"name": "flattenSuperContributions"
						},
						{
							"name": "selectTaxDeclarationObject"
						},
						{
							"name": "selectTaxDeclarationItems"
						},
						{
							"name": "castDateColumns7"
						},
						{
							"name": "castDateColumns6"
						},
						{
							"name": "castDateColumns5"
						},
						{
							"name": "castDateColumns4"
						},
						{
							"name": "castDateColumns3"
						},
						{
							"name": "castDateColumns2"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Employees\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tdateOfBirth as date,\n\t\temailAddress as string,\n\t\temployeeId as string,\n\t\temployeeNumber as integer,\n\t\tfirstName as string,\n\t\tgender as string,\n\t\thiredDate as date,\n\t\tlastModified as string,\n\t\tmiddleName as string,\n\t\torganization as (name as string, organizationId as string),\n\t\torganizationId as string,\n\t\tpaymentAccounts as (bankAccount as (accountName as string, accountNumber as integer, bsb as string, reference as string), employeePaymentAccountId as string, paySplit as (amount as double, type as string), sortOrder as boolean)[],\n\t\tphoneNumbers as (type as string, value as string)[],\n\t\tpreferredName as string,\n\t\tstreetAddresses as (components as string, coordinate as string, countryCode as string, fullAddress as string, postCode as short, state as string, street as string, suburb as string, type as string)[],\n\t\tsuperAccounts as (ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, fundABN as long, fundESA as string, fundName as string, fundType as string, fundUSI as string, membershipNumber as string, smsfBankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string))[],\n\t\tsuperContributions as (amount as double, ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, employeeSuperannuationContributionId as string, minimumAmount as string, payItemDescription as string, payItemId as string, valueType as string)[],\n\t\tsurname as string,\n\t\ttaxDeclaration as (australianResidentForTaxPurposes as boolean, canEdit as boolean, claimDependantsOrSpecialTaxOffset as boolean, claimMedicareLevyVariation as boolean, claimSeniorsPensionersOffset as boolean, claimTaxFreeThreshold as boolean, effectiveDate as string, employeeId as string, employeeTaxDeclarationId as string, financialSupplementDebt as boolean, helpDebt as boolean, lodgementDate as string, lodgementStatus as string, signatureDate as string, signaturePresent as string, taxFileNumber as integer, taxFileNumberExemption as string, workingHolidayMaker as boolean),\n\t\ttitle as string,\n\t\tusername as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nselectEmployee derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%')||like(name,'%lastModified%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns1\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tpaymentAccounts,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectPaymentAccounts\nselectPaymentAccounts foldDown(unroll(paymentAccounts),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\temployeePaymentAccountId = paymentAccounts.employeePaymentAccountId,\n\t\tsortOrder = paymentAccounts.sortOrder,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName,\n\t\tevery(paymentAccounts.bankAccount,match(true()),\n\t\t\t$0 = $$),\n\t\tevery(paymentAccounts.paySplit,match(true()),\n\t\t\t$0 = $$)\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPaymentAccounts\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tdateOfBirth,\n\t\temailAddress,\n\t\temployeeNumber,\n\t\tfirstName,\n\t\tgender,\n\t\thiredDate,\n\t\tlastModified,\n\t\tmiddleName,\n\t\tpreferredName,\n\t\tsurname,\n\t\ttitle,\n\t\tusername,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectEmployee\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tphoneNumbers,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectPhoneNumbers\nselectPhoneNumbers foldDown(unroll(phoneNumbers),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttype = phoneNumbers.type,\n\t\tvalue = phoneNumbers.value,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPhoneNumbers\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tstreetAddresses,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectStreetAddresses\nselectStreetAddresses foldDown(unroll(streetAddresses),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tcomponents = streetAddresses.components,\n\t\tcoordinate = streetAddresses.coordinate,\n\t\tcountryCode = streetAddresses.countryCode,\n\t\tfullAddress = streetAddresses.fullAddress,\n\t\tpostCode = streetAddresses.postCode,\n\t\tstate = streetAddresses.state,\n\t\tstreet = streetAddresses.street,\n\t\tsuburb = streetAddresses.suburb,\n\t\ttype = streetAddresses.type,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenStreetAddresses\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tsuperAccounts,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectSuperAccounts\nselectSuperAccounts foldDown(unroll(superAccounts),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tceaseDate = superAccounts.ceaseDate,\n\t\tcommencementDate = superAccounts.commencementDate,\n\t\t{superAccounts.employeeId} = superAccounts.employeeId,\n\t\temployeeSuperannuationAccountId = superAccounts.employeeSuperannuationAccountId,\n\t\tfundABN = superAccounts.fundABN,\n\t\tfundESA = superAccounts.fundESA,\n\t\tfundName = superAccounts.fundName,\n\t\tfundType = superAccounts.fundType,\n\t\tfundUSI = superAccounts.fundUSI,\n\t\tmembershipNumber = superAccounts.membershipNumber,\n\t\t{smsfBankAccount.accountName} = superAccounts.smsfBankAccount.accountName,\n\t\t{smsfBankAccount.accountNumber} = superAccounts.smsfBankAccount.accountNumber,\n\t\t{smsfBankAccount.bsb} = superAccounts.smsfBankAccount.bsb,\n\t\t{smsfBankAccount.reference} = superAccounts.smsfBankAccount.reference,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenSuperAccounts\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tsuperContributions,\n\t\tPipelineName,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectSuperContributions\nselectSuperContributions foldDown(unroll(superContributions),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tamount = superContributions.amount,\n\t\tceaseDate = superContributions.ceaseDate,\n\t\tcommencementDate = superContributions.commencementDate,\n\t\t{superContributions.employeeId} = superContributions.employeeId,\n\t\temployeeSuperannuationAccountId = superContributions.employeeSuperannuationAccountId,\n\t\temployeeSuperannuationContributionId = superContributions.employeeSuperannuationContributionId,\n\t\tminimumAmount = superContributions.minimumAmount,\n\t\tpayItemDescription = superContributions.payItemDescription,\n\t\tpayItemId = superContributions.payItemId,\n\t\tvalueType = superContributions.valueType,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenSuperContributions\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttaxDeclaration,\n\t\tPipelineName,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectTaxDeclarationObject\nselectTaxDeclarationObject select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttaxDeclaration = taxDeclaration.australianResidentForTaxPurposes,\n\t\tcanEdit = taxDeclaration.canEdit,\n\t\tclaimDependantsOrSpecialTaxOffset = taxDeclaration.claimDependantsOrSpecialTaxOffset,\n\t\tclaimMedicareLevyVariation = taxDeclaration.claimMedicareLevyVariation,\n\t\tclaimSeniorsPensionersOffset = taxDeclaration.claimSeniorsPensionersOffset,\n\t\tclaimTaxFreeThreshold = taxDeclaration.claimTaxFreeThreshold,\n\t\teffectiveDate = taxDeclaration.effectiveDate,\n\t\t{taxDeclaration.employeeId} = taxDeclaration.employeeId,\n\t\temployeeTaxDeclarationId = taxDeclaration.employeeTaxDeclarationId,\n\t\tfinancialSupplementDebt = taxDeclaration.financialSupplementDebt,\n\t\thelpDebt = taxDeclaration.helpDebt,\n\t\tlodgementDate = taxDeclaration.lodgementDate,\n\t\tlodgementStatus = taxDeclaration.lodgementStatus,\n\t\tsignatureDate = taxDeclaration.signatureDate,\n\t\tsignaturePresent = taxDeclaration.signaturePresent,\n\t\ttaxFileNumber = taxDeclaration.taxFileNumber,\n\t\ttaxFileNumberExemption = taxDeclaration.taxFileNumberExemption,\n\t\tworkingHolidayMaker = taxDeclaration.workingHolidayMaker,\n\t\tPipelineName,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectTaxDeclarationItems\nselectTaxDeclarationItems derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns7\nflattenSuperContributions derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns6\nflattenSuperAccounts derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns5\nflattenStreetAddresses derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns4\nflattenPhoneNumbers derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns3\nflattenPaymentAccounts derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns2\ncastDateColumns1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployee\ncastDateColumns2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 7,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeePaymentAccounts\ncastDateColumns3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 6,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeePhoneNumbers\ncastDateColumns4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 5,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeStreetAddresses\ncastDateColumns5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeSuperAccounts\ncastDateColumns6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeSuperContributions\ncastDateColumns7 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeTaxDeclaration"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_EmploymentHistory\")\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),",
						"     param_ErrorRowDirectory as string (\"ErrorRows\"),",
						"     param_DataflowName as string (\"df_LeaveApplications\")",
						"}",
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          PipelineName as string,",
						"          PipelineRunId as string,",
						"          PipelineTriggerTime as string,",
						"          approvers as string,",
						"          dateSubmitted as date,",
						"          employeeId as string,",
						"          employeeNumber as integer,",
						"          firstName as string,",
						"          gender as string,",
						"          leaveApplicationId as string,",
						"          leaveDateEnd as date,",
						"          leaveDateStart as date,",
						"          leaveNotes as string,",
						"          leavePaymentStatus as string,",
						"          leaveReasonName as string,",
						"          leaveTypeId as string,",
						"          leaveTypeName as string,",
						"          leaveUnitOfMeasure as string,",
						"          leaveUnits as double,",
						"          numberOfDays as short,",
						"          organizationId as string,",
						"          printName as string,",
						"          status as string,",
						"          surname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName',",
						"     documentForm: 'documentPerLine') ~> sourceJson",
						"sourceJson derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns",
						"castDateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: ($param_FileSystem),",
						"     rejectedData_folderPath: ($param_ErrorRowDirectory),",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true) ~> sinkSql"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OrgPayRuns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "07_PayRuns"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenPayRuns"
						},
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_OrgPayRuns\")\n}\nsource(output(\n\t\t{Org.LegalName} as string,\n\t\t{Org.OrganizationId} as string,\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerId as string,\n\t\tPipelineTriggerTime as string,\n\t\tcurrentFinancialYearEndDate as string,\n\t\tcurrentFinancialYearStartDate as string,\n\t\tpayCalendars as (atoLodgementsEnabled as boolean, description as string, payCalendarId as string, period as string, periodStartDate as string, proRataMode as string, weeklyFactor as double, weeklyFactorEquation as short)[],\n\t\tpayRuns as (backPayDateOverride as string, dateLastCalculated as string, dateOpened as string, datePublished as string, employeeCount as short, eofyLodgementStatus as string, financialYearEndDate as string, financialYearStartDate as string, initiatingUserId as string, initiatingUserName as string, lodgementStatus as string, notes as string, payCalendarId as string, payCalendarName as string, payRunId as string, paymentDate as string, payslipGenerationStatus as string, periodEnd as string, periodStart as string, publishingUserId as string, publishingUserName as string, runNumber as short, status as string, superannuationPaymentDate as string, type as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson foldDown(unroll(payRuns),\n\tmapColumn(\n\t\tbackPayDateOverride = payRuns.backPayDateOverride,\n\t\tdateLastCalculated = payRuns.dateLastCalculated,\n\t\tdateOpened = payRuns.dateOpened,\n\t\tdatePublished = payRuns.datePublished,\n\t\temployeeCount = payRuns.employeeCount,\n\t\teofyLodgementStatus = payRuns.eofyLodgementStatus,\n\t\tfinancialYearEndDate = payRuns.financialYearEndDate,\n\t\tfinancialYearStartDate = payRuns.financialYearStartDate,\n\t\tinitiatingUserId = payRuns.initiatingUserId,\n\t\tinitiatingUserName = payRuns.initiatingUserName,\n\t\tlodgementStatus = payRuns.lodgementStatus,\n\t\tnotes = payRuns.notes,\n\t\tpayCalendarId = payRuns.payCalendarId,\n\t\tpayCalendarName = payRuns.payCalendarName,\n\t\tpayRunId = payRuns.payRunId,\n\t\tpaymentDate = payRuns.paymentDate,\n\t\tpayslipGenerationStatus = payRuns.payslipGenerationStatus,\n\t\tperiodEnd = payRuns.periodEnd,\n\t\tperiodStart = payRuns.periodStart,\n\t\tpublishingUserId = payRuns.publishingUserId,\n\t\tpublishingUserName = payRuns.publishingUserName,\n\t\trunNumber = payRuns.runNumber,\n\t\tstatus = payRuns.status,\n\t\tsuperannuationPaymentDate = payRuns.superannuationPaymentDate,\n\t\ttype = payRuns.type,\n\t\t{Org.LegalName},\n\t\t{Org.OrganizationId},\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tcurrentFinancialYearEndDate,\n\t\tcurrentFinancialYearStartDate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPayRuns\nflattenPayRuns derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Organizations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "08_Organizations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Organizations\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tabn as string,\n\t\tacn as string,\n\t\tbeamTermsConfirmDate as string,\n\t\tbeamTermsConfirmUserId as string,\n\t\tbeamTermsConfirmUserName as string,\n\t\tbranchCode as string,\n\t\tcontactEmail as string,\n\t\tcontactFirstName as string,\n\t\tcontactPhone as string,\n\t\tcontactSurname as string,\n\t\tcontactTitle as string,\n\t\temployeeSupportEmail as string,\n\t\tfbtExempt as boolean,\n\t\tintermediary as string,\n\t\tlegalName as string,\n\t\tnotificationUserIds as string,\n\t\tnotifyLodgementSubmitters as boolean,\n\t\torganizationCode as string,\n\t\torganizationId as string,\n\t\treference as string,\n\t\tsoftwareProviderABN as string,\n\t\tsoftwareProviderName as string,\n\t\tsoftwareSubscriptionId as string,\n\t\tstreetAddress as string,\n\t\ttradingName as string,\n\t\twpn as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitiv\nSourceBlobDefinitiv sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adsl2_stnidoprodeastau100_csv/definitiv.Organizations',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> SinkSqlDefinitiv"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Payslips')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Payslips\")\n}\nsource(output(\n\t\t{Org.LegalName} as string,\n\t\t{Org.OrganizationId} as string,\n\t\t{PayRun.PayRunId} as string,\n\t\t{PayRun.PayslipGenerationStatus} as string,\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tbaseRate as double,\n\t\tdepartmentCode as string,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tnumberOfUnits as double,\n\t\tpayDate as date,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as date,\n\t\tperiodStartDate as date,\n\t\tpositionTitle as string,\n\t\tprojectCode as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(PipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW')) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenReportData"
						},
						{
							"name": "castDateColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),",
						"     param_ErrorRowDirectory as string (\"ErrorRows\"),",
						"     param_DataflowName as string (\"df_ReportingLeaveApplications\")",
						"}",
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          PipelineName as string,",
						"          PipelineRunId as string,",
						"          PipelineTriggerTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          extraReportData as string[],",
						"          headers as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],",
						"          reportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],",
						"          reportVariantTag as string,",
						"          serverTime as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName',",
						"     documentForm: 'documentPerLine') ~> sourceJson",
						"sourceJson foldDown(unroll(reportData),",
						"     mapColumn(",
						"          approvers = reportData.approvers,",
						"          dateSubmitted = reportData.dateSubmitted,",
						"          employeeId = reportData.employeeId,",
						"          employeeNumber = reportData.employeeNumber,",
						"          firstName = reportData.firstName,",
						"          gender = reportData.gender,",
						"          leaveAppNumDays = reportData.leaveAppNumDays,",
						"          leaveApplicationId = reportData.leaveApplicationId,",
						"          leaveDateEnd = reportData.leaveDateEnd,",
						"          leaveDateStart = reportData.leaveDateStart,",
						"          leaveNotes = reportData.leaveNotes,",
						"          leavePaymentStatus = reportData.leavePaymentStatus,",
						"          leaveReasonName = reportData.leaveReasonName,",
						"          leaveTypeId = reportData.leaveTypeId,",
						"          leaveTypeName = reportData.leaveTypeName,",
						"          leaveUnitOfMeasure = reportData.leaveUnitOfMeasure,",
						"          leaveUnits = reportData.leaveUnits,",
						"          printName = reportData.printName,",
						"          status = reportData.status,",
						"          surname = reportData.surname,",
						"          {Org.OrganizationId},",
						"          PipelineName,",
						"          PipelineRunId,",
						"          PipelineTriggerTime,",
						"          SourceFileName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenReportData",
						"flattenReportData derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns",
						"castDateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: ($param_FileSystem),",
						"     rejectedData_folderPath: ($param_ErrorRowDirectory),",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true) ~> sinkSql"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ReportingLeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenReportData"
						},
						{
							"name": "castDateColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),",
						"     param_ErrorRowDirectory as string (\"ErrorRows\"),",
						"     param_DataflowName as string (\"df_ReportingLeaveBalances\")",
						"}",
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          PipelineName as string,",
						"          PipelineRunId as string,",
						"          PipelineTriggerTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          extraReportData as string[],",
						"          headers as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],",
						"          reportData as (employeeId as string, employeeNumber as integer, firstName as string, leaveEntitlementHours as double, leaveProRataHours as double, leaveTotalHours as double, leaveTypeId as string, leaveTypeName as string, primaryDepartmentCode as short, primaryDepartmentGlCode as string, primaryDepartmentName as string, primaryLocationCode as string, primaryLocationGlCode as string, primaryLocationName as string, primaryProjectCode as string, primaryProjectGlCode as string, primaryProjectName as string, primaryRoleCode as string, primaryRoleName as string, printName as string, surname as string)[],",
						"          reportVariantTag as string,",
						"          serverTime as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName',",
						"     documentForm: 'documentPerLine') ~> sourceJson",
						"sourceJson foldDown(unroll(reportData),",
						"     mapColumn(",
						"          employeeId = reportData.employeeId,",
						"          employeeNumber = reportData.employeeNumber,",
						"          firstName = reportData.firstName,",
						"          leaveEntitlementHours = reportData.leaveEntitlementHours,",
						"          leaveProRataHours = reportData.leaveProRataHours,",
						"          leaveTotalHours = reportData.leaveTotalHours,",
						"          leaveTypeId = reportData.leaveTypeId,",
						"          leaveTypeName = reportData.leaveTypeName,",
						"          primaryDepartmentCode = reportData.primaryDepartmentCode,",
						"          primaryDepartmentGlCode = reportData.primaryDepartmentGlCode,",
						"          primaryDepartmentName = reportData.primaryDepartmentName,",
						"          primaryLocationCode = reportData.primaryLocationCode,",
						"          primaryLocationGlCode = reportData.primaryLocationGlCode,",
						"          primaryLocationName = reportData.primaryLocationName,",
						"          primaryProjectCode = reportData.primaryProjectCode,",
						"          primaryProjectGlCode = reportData.primaryProjectGlCode,",
						"          primaryProjectName = reportData.primaryProjectName,",
						"          primaryRoleCode = reportData.primaryRoleCode,",
						"          primaryRoleName = reportData.primaryRoleName,",
						"          printName = reportData.printName,",
						"          surname = reportData.surname,",
						"          {Org.OrganizationId},",
						"          PipelineName,",
						"          PipelineRunId,",
						"          PipelineTriggerTime,",
						"          SourceFileName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenReportData",
						"flattenReportData derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns",
						"castDateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: ($param_FileSystem),",
						"     rejectedData_folderPath: ($param_ErrorRowDirectory),",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true) ~> sinkSql"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Rosters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "04_Rosters"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns",
							"description": "Creating/updating the columns G'PipelineName, PipelineRunId, PipelineTriggerTime, QueryFinishDate, QueryStartDate, amount, createdByUser, createdDate, date1, employeeId, employmentType, end, firstName, lastName, modifiedByUser, modifiedDate, quantity, room, rosterEntryId, rosterId, serviceCode, start, SourceFileName'"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Rosters\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tQueryFinishDate as date,\n\t\tQueryStartDate as date,\n\t\tamount as double,\n\t\tcreatedByUser as string,\n\t\tcreatedDate as string,\n\t\tdate as string,\n\t\temployeeId as string,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tfirstName as string,\n\t\tlastName as string,\n\t\tmodifiedByUser as string,\n\t\tmodifiedDate as string,\n\t\tquantity as double,\n\t\troom as string,\n\t\trosterEntryId as string,\n\t\trosterId as string,\n\t\tserviceCode as string,\n\t\tstart as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(end = toTimestamp(concat(toString(toDate(date)), ' ', end, ':00')),\n\t\tstart = toTimestamp(concat(toString(toDate(date)), ' ', start, ':00')),\n\t\tdate = toDate(date),\n\t\tPipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW'),\n\t\tcreatedDate = toDate(createdDate),\n\t\tmodifiedDate = toDate(modifiedDate)) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Timesheets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03_Timesheets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Timesheets\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tQueryFinishDate as date,\n\t\tQueryStartDate as date,\n\t\tapprovalStatus as string,\n\t\tcentreCostCode as string,\n\t\tdate as string,\n\t\temployee as string,\n\t\temployeeId as string,\n\t\t{employeeRef.No} as integer,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tleaveApplicationId as string,\n\t\troom as string,\n\t\troomCostCode as string,\n\t\troster as string,\n\t\trosterId as string,\n\t\tstart as string,\n\t\ttimesheetId as string,\n\t\ttotalCost as double,\n\t\ttotalHours as double,\n\t\tworkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(PipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW'),\n\t\tdate = toDate(date),\n\t\tend = toTimestamp(concat(toString(toDate(date)), ' ', end, ':00')),\n\t\tstart = toTimestamp(concat(toString(toDate(date)), ' ', start, ':00'))) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Wages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Wages\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tamount as double,\n\t\tdepartment as string,\n\t\temployeeId as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tpayItemId as string,\n\t\tpayRunId as string,\n\t\tpayrunGroup as string,\n\t\tpayslipId as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(PipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW')) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory + '/' + $param_DataflowName),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_EmployeePayPolicies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Organizations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Organization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Organizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/company/', \nitem().organizationId,\n'/reporting/employee-pay-policies',\n'?asofDate=',addDays(utcNow(),0),\n'&includeTerminated=true'\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "EmployeePayPolicies_ds",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "EmployeePayPolicies",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Organization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmployeePayPolicies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"jsoninput": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"WriteToSQLDB": {
										"param_SchemaName": "dbo",
										"param_TableName": "Employee_Pay_Policies"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "Employee_Pay_Policies"
					}
				},
				"folder": {
					"name": "00_Definitiv Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmployeePayPolicies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_EmployeeTableMaster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Organizations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Organization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Organizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/company/', \nitem().organizationId,\n'/reporting/employees',\n'?asofDate=',addDays(utcNow(),0),\n'&includeTerminated=true'\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "EmployeeMaster_ds",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "EmployeeMaster",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Organization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmployeeMaster",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"jsoninput": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"WriteToSQLDB": {
										"param_SchemaName": "dbo",
										"param_TableName": "Employee_Table_Master"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "Employee_Table_Master"
					}
				},
				"folder": {
					"name": "00_Definitiv Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmployeeMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ApiToJson",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": {
									"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
									"type": "Expression"
								},
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": {
										"value": "/api/v2/employees",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_Employees",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Employees",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_Employees\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSqlEmployee": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName1",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName1",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeePaymentAccounts": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName2",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName2",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeePhoneNumbers": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName3",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName3",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeStreetAddresses": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName4",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName4",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeSuperAccounts": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName5",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName5",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeSuperContributions": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName6",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName6",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeTaxDeclaration": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName7",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName7",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemeName1",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName1",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemeName1",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName1",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('ApiToJson').output.errors[0].Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName1",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName1",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Employees",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Employees').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName1",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemeName1": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName1": {
						"type": "string",
						"defaultValue": "Employees"
					},
					"param_SchemeName2": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName2": {
						"type": "string",
						"defaultValue": "EmployeePaymentAccounts"
					},
					"param_SchemeName3": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName3": {
						"type": "string",
						"defaultValue": "EmployeePhoneNumbers"
					},
					"param_SchemeName4": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName4": {
						"type": "string",
						"defaultValue": "EmployeeStreetAddresses"
					},
					"param_SchemeName5": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName5": {
						"type": "string",
						"defaultValue": "EmployeeSuperAccounts"
					},
					"param_SchemeName6": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName6": {
						"type": "string",
						"defaultValue": "EmployeeSuperContributions"
					},
					"param_SchemeName7": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName7": {
						"type": "string",
						"defaultValue": "EmployeeTaxDeclarations"
					}
				},
				"variables": {
					"var_PreRowCount": {
						"type": "String",
						"defaultValue": "var_PreRowCount"
					},
					"var_PostRowCount": {
						"type": "String",
						"defaultValue": "var_PostRowCount"
					},
					"var_CopyActivityOutput": {
						"type": "String",
						"defaultValue": "var_CopyActivityOutput"
					},
					"var_DataflowActivityOutput": {
						"type": "String",
						"defaultValue": "var_DataflowActivityOutput"
					},
					"var_CopyActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_CopyActivityErrorMessage"
					},
					"var_DataflowActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_DataflowActivityErrorMessage"
					}
				},
				"folder": {
					"name": "05_Employees"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Employees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_EmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Employees",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [employeeId] FROM [definitiv].[Employees]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Employees"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Employee",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Employees').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "Employee.EmployeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/employees/',\nitem().employeeId,\n'/employment-history'\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_EmploymentHistory",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_EmploymentHistory",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_EmploymentHistory\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.EmployeesEmploymentHistory",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_EmploymentHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.EmployeesEmploymentHistory",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_EmploymentHistory",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_EmploymentHistory').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "EmployeesEmploymentHistory"
					}
				},
				"folder": {
					"name": "05_Employees"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_EmploymentHistory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Organizations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Organizations",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Organizations",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_Organizations\""
								},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SinkSqlDefinitiv": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ApiToJson",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": {
									"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
									"type": "Expression"
								},
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": "/api/v2/organizations"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Organizations",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Organizations').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('ApiToJson').output.errors[0].Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "Organizations"
					}
				},
				"variables": {
					"varLogicAppBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:04:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Organizations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Payslips')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OrgPayRuns",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [Org.OrganizationId] as orgId, [payRunId], [Org.LegalName] as orgLegalName, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "OrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "OrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('OrgPayRuns').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ApiToJson",
									"description": "",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().orgId",
														"type": "Expression"
													}
												},
												{
													"name": "Org.LegalName",
													"value": {
														"value": "@item().orgLegalName",
														"type": "Expression"
													}
												},
												{
													"name": "PayRun.PayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "PayRun.PayslipGenerationStatus",
													"value": {
														"value": "@item().payslipGenerationStatus",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/custom-reports/',\npipeline().globalParameters.global_CustomReportId_Payslips,\n'?organizationId=', \nitem().orgId, \n'&selectedPayRunId=', \nitem().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_Payslips",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "OrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Payslips",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": "\"container-adf-nido-prod-eastau-100-1\"",
									"param_ErrorRowDirectory": "\"ErrorRows\"",
									"param_DataflowName": "\"df_Payslips\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.CustomReportPayslips",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Payslips",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.CustomReportPayslips",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Payslips",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Payslips').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "CustomReportPayslips"
					}
				},
				"variables": {
					"var_PreRowCount": {
						"type": "String",
						"defaultValue": "var_PreRowCount"
					},
					"var_PostRowCount": {
						"type": "String",
						"defaultValue": " var_PostRowCount"
					},
					"var_CopyActivityOutput": {
						"type": "String",
						"defaultValue": "var_CopyActivityOutput"
					},
					"var_DataflowActivityOutput": {
						"type": "String",
						"defaultValue": "var_DataflowActivityOutput"
					},
					"var_CopyActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_CopyActivityErrorMessage"
					},
					"var_DataflowActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_DataflowActivityErrorMessage"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Payslips')]"
			]
		}
	]
}