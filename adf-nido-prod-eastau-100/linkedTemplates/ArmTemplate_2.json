{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-nido-prod-eastau-100"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_B2_Payslips_DefinitivToDraft')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayslips"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDraftPayslip"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPreceda",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "Update"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "Insert"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "Delete"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayslips\nsource(output(\n\t\tRecordId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select RecordId from draft.Preceda_Payslip_2 where RecordIsDefinitiv=1',\n\tformat: 'query') ~> SourceSqlDraftPayslip\nUnion1 alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nSourceSqlDefinitivPayslips, SourceSqlDraftPayslip exists(SourceSqlDefinitivPayslips@RecordId == SourceSqlDraftPayslip@RecordId,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nExistsUpdate derive(AlterRowCondition = \"Update\") ~> Update\nSourceSqlDefinitivPayslips, SourceSqlDraftPayslip exists(SourceSqlDefinitivPayslips@RecordId == SourceSqlDraftPayslip@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nNotExistsInsert derive(AlterRowCondition = \"Insert\") ~> Insert\nSourceSqlDraftPayslip, SourceSqlDefinitivPayslips exists(SourceSqlDraftPayslip@RecordId == SourceSqlDefinitivPayslips@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsDelete\nNotExistsDelete derive(AlterRowCondition = \"Delete\") ~> Delete\nUpdate, Insert, Delete union(byName: true)~> Union1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['RecordId'],\n\tformat: 'table',\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (\"ds_adls2_stnidoprodeastau100_log\"),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tRecordId,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tEmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayslipLineItemId,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tAlterRowCondition\n\t)) ~> SinkSqlDraftPreceda"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_B3_Payslips_DedupeDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayslips"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPreceda",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Window1"
						}
					],
					"script": "parameters{\n\tPipelineTriggerTime as string,\n\tPipelineRunId as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayslips\nFilter1 alterRow(deleteIf(true())) ~> AlterRow1\nWindow1 aggregate(groupBy(EmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayslipLineItemId,\n\t\tDepartmentCode,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate),\n\tCountRows = count('1')) ~> Aggregate1\nAggregate1 filter(CountRows>1) ~> Filter1\nSourceSqlDefinitivPayslips window(over(EmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayslipLineItemId,\n\t\tDepartmentCode,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate),\n\tRowNumber = rowNumber()) ~> Window1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:true,\n\tkeys:['EmployeeId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> SinkSqlDraftPreceda"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_C1_Payslips_DraftReportViews')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlPrecedaPayslip2"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlServiceList"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlPrecedaMap"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlPreceedaPayCodes"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayCodes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPayslipReportView",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "RecordIsDefinitiv"
						},
						{
							"name": "RecordIsPreceda"
						},
						{
							"name": "InnerPrecedaMap1"
						},
						{
							"name": "RightOuterPrecedaPayslip21"
						},
						{
							"name": "LeftOuterPrecedaPayCodes"
						},
						{
							"name": "RightOuterPrecedaPayslip22"
						},
						{
							"name": "LeftOuterDefinitivPayCodes"
						},
						{
							"name": "PayCodeIsReport"
						},
						{
							"name": "UnionPrecedaDefinitiv"
						},
						{
							"name": "SelectServiceList"
						},
						{
							"name": "SelectDefinitivPayCode"
						},
						{
							"name": "SelectPrecedaPayCode"
						},
						{
							"name": "SelectPrecedaMap"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordWatermark as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlPrecedaPayslip2\nsource(output(\n\t\tCode as string,\n\t\tService_Name as string,\n\t\tService_ID as string,\n\t\tBase as string,\n\t\tOwner as string,\n\t\tAddress as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tPostal_Code as double,\n\t\tCountry as string,\n\t\tPlaces as double,\n\t\tDate_of_NIDO_Transition as date,\n\t\tDateTNKManagedFrom as date,\n\t\tPreviousOwner as string,\n\t\tBrand as string,\n\t\tRegistered_Name as string,\n\t\tLatitude as decimal(18,6),\n\t\tLongitude as decimal(18,6),\n\t\tDateServiceClosed as date,\n\t\tService_or_Office as string,\n\t\tApprovedProvider as string,\n\t\tApprovedProviderABN as string,\n\t\tApprovedProviderNumber as string,\n\t\tProposedOpenDate as date,\n\t\t{Project Manager / Company} as string,\n\t\t{Landscaping Company} as string,\n\t\tArchitects as string,\n\t\t{Construction completion date} as date,\n\t\t{Yard completion date} as date,\n\t\t{Fitout start date} as date,\n\t\t{Service approval pre-inspection date} as date,\n\t\t{Service approval status} as string,\n\t\t{Start up person} as string,\n\t\t{Notes on progress} as string,\n\t\t{Stage in service lifecycle} as string,\n\t\t{Type of proposal} as string,\n\t\t{ESM First Name} as string,\n\t\t{ESM Last Name} as string,\n\t\t{ESM Mobile Number} as string,\n\t\t{ESM Email} as string,\n\t\tServiceAdminFirstName as string,\n\t\tServiceAdminLastName as string,\n\t\tServiceAdminEmail as string,\n\t\t{Business Phone} as string,\n\t\tOpen as string,\n\t\tClose as string,\n\t\t{Email Address} as string,\n\t\tWebsite as string,\n\t\tSupplierCompany as string,\n\t\t{Staff Employer} as string,\n\t\tModified as timestamp,\n\t\tID as integer,\n\t\tService_Approval_Date as date,\n\t\tDateTNKAcquired as date,\n\t\tCreditCardAcquital as boolean,\n\t\tRent as decimal(19,4),\n\t\t{Board Approval Date} as date,\n\t\t{DA date} as date,\n\t\t{AFL signed date} as date,\n\t\tOwnerEmail as string,\n\t\tSageServiceCode as string,\n\t\tPQLEmail as string,\n\t\tBaseFuture as string,\n\t\tPreviousPlaces as integer,\n\t\tDatePlacesChanged as date,\n\t\tPQLEmail2 as string,\n\t\tLandlordsName as string,\n\t\tLandlordsEmailAddress as string,\n\t\tLandlordsPhoneNumber as string,\n\t\tLandlordsEntity as string,\n\t\tLandlordsAddress as string,\n\t\tProposedFeesOvers as decimal(19,4),\n\t\tProposedFeesUnders as decimal(19,4),\n\t\tDA_Status as string,\n\t\tBoard_Approval_Status as string,\n\t\tOccupancy_Certificate as boolean,\n\t\t{LL Mortgagee consent to Lease} as boolean,\n\t\t{Lease registered} as boolean,\n\t\t{External counsel signed off} as boolean,\n\t\t{Bank Guarantee to be issued date} as date,\n\t\t{Corporate Guarantor details} as string,\n\t\t{Corporate Guarantor Capped Amount} as decimal(19,4),\n\t\t{Capital Contribution payable to Tenant under the AFL or Lease} as string,\n\t\t{Capital Contribution Amount} as decimal(19,4),\n\t\t{Estimated capital expenditure expected to be paid by Tenant for set-up} as decimal(19,4),\n\t\t{Tenant Insurance in place} as boolean,\n\t\t{Estimated Gross Turnover - Insurance} as decimal(19,4),\n\t\t{Estimated Annual Wages - Insurance} as decimal(19,4),\n\t\t{Contents Value - Insurance} as decimal(19,4),\n\t\tBrand_at_TNK_PurchaseDate as string,\n\t\tBrand_Change_Date as date,\n\t\tBrand_Before_Change as string,\n\t\tAverageDailyFee as decimal(19,4),\n\t\tBase4Reports as string,\n\t\tDateTNDAcquired as date,\n\t\tWaitListSoftware as string,\n\t\tNominatedSupervisorID as integer,\n\t\tService_CRN as string,\n\t\t{Provider CRN (Proda)} as string,\n\t\t{Cluster Name} as string,\n\t\t{KMs to Cluster Lead Service} as double,\n\t\tCurriculumLeaderEmail as string,\n\t\t{Board Approval Method} as string,\n\t\t{Acquisition Category} as string,\n\t\tBizNameRenewal as date,\n\t\t{AFL Status} as string,\n\t\t{Lease Staus} as string,\n\t\t{Nomos updated} as boolean,\n\t\t{ROE Status} as string,\n\t\t{Bank Guarantee Amount} as decimal(19,4),\n\t\tWkBeginSpaceToMyWL as date,\n\t\tLGAname_deprecated as string,\n\t\t{Purpose Built or Converted} as string,\n\t\tLGAcode_deprecated as integer,\n\t\tSEIFAdecileLGA as integer,\n\t\tSA2code as integer,\n\t\tSA2name as string,\n\t\t{Year building built} as integer,\n\t\t{No 0-5 Year olds} as float,\n\t\tAveHouseholdIncome as decimal(19,4),\n\t\tAveMortgageRepayments as decimal(19,4),\n\t\tUnemploymentRate as float,\n\t\tAveWeeklyRental as decimal(19,4),\n\t\tAveWeeklyHouseholdIncome as decimal(19,4),\n\t\tBirthRate2018 as float,\n\t\t{Population Growth Est 2020-2025} as float,\n\t\t{Female Workforce Particpation Rate} as float,\n\t\t{Population Density per Hectare} as float,\n\t\t{No Dwellings} as integer,\n\t\t{No Houses} as integer,\n\t\t{No Apartments} as integer,\n\t\t{No. Housing Approvals} as integer,\n\t\tAveAgePopulation as float,\n\t\tSEIFAdecileSA2 as integer,\n\t\t{Curriculum Leader FirstName} as string,\n\t\t{Curriculum Leader LastName} as string,\n\t\t{Curriculum Leader} as string,\n\t\t{PQL FirstName} as string,\n\t\t{PQL LastName} as string,\n\t\tAreaManager as string,\n\t\tLastModified as timestamp,\n\t\tLastModifiedBy as string,\n\t\tAdded as timestamp,\n\t\tAddedBy as string,\n\t\tServiceApprovalGrantedDate as date,\n\t\tLandlordAgent as string,\n\t\tmanaged_bb as string,\n\t\tLGAname as string,\n\t\tEsmEmailThink as string,\n\t\tSAEmailThink as string,\n\t\tPQLEmailThink as string,\n\t\tPQLEmail2Think as string,\n\t\tCLEmailThink as string,\n\t\tService_ID_History as string,\n\t\tEmailAddressThink as string,\n\t\tBBGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlServiceList\nsource(output(\n\t\tPreceedaCode as string,\n\t\tServiceCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlPrecedaMap\nsource(output(\n\t\tCode as string,\n\t\tDescription as string,\n\t\t{Description Group} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlPreceedaPayCodes\nsource(output(\n\t\tCode as string,\n\t\tDescription as string,\n\t\tDescriptionGroup as string,\n\t\treport as boolean,\n\t\tIsReportViewPayslipsFilter as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayCodes\nSourceSqlPrecedaPayslip2 filter(RecordIsDefinitiv==true() \r\n    && PeriodEndingDate > toDate(\"2021-10-15\")) ~> RecordIsDefinitiv\nSourceSqlPrecedaPayslip2 filter(RecordIsPreceda==true() \r\n    && PeriodEndingDate <= toDate(\"2021-10-15\")) ~> RecordIsPreceda\nSelectServiceList, SelectPrecedaMap join({ServiceList.Code} == {PrecedaMap.ServiceCode},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerPrecedaMap1\nInnerPrecedaMap1, RecordIsPreceda join({PrecedaMap.PreceedaCode} == DepartmentCode,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> RightOuterPrecedaPayslip21\nRightOuterPrecedaPayslip21, SelectPrecedaPayCode join(toString(HoursOrADCode) == {PrecedaPayCodes.Code},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftOuterPrecedaPayCodes\nInnerPrecedaMap1, RecordIsDefinitiv join({PrecedaMap.PreceedaCode} == ProjectCode,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> RightOuterPrecedaPayslip22\nRightOuterPrecedaPayslip22, SelectDefinitivPayCode join(HoursOrADCodeDesc == {DefinitivPayCodes.Description},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftOuterDefinitivPayCodes\nSourceSqlDefinitivPayCodes filter(IsReportViewPayslipsFilter==true()) ~> PayCodeIsReport\nLeftOuterDefinitivPayCodes, LeftOuterPrecedaPayCodes union(byName: true)~> UnionPrecedaDefinitiv\nSourceSqlServiceList select(mapColumn(\n\t\t{ServiceList.Code} = Code,\n\t\t{ServiceList.Owner} = Owner\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectServiceList\nPayCodeIsReport select(mapColumn(\n\t\t{DefinitivPayCodes.Code} = Code,\n\t\t{DefinitivPayCodes.Description} = Description,\n\t\t{DefinitivPayCodes.DescriptionGroup} = DescriptionGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDefinitivPayCode\nSourceSqlPreceedaPayCodes select(mapColumn(\n\t\t{PrecedaPayCodes.Code} = Code,\n\t\t{PrecedaPayCodes.Description} = Description,\n\t\t{PrecedaPayCodes.Description Group} = {Description Group}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPrecedaPayCode\nSourceSqlPrecedaMap select(mapColumn(\n\t\t{PrecedaMap.PreceedaCode} = PreceedaCode,\n\t\t{PrecedaMap.ServiceCode} = ServiceCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPrecedaMap\nUnionPrecedaDefinitiv alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['RecordId','RecordWatermark'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tServiceListCode = {ServiceList.Code},\n\t\tServiceListOwner = {ServiceList.Owner},\n\t\tPrecedaMapPreceedaCode = {PrecedaMap.PreceedaCode},\n\t\tPrecedaMapServiceCode = {PrecedaMap.ServiceCode},\n\t\tRecordId,\n\t\tRecordWatermark,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tDefinitivPayCode = {DefinitivPayCodes.Code},\n\t\tDefinitivPayCodeDescription = {DefinitivPayCodes.Description},\n\t\tDefinitivPayCodeDescriptionGroup = {DefinitivPayCodes.DescriptionGroup},\n\t\tPrecedaPayCode = {PrecedaPayCodes.Code},\n\t\tPrecedaPayCodeDescription = {PrecedaPayCodes.Description},\n\t\t{PrecedaPayCodeDescription Group} = {PrecedaPayCodes.Description Group}\n\t)) ~> SinkSqlDraftPayslipReportView"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FlattenDefinitivReportingArrays')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "08_Organizations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "parameters{\n\tsourceWildcardPathName as string ('ReportingLeaveApplications')\n}\nsource(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:[($sourceWildcardPathName)]) ~> source1\nsource1 foldDown(unroll(reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\ttransactionCommit: 'single',\n\treportSuccessOnError: false) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FlattenOrgPayRuns_UpdateOrgPayRuns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "07_PayRuns"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitivPayRuns"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectSourceBlobDefinitivPayRuns"
						}
					],
					"script": "source(output(\n\t\tOrg as (LegalName as string, OrganizationId as string),\n\t\tOrgPayRun as (PipelineName as string, PipelineRunId as string, PipelineTriggerTime as string),\n\t\tPayCalendar as (atoLodgementsEnabled as boolean, description as string, payCalendarId as string, period as string, periodStartDate as string, proRataMode as string, weeklyFactor as double, weeklyFactorEquation as short),\n\t\tcurrentFinancialYearEndDate as string,\n\t\tcurrentFinancialYearStartDate as string,\n\t\tdateLastCalculated as string,\n\t\tdateOpened as string,\n\t\tdatePublished as string,\n\t\temployeeCount as short,\n\t\teofyLodgementStatus as string,\n\t\tfinancialYearEndDate as string,\n\t\tfinancialYearStartDate as string,\n\t\tinitiatingUserId as string,\n\t\tinitiatingUserName as string,\n\t\tlodgementStatus as string,\n\t\tnotes as string,\n\t\tpayCalendarId as string,\n\t\tpayCalendarName as string,\n\t\tpayRunId as string,\n\t\tpaymentDate as string,\n\t\tpayslipGenerationStatus as string,\n\t\tperiodEnd as string,\n\t\tperiodStart as string,\n\t\tpublishingUserId as string,\n\t\tpublishingUserName as string,\n\t\trunNumber as short,\n\t\tstatus as string,\n\t\tsuperannuationPaymentDate as string,\n\t\ttype as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivPayRuns\nSelectSourceBlobDefinitivPayRuns alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nSourceBlobDefinitivPayRuns select(mapColumn(\n\t\t{Org.LegalName} = Org.LegalName,\n\t\t{Org.OrganizationId} = Org.OrganizationId,\n\t\t{OrgPayRun.PayCalendar} = OrgPayRun.PipelineName,\n\t\t{OrgPayRun.PipelineRunId} = OrgPayRun.PipelineRunId,\n\t\t{OrgPayRun.PipelineTriggerTime} = OrgPayRun.PipelineTriggerTime,\n\t\t{PayCalendar.atoLodgementsEnabled} = PayCalendar.atoLodgementsEnabled,\n\t\t{PayCalendar.payCalendarId} = PayCalendar.payCalendarId,\n\t\t{PayCalendar.period} = PayCalendar.period,\n\t\t{PayCalendar.periodStartDate} = PayCalendar.periodStartDate,\n\t\t{PayCalendar.proRataMode} = PayCalendar.proRataMode,\n\t\t{PayCalendar.weeklyFactor} = PayCalendar.weeklyFactor,\n\t\t{PayCalendar.weeklyFactorEquation} = PayCalendar.weeklyFactorEquation,\n\t\tcurrentFinancialYearEndDate,\n\t\tcurrentFinancialYearStartDate,\n\t\tdateLastCalculated,\n\t\tdateOpened,\n\t\tdatePublished,\n\t\temployeeCount,\n\t\teofyLodgementStatus,\n\t\tfinancialYearEndDate,\n\t\tfinancialYearStartDate,\n\t\tinitiatingUserId,\n\t\tinitiatingUserName,\n\t\tlodgementStatus,\n\t\tnotes,\n\t\tpayCalendarId,\n\t\tpayCalendarName,\n\t\tpayRunId,\n\t\tpaymentDate,\n\t\tpayslipGenerationStatus,\n\t\tperiodEnd,\n\t\tperiodStart,\n\t\tpublishingUserId,\n\t\tpublishingUserName,\n\t\trunNumber,\n\t\tstatus,\n\t\tsuperannuationPaymentDate,\n\t\ttype,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSourceBlobDefinitivPayRuns\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['payRunId'],\n\tformat: 'table',\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adls2_stnidoprodeastau100_log',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tlegalName = {Org.LegalName},\n\t\torganizationId = {Org.OrganizationId},\n\t\tpayCalendar = {OrgPayRun.PayCalendar},\n\t\tpipelineRunId = {OrgPayRun.PipelineRunId},\n\t\tpipelineTriggerTime = {OrgPayRun.PipelineTriggerTime},\n\t\tatoLodgementsEnabled = {PayCalendar.atoLodgementsEnabled},\n\t\tpayCalendarId = {PayCalendar.payCalendarId},\n\t\tperiod = {PayCalendar.period},\n\t\tperiodStartDate = {PayCalendar.periodStartDate},\n\t\tproRataMode = {PayCalendar.proRataMode},\n\t\tweeklyFactor = {PayCalendar.weeklyFactor},\n\t\tweeklyFactorEquation = {PayCalendar.weeklyFactorEquation},\n\t\tcurrentFinancialYearEndDate,\n\t\tcurrentFinancialYearStartDate,\n\t\tdateLastCalculated,\n\t\tdateOpened,\n\t\tdatePublished,\n\t\temployeeCount,\n\t\teofyLodgementStatus,\n\t\tfinancialYearEndDate,\n\t\tfinancialYearStartDate,\n\t\tinitiatingUserId,\n\t\tinitiatingUserName,\n\t\tlodgementStatus,\n\t\tnotes,\n\t\tpayCalendarId,\n\t\tpayCalendarName,\n\t\tpayRunId,\n\t\tpaymentDate,\n\t\tpayslipGenerationStatus,\n\t\tperiodEnd,\n\t\tperiodStart,\n\t\tpublishingUserId,\n\t\tpublishingUserName,\n\t\trunNumber,\n\t\tstatus,\n\t\tsuperannuationPaymentDate,\n\t\ttype,\n\t\tSourceFileName\n\t)) ~> SinkSqlDefinitiv"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FlattenOrgRosters_UpdateOrgRosters1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "AlterRowConditionInsert"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "AlterRowConditionUpdate"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "AlterRowConditionDelete"
						},
						{
							"name": "UnionAlterRowCondtions"
						},
						{
							"name": "CastTypes"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          {OrgRosters.PipelineName} as string,",
						"          {OrgRosters.PipelineRunId} as string,",
						"          {OrgRosters.PipelineTriggerTime} as string,",
						"          ceaseDate as string,",
						"          commencementDate as string,",
						"          costingSettings as string,",
						"          customPeriodDuration as short,",
						"          defaultPeriodDurationType as string,",
						"          description as string,",
						"          isTemplate as boolean,",
						"          name as string,",
						"          notifyEmployeesByDefault as boolean,",
						"          paid as boolean,",
						"          rosterId as string,",
						"          showAsTwelveHourTime as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceBlobDefinitiv",
						"source(output(",
						"          ceaseDate as date,",
						"          commencementDate as date,",
						"          costingSettings as string,",
						"          customPeriodDuration as short,",
						"          defaultPeriodDurationType as string,",
						"          description as string,",
						"          isTemplate as boolean,",
						"          name as string,",
						"          notifyEmployeesByDefault as boolean,",
						"          paid as boolean,",
						"          rosterId as string,",
						"          showAsTwelveHourTime as boolean,",
						"          organizationId as string,",
						"          pipelineRunId as string,",
						"          pipelineTriggerTime as string,",
						"          SourceFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceSqlDefinitiv",
						"UnionAlterRowCondtions alterRow(insertIf(AlterRowCondition==\"Insert\"),",
						"     updateIf(AlterRowCondition==\"Update\"),",
						"     deleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1",
						"CastTypes, SourceSqlDefinitiv exists(upper(SourceBlobDefinitiv@rosterId) == upper(SourceSqlDefinitiv@rosterId),",
						"     negate:true,",
						"     broadcast: 'auto')~> NotExistsInsert",
						"NotExistsInsert derive(AlterRowCondition = \"Insert\") ~> AlterRowConditionInsert",
						"CastTypes, SourceSqlDefinitiv exists(upper(SourceBlobDefinitiv@rosterId) == upper(SourceSqlDefinitiv@rosterId),",
						"     negate:false,",
						"     broadcast: 'auto')~> ExistsUpdate",
						"ExistsUpdate derive(AlterRowCondition = \"Update\") ~> AlterRowConditionUpdate",
						"SourceSqlDefinitiv, SourceBlobDefinitiv exists(upper(SourceSqlDefinitiv@rosterId) == upper(SourceBlobDefinitiv@rosterId),",
						"     negate:true,",
						"     broadcast: 'auto')~> NotExistsDelete",
						"NotExistsDelete derive(AlterRowCondition = \"Delete\") ~> AlterRowConditionDelete",
						"AlterRowConditionInsert, AlterRowConditionUpdate, AlterRowConditionDelete union(byName: true)~> UnionAlterRowCondtions",
						"SourceBlobDefinitiv derive(ceaseDate = toDate(ceaseDate),",
						"          commencementDate = toDate(commencementDate)) ~> CastTypes",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['rosterId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',",
						"     rejectedData_folderPath: 'ds_adsl2_stnidoprodeastau100_csv/definitiv.OrganizationRosters',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          organizationId = {Org.OrganizationId},",
						"          pipelineRunId = {OrgRosters.PipelineRunId},",
						"          pipelineTriggerTime = {OrgRosters.PipelineTriggerTime},",
						"          ceaseDate,",
						"          commencementDate,",
						"          costingSettings,",
						"          customPeriodDuration,",
						"          defaultPeriodDurationType,",
						"          description,",
						"          isTemplate,",
						"          name,",
						"          notifyEmployeesByDefault,",
						"          paid,",
						"          rosterId,",
						"          showAsTwelveHourTime",
						"     )) ~> SinkSqlDefinitiv"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['ReportingLeaveApplications']) ~> source1\nsource1 foldDown(unroll(reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['ReportingLeaveApplications.csv'],\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_TruncateInsertCusomReportWages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "sourceApi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FilterWeekEndingDate"
						},
						{
							"name": "CastDateType"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tpipelineRunId as string (uuid()),\n\tpipelineTriggerTime as string\n}\nsource(output(\n\t\tamount as double,\n\t\tdepartment as string,\n\t\temployeeId as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tpayItemId as string,\n\t\tpayRunId as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayrunGroup as string,\n\t\tpayslipId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nCastDateType filter(greater(weekEndingDate, toDate(\"2021-10-15\"))) ~> FilterWeekEndingDate\nSelect1 derive(weekEndingDate = toDate(weekEndingDate),\n\t\t{hoursOrA/DCode} = toInteger({hoursOrA/DCode})) ~> CastDateType\nsourceApi select(mapColumn(\n\t\tamount,\n\t\tdepartment,\n\t\temployeeId,\n\t\tfirstName,\n\t\tfullName,\n\t\t{hoursOrA/DCode},\n\t\t{hoursOrA/DCodeDesc},\n\t\tidNumber,\n\t\tlevel1Code,\n\t\tlevel2Code,\n\t\twageLineItemId = lineItemId,\n\t\tpayItemId,\n\t\tpayRunId,\n\t\tpayRunOrganizationId,\n\t\tpayRunPayRunId,\n\t\tpayRunPeriodEndDate,\n\t\tpayRunPeriodStartDate,\n\t\tpayrunGroup,\n\t\tpayslipId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpositionID,\n\t\tpositionTitle,\n\t\troom,\n\t\tsurname,\n\t\tweekEndingDate,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilterWeekEndingDate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportWagesErrorOutput/\", toString($pipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $pipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tamount,\n\t\tdepartment,\n\t\temployeeId,\n\t\tfirstName,\n\t\tfullName,\n\t\t{hoursOrA/DCode},\n\t\t{hoursOrA/DCodeDesc},\n\t\tidNumber,\n\t\tlevel1Code,\n\t\tlevel2Code,\n\t\twageLineItemId,\n\t\tpayItemId,\n\t\tpayRunId,\n\t\tpayRunOrganizationId,\n\t\tpayRunPayRunId,\n\t\tpayRunPeriodEndDate,\n\t\tpayRunPeriodStartDate,\n\t\tpayrunGroup,\n\t\tpayslipId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpositionID,\n\t\tpositionTitle,\n\t\troom,\n\t\tsurname,\n\t\tweekEndingDate,\n\t\tSourceFileName\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_TruncateInsertCustomReportPayslips')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "SourceApi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CastDateType1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tbaseRate as double,\n\t\tdepartmentCode as string,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tnumberOfUnits as double,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\tprojectCode as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceApi\nSelect2 derive(periodEndingDate = toDate(periodEndingDate),\n\t\tperiodStartDate = toDate(periodStartDate),\n\t\tpipelineTriggerTime = fromUTC(toTimestamp(pipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time'),\n\t\tpayDate = toDate(payDate)) ~> CastDateType1\nSourceApi select(mapColumn(\n\t\tbaseRate,\n\t\tdepartmentCode,\n\t\temployeeId,\n\t\temploymentTypeCode,\n\t\temploymentTypeCodeDesc,\n\t\tfirstName,\n\t\t{hoursOrA/DCode},\n\t\t{hoursOrA/DCodeDesc},\n\t\tidNumber,\n\t\tlevel1Code,\n\t\tlevel2Code,\n\t\tlineItemId,\n\t\tnumberOfUnits,\n\t\tpayDate,\n\t\tpayMethodCode,\n\t\tpayMethodCodeDesc,\n\t\tpayRunOrganizationId,\n\t\tpayRunPayRunId,\n\t\tpayRunPeriodEndDate,\n\t\tpayRunPeriodStartDate,\n\t\tpayslipId,\n\t\tpayslipNumber,\n\t\tperiodEndingDate,\n\t\tperiodStartDate,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpositionTitle,\n\t\tprojectCode,\n\t\trate,\n\t\tsurname,\n\t\tvalue,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nCastDateType1 filter(greater(periodEndingDate, toDate(\"2021-10-15\", 'yyyy-MM-dd'))) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 26), 'yyyy-MM-dd\\'T\\'HH:mm:ss')),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportRosters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "04_Rosters"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefintiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CastDateType"
						}
					],
					"script": "source(output(\n\t\t{CustomReportRosters.PipelineRunId} as string,\n\t\t{CustomReportRosters.PipelineTriggerTime} as string,\n\t\tamount as double,\n\t\tcreatedByUser as string,\n\t\tcreatedDate as string,\n\t\tdate as string,\n\t\temployeeId as string,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tfirstName as string,\n\t\tlastName as string,\n\t\tmodifiedByUser as string,\n\t\tmodifiedDate as string,\n\t\tparamOrganizationId as string,\n\t\tparamRosterId as string,\n\t\tquantity as double,\n\t\troom as string,\n\t\trosterEntryId as string,\n\t\trosterId as string,\n\t\tserviceCode as string,\n\t\tstart as string,\n\t\tvarRosterDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitiv\nSourceBlobDefinitiv derive(date = toDate(date),\n\t\tcreatedDate = toDate(createdDate),\n\t\tmodifiedDate = toDate(modifiedDate),\n\t\tRecordCreatedDate = toDate({CustomReportRosters.PipelineTriggerTime}),\n\t\tRecordIsDeleted = false(),\n\t\tRecordModifiedDate = toDate({CustomReportRosters.PipelineTriggerTime}),\n\t\tend = toTimestamp(concat(toString(toDate(date)), ' ', end, ':00')),\n\t\tstart = toTimestamp(concat(toString(toDate(date)), ' ', start, ':00'))) ~> CastDateType\nCastDateType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adsl2_stnidoprodeastau100_csv/definitiv.CustomReportRostersD',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tPipelineRunId = {CustomReportRosters.PipelineRunId},\n\t\tPipelineTriggerTime = {CustomReportRosters.PipelineTriggerTime},\n\t\tAmount = amount,\n\t\tCreatedByUser = createdByUser,\n\t\tCreatedDate = createdDate,\n\t\tDate = date,\n\t\tEmployeeId = employeeId,\n\t\tEmploymentType = employmentType,\n\t\tEnd = end,\n\t\tFirstName = firstName,\n\t\tLastName = lastName,\n\t\tModifiedByUser = modifiedByUser,\n\t\tModifiedDate = modifiedDate,\n\t\tOrganizationId = paramOrganizationId,\n\t\tParamRosterId = paramRosterId,\n\t\tQuantity = quantity,\n\t\tRoom = room,\n\t\tRosterEntryId = rosterEntryId,\n\t\tRosterId = rosterId,\n\t\tServiceCode = serviceCode,\n\t\tStart = start,\n\t\tVarRosterDate = varRosterDate,\n\t\tSourceFileName,\n\t\tRecordCreatedDate,\n\t\tRecordIsDeleted,\n\t\tRecordModifiedDate\n\t)) ~> SinkSqlDefintiv"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportTimesheets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03_Timesheets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tapprovalStatus as string,\n\t\tcentreCostCode as string,\n\t\tdate as string,\n\t\temployee as string,\n\t\temployeeId as string,\n\t\t{employeeRef.No} as integer,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tleaveApplicationId as string,\n\t\torganizationId as string,\n\t\tpayRunId as string,\n\t\tperiodEndDate as date,\n\t\tperiodStartDate as date,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\troom as string,\n\t\troomCostCode as string,\n\t\troster as string,\n\t\trosterId as string,\n\t\tstart as string,\n\t\ttimesheetId as string,\n\t\ttotalCost as double,\n\t\ttotalHours as double,\n\t\tworkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['timesheetId','leaveApplicationId','date'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportTimesheets1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03_Timesheets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "sourceApi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CastDateType"
						}
					],
					"script": "parameters{\n\tpipelineRunId as string,\n\tpipelineTriggerTime as string\n}\nsource(output(\n\t\tapprovalStatus as string,\n\t\tcentreCostCode as string,\n\t\tdate as string,\n\t\temployee as string,\n\t\temployeeId as string,\n\t\t{employeeRef.No} as integer,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tleaveApplicationId as string,\n\t\torganizationOrganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\troom as string,\n\t\troomCostCode as string,\n\t\troster as string,\n\t\trosterId as string,\n\t\tstart as string,\n\t\ttimesheetId as string,\n\t\ttotalCost as double,\n\t\ttotalHours as double,\n\t\tworkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nsourceApi derive(date = toDate(date),\n\t\tpipelineTriggerTime = fromUTC(toTimestamp(pipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType\nCastDateType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportTimesheetsErrorOutput/\", toString($pipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $pipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tapprovalStatus,\n\t\tcentreCostCode,\n\t\tdate,\n\t\temployee,\n\t\temployeeId,\n\t\tNo = {employeeRef.No},\n\t\temploymentType,\n\t\tend,\n\t\tleaveApplicationId,\n\t\torganizationOrganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\troom,\n\t\troomCostCode,\n\t\troster,\n\t\trosterId,\n\t\tstart,\n\t\ttimesheetId,\n\t\ttotalCost,\n\t\ttotalHours,\n\t\tworkType,\n\t\tSourceFileName\n\t)) ~> sinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportWages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "sourceApi"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sourceSql"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "FilterWeekEndingDate"
						},
						{
							"name": "CastDateType1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Insert"
						},
						{
							"name": "Update"
						},
						{
							"name": "Delete"
						},
						{
							"name": "UnionAlterRowCondition"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "CastDateType2"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "ExistsUpdate"
						}
					],
					"script": "parameters{\n\tpipelineRunId as string (\"1b8c16e7-2b69-4758-b37c-06a6aa153d3c\"),\n\tpipelineTriggerTime as string (\"2022-01-14T00:59:42.8892361Z\")\n}\nsource(output(\n\t\tamount as double,\n\t\tdepartment as string,\n\t\temployeeId as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tpayItemId as string,\n\t\tpayRunId as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayrunGroup as string,\n\t\tpayslipId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayItemId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tWageLineItemId as integer,\n\t\tAmount as decimal(19,4),\n\t\tDepartment as string,\n\t\tFirstName as string,\n\t\tFullName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tPayRunGroup as string,\n\t\tPositionID as string,\n\t\tPositionTitle as string,\n\t\tRoom as string,\n\t\tSurname as string,\n\t\tWeekEndingDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSql\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nCastDateType1 filter(greater(WeekEndingDate, toDate(\"2021-10-15\"))) ~> FilterWeekEndingDate\nSelect1 derive(WeekEndingDate = toDate(WeekEndingDate),\n\t\tHoursOrADCode = toInteger(HoursOrADCode),\n\t\tPipelineTriggerTime = fromUTC(toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType1\nsourceApi select(mapColumn(\n\t\tAmount = amount,\n\t\tDepartment = department,\n\t\tEmployeeId = employeeId,\n\t\tFirstName = firstName,\n\t\tFullName = fullName,\n\t\tHoursOrADCode = {hoursOrA/DCode},\n\t\tHoursOrADCodeDesc = {hoursOrA/DCodeDesc},\n\t\tIdNumber = idNumber,\n\t\tLevel1Code = level1Code,\n\t\tLevel2Code = level2Code,\n\t\tLineItemId = lineItemId,\n\t\tPayItemId = payItemId,\n\t\tPayRunId = payRunId,\n\t\tOrganizationId = payRunOrganizationId,\n\t\tPayRunId = payRunPayRunId,\n\t\tPayRunPeriodEndDate = payRunPeriodEndDate,\n\t\tPayRunPeriodStartDate = payRunPeriodStartDate,\n\t\tPayrunGroup = payrunGroup,\n\t\tPayslipId = payslipId,\n\t\tPipelineRunId = pipelineRunId,\n\t\tPipelineTriggerTime = pipelineTriggerTime,\n\t\tPositionID = positionID,\n\t\tPositionTitle = positionTitle,\n\t\tRoom = room,\n\t\tSurname = surname,\n\t\tWeekEndingDate = weekEndingDate,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsourceSql select(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nNotExistsInsert derive(AlterRowCondition = \"Insert\",\n\t\tRecordCreatedDate = PipelineTriggerTime) ~> Insert\nExistsUpdate derive(AlterRowCondition = \"Update\",\n\t\tRecordModifiedDate = PipelineTriggerTime) ~> Update\nNotExistsDelete derive(AlterRowCondition = \"Delete\",\n\t\tRecordModifiedDate = PipelineTriggerTime,\n\t\tRecordIsDeleted = true()) ~> Delete\nUpdate, Insert, Delete union(byName: true)~> UnionAlterRowCondition\nCastDateType2, FilterWeekEndingDate exists(Select2@OrganizationId == Select1@OrganizationId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsDelete\nSelect2 derive(PipelineTriggerTime = fromUTC(toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType2\nFilterWeekEndingDate, CastDateType2 exists(Select1@OrganizationId == Select2@OrganizationId\n\t&& Select1@EmployeeId == Select2@EmployeeId\n\t&& Select1@PayRunId == Select2@PayRunId\n\t&& Select1@PayItemId == Select2@PayItemId\n\t&& LineItemId == WageLineItemId\n\t&& Select1@Department == Select2@Department\n\t&& Select1@PositionTitle == Select2@PositionTitle\n\t&& CastDateType1@HoursOrADCode == Select2@HoursOrADCode\n\t&& Select1@HoursOrADCodeDesc == Select2@HoursOrADCodeDesc\n\t&& Select1@Level1Code == Select2@Level1Code\n\t&& Select1@Level2Code == Select2@Level2Code\n\t&& CastDateType1@WeekEndingDate == Select2@WeekEndingDate,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nFilterWeekEndingDate, CastDateType2 exists(Select1@OrganizationId == Select2@OrganizationId,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['OrganizationId','EmployeeId','PayRunId','PayslipId','PayItemId','WageLineItemId','Department','PositionTitle','Level1Code','Level2Code','HoursOrADCode','HoursOrADCodeDesc','WeekEndingDate'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportRostersWagesOutput/\", toString($pipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $pipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tAmount,\n\t\tDepartment,\n\t\tEmployeeId,\n\t\tFirstName,\n\t\tFullName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tLineItemId,\n\t\tPayItemId,\n\t\tPayRunId,\n\t\tOrganizationId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayrunGroup = UnionAlterRowCondition@PayrunGroup,\n\t\tPayslipId,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tPositionID,\n\t\tPositionTitle,\n\t\tRoom,\n\t\tSurname,\n\t\tWeekEndingDate,\n\t\tSourceFileName,\n\t\tAlterRowCondition,\n\t\tRecordModifiedDate,\n\t\tRecordCreatedDate,\n\t\tRecordId,\n\t\tRecordVersion,\n\t\tRecordIsDeleted,\n\t\tPipelineSourceFileName,\n\t\tWageLineItemId,\n\t\tPayRunGroup = UnionAlterRowCondition@PayRunGroup\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateDraftPayslips')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tbaseRate as double,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tnumberOfUnits as double,\n\t\torganizationId as string,\n\t\tpayDate as timestamp,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as timestamp,\n\t\tperiodStartDate as timestamp,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\trowUrlColumn: 'SourceFileName',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nSelect1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nsource1 select(mapColumn(\n\t\t{Base Rate} = baseRate,\n\t\t{Employment Type Code} = employmentTypeCode,\n\t\t{Employment Type Code Desc} = employmentTypeCodeDesc,\n\t\t{First Name} = firstName,\n\t\thoursOrADCode_definitiv = {hoursOrA/DCode},\n\t\thoursOrADCodeDesc_definitiv = {hoursOrA/DCodeDesc},\n\t\t{ID Number} = idNumber,\n\t\t{Level 1 Code} = level1Code,\n\t\t{Level 2 Code} = level2Code,\n\t\t{Number of Units} = numberOfUnits,\n\t\t{Pay Date} = payDate,\n\t\t{Pay Method Code} = payMethodCode,\n\t\t{Pay Method Code Desc} = payMethodCodeDesc,\n\t\t{Payslip Number} = payslipNumber,\n\t\t{Period Start Date} = periodStartDate,\n\t\t{Period Ending Date} = periodEndingDate,\n\t\t{Position Title} = positionTitle,\n\t\tRate = rate,\n\t\tSurname = surname,\n\t\tValue = value,\n\t\tpayslipId,\n\t\tpayRunId,\n\t\temployeeId,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['employeeId','payslipId','Employment Type Code','Level 1 Code','Level 2 Code','Period Start Date','Period Ending Date'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Base Rate},\n\t\t{Employment Type Code},\n\t\t{Employment Type Code Desc},\n\t\t{First Name},\n\t\thoursOrADCode_definitiv,\n\t\thoursOrADCodeDesc_definitiv,\n\t\t{ID Number},\n\t\t{Level 1 Code},\n\t\t{Level 2 Code},\n\t\t{Number of Units},\n\t\t{Pay Date},\n\t\t{Pay Method Code},\n\t\t{Pay Method Code Desc},\n\t\t{Payslip Number},\n\t\t{Period Start Date},\n\t\t{Period Ending Date},\n\t\t{Position Title},\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tpayslipId,\n\t\tpayRunId,\n\t\temployeeId,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateDraftPayslips_Definitiv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDraft"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "UnionAlterRowCondition"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "Update"
						},
						{
							"name": "Insert"
						}
					],
					"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDraft\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitiv\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\")) ~> AlterRow1\nUpdate, Insert union(byName: true)~> UnionAlterRowCondition\nSourceSqlDefinitiv, SourceSqlDraft exists(SourceSqlDefinitiv@RecordId == SourceSqlDraft@RecordId \r\n    && SourceSqlDefinitiv@RecordVersion != SourceSqlDraft@RecordVersion,\n\tnegate:false,\n\tbroadcast: 'left')~> ExistsUpdate\nSourceSqlDefinitiv, SourceSqlDraft exists(SourceSqlDefinitiv@RecordId == SourceSqlDraft@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nExistsUpdate derive(AlterRowCondition = \"Update\") ~> Update\nNotExistsInsert derive(AlterRowCondition = \"Insert\") ~> Insert\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['RecordId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportPayslipsErrorOutput/\", toString($PipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $PipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tRecordId,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tEmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayslipLineItemId,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tAlterRowCondition\n\t)) ~> SinkSql"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateDraftWages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tamount as double,\n\t\tdepartment as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\torganizationId as string,\n\t\tpayRunId as string,\n\t\tpayrunGroup as string,\n\t\tperiodEndDate as date,\n\t\tperiodStartDate as date,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as timestamp,\n\t\temployeeId as string,\n\t\tpayItemId as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\trowUrlColumn: 'SourceFileName',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nSelect1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nsource1 select(mapColumn(\n\t\tAmount = amount,\n\t\tDepartment = department,\n\t\tFirstName = firstName,\n\t\tFullName = fullName,\n\t\thoursOrADCode_definitiv = {hoursOrA/DCode},\n\t\thoursOrADCodeDesc_definitiv = {hoursOrA/DCodeDesc},\n\t\tID_Number = idNumber,\n\t\tPayrollEntity = level1Code,\n\t\tPayrollState = level2Code,\n\t\tPayrunGroup = payrunGroup,\n\t\tPositionID = positionID,\n\t\tPositionTitle = positionTitle,\n\t\tRoomName = room,\n\t\tSurname = surname,\n\t\tWeekEndingDate = weekEndingDate,\n\t\tperiodStartDate,\n\t\tperiodEndDate,\n\t\tpayItemId,\n\t\tpayslipId,\n\t\tpayRunId,\n\t\temployeeId,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['employeeId','payslipId','payItemId','WeekEndingDate','PayrollState','Department'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateEmployees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tdateOfBirth as date,\n\t\temailAddress as string,\n\t\temployeeId as string,\n\t\temployeeNumber as integer,\n\t\tfirstName as string,\n\t\tgender as string,\n\t\thiredDate as date,\n\t\tlastModified as string,\n\t\tmiddleName as string,\n\t\torganization as (name as string, organizationId as string),\n\t\torganizationId as string,\n\t\tpaymentAccounts as (bankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string), employeePaymentAccountId as string, paySplit as (amount as double, type as string), sortOrder as boolean)[],\n\t\tphoneNumbers as (type as string, value as string)[],\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpreferredName as string,\n\t\tstreetAddresses as (components as string, coordinate as string, countryCode as string, fullAddress as string, postCode as short, state as string, street as string, suburb as string, type as string)[],\n\t\tsuperAccounts as (ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, fundABN as long, fundESA as string, fundName as string, fundType as string, fundUSI as string, membershipNumber as string, smsfBankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string))[],\n\t\tsuperContributions as (amount as double, ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, employeeSuperannuationContributionId as string, minimumAmount as string, payItemDescription as string, payItemId as string, valueType as string)[],\n\t\tsurname as string,\n\t\ttaxDeclaration as (australianResidentForTaxPurposes as boolean, canEdit as boolean, claimDependantsOrSpecialTaxOffset as boolean, claimMedicareLevyVariation as boolean, claimSeniorsPensionersOffset as boolean, claimTaxFreeThreshold as boolean, effectiveDate as string, employeeId as string, employeeTaxDeclarationId as string, financialSupplementDebt as boolean, helpDebt as boolean, lodgementDate as string, lodgementStatus as string, signatureDate as string, signaturePresent as string, taxFileNumber as integer, taxFileNumberExemption as string, workingHolidayMaker as boolean),\n\t\ttitle as string,\n\t\tusername as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 select(mapColumn(\n\t\tdateOfBirth,\n\t\temailAddress,\n\t\temployeeId,\n\t\temployeeNumber,\n\t\tfirstName,\n\t\tgender,\n\t\thiredDate,\n\t\tlastModified,\n\t\tmiddleName,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpreferredName,\n\t\tsurname,\n\t\ttitle,\n\t\tusername,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateEmployeesEmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tbaseRate as double,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tnumberOfUnits as double,\n\t\torganizationId as string,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateOrganizations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "08_Organizations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tabn as string,\n\t\tacn as string,\n\t\tbeamTermsConfirmDate as string,\n\t\tbeamTermsConfirmUserId as string,\n\t\tbeamTermsConfirmUserName as string,\n\t\tbranchCode as string,\n\t\tcontactEmail as string,\n\t\tcontactFirstName as string,\n\t\tcontactPhone as string,\n\t\tcontactSurname as string,\n\t\tcontactTitle as string,\n\t\temployeeSupportEmail as string,\n\t\tfbtExempt as boolean,\n\t\tintermediary as string,\n\t\tlegalName as string,\n\t\tnotificationUserIds as string,\n\t\tnotifyLodgementSubmitters as boolean,\n\t\torganizationCode as string,\n\t\torganizationId as string,\n\t\treference as string,\n\t\tsoftwareProviderABN as string,\n\t\tsoftwareProviderName as string,\n\t\tsoftwareSubscriptionId as string,\n\t\tstreetAddress as string,\n\t\ttradingName as string,\n\t\twpn as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitiv\nSourceBlobDefinitiv sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adsl2_stnidoprodeastau100_csv/definitiv.Organizations',\n\ttransactionCommit: 'single',\n\treportSuccessOnError: false) ~> SinkSqlDefinitiv"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 foldDown(unroll(reportData, reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Flatten1\nFlatten1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['leaveApplicationId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		}
	]
}