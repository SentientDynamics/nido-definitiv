{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-nido-prod-eastau-100"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateEmployeesEmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tbaseRate as double,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tnumberOfUnits as double,\n\t\torganizationId as string,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 foldDown(unroll(reportData, reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Flatten1\nFlatten1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['leaveApplicationId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateReportingLeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\treportData as (employeeId as string, employeeNumber as integer, firstName as string, leaveEntitlementHours as double, leaveProRataHours as double, leaveTotalHours as double, leaveTypeId as string, leaveTypeName as string, primaryDepartmentCode as short, primaryDepartmentGlCode as string, primaryDepartmentName as string, primaryLocationCode as string, primaryLocationGlCode as string, primaryLocationName as string, primaryProjectCode as string, primaryProjectGlCode as string, primaryProjectName as string, primaryRoleCode as string, primaryRoleName as string, printName as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 foldDown(unroll(reportData, reportData),\n\tmapColumn(\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tleaveEntitlementHours = reportData.leaveEntitlementHours,\n\t\tleaveProRataHours = reportData.leaveProRataHours,\n\t\tleaveTotalHours = reportData.leaveTotalHours,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tprimaryDepartmentCode = reportData.primaryDepartmentCode,\n\t\tprimaryDepartmentGlCode = reportData.primaryDepartmentGlCode,\n\t\tprimaryDepartmentName = reportData.primaryDepartmentName,\n\t\tprimaryLocationCode = reportData.primaryLocationCode,\n\t\tprimaryLocationGlCode = reportData.primaryLocationGlCode,\n\t\tprimaryLocationName = reportData.primaryLocationName,\n\t\tprimaryProjectCode = reportData.primaryProjectCode,\n\t\tprimaryProjectGlCode = reportData.primaryProjectGlCode,\n\t\tprimaryProjectName = reportData.primaryProjectName,\n\t\tprimaryRoleCode = reportData.primaryRoleCode,\n\t\tprimaryRoleName = reportData.primaryRoleName,\n\t\tprintName = reportData.printName,\n\t\tsurname = reportData.surname,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Flatten1\nFlatten1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['employeeId','leaveTypeId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A3_Payslips_DraftStagingToDraft')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_A3_Payslips_DraftStagingToDraft",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_A3_Payslips_DraftStagingToDraft",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlDraftStagingPreceda": {},
									"SinkSqlDraftPreceda": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "StagingPrecedaPayslips"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A3_Timesheets_DraftStagingToDraft')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_A3_Payslips_DraftStagingToDraft",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_A3_Payslips_DraftStagingToDraft",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlDraftStagingPreceda": {},
									"SinkSqlDraftPreceda": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "StagingPrecedaPayslips"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B0_Payslips_BlobToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_B1_Payslips_ApiToDefinitiv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_Payslips_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {
										"ds_PipelineTriggerTime": "2022-02-24T02:35:58.9472761Z",
										"ds_PipelineRunId": "bef609c0-060d-4c9b-b6f2-20d73f3d06ed",
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
									},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": {
											"value": "@pipeline().parameters.SourceSqlSchema",
											"type": "Expression"
										},
										"ds_TableName": {
											"value": "@pipeline().parameters.SourceSqlTable",
											"type": "Expression"
										}
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": {
											"value": "@pipeline().parameters.SinkSqlSchema",
											"type": "Expression"
										},
										"ds_TableName": {
											"value": "@pipeline().parameters.SinkSqlTable",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"SourceSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportPayslipsE"
					},
					"SinkSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"SinkSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportPayslipsE"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B0_Timesheets_BlobToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_B2_Timesheets_ApiToDefinitiv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportTimesheets1",
								"type": "DataFlowReference",
								"parameters": {
									"pipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "'@{pipeline().TriggerName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceApi": {
										"ds_PipelineTriggerTime": "2022-01-25T00:18:17.611502Z",
										"ds_PipelineRunId": "187d99be-a307-4534-9acc-0a17fc03d0ab",
										"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
										"ds_Directory": "ds_adsl2_stnidoprodeastau100_json_input",
										"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
									},
									"sinkSql": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"varTimesheetStartDate": {
						"type": "String",
						"defaultValue": "2021-10-01"
					},
					"varTimesheetFinishDate": {
						"type": "String"
					},
					"varTimesheetDate": {
						"type": "String",
						"defaultValue": "2021-10-01"
					},
					"varTimesheetDatePlus1": {
						"type": "String",
						"defaultValue": "2021-10-01"
					},
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T03:45:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_OrgPayItems_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrganizations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, legalName from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrganizations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyToJson1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayItem.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayItem.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "Org.LegalName",
													"value": {
														"value": "@item().legalName",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayItem.PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "ls_adls2_stnidoprodeastau100",
													"type": "LinkedServiceReference"
												},
												"path": {
													"value": "@concat(\n    pipeline().globalParameters.global_adls2_FileSystem,\n    '/',\n    pipeline().globalParameters.global_adls2_LogDirectory\n)",
													"type": "Expression"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['payItemId']"
													},
													"sink": {
														"path": "payItemId"
													}
												},
												{
													"source": {
														"path": "[['description']"
													},
													"sink": {
														"path": "description"
													}
												},
												{
													"source": {
														"path": "[['unitOfMeasureId']"
													},
													"sink": {
														"path": "unitOfMeasureId"
													}
												},
												{
													"source": {
														"path": "[['type']"
													},
													"sink": {
														"path": "type"
													}
												},
												{
													"source": {
														"path": "[['category']"
													},
													"sink": {
														"path": "category"
													}
												},
												{
													"source": {
														"path": "[['exportCode']"
													},
													"sink": {
														"path": "exportCode"
													}
												},
												{
													"source": {
														"path": "[['glDebitCode']"
													},
													"sink": {
														"path": "glDebitCode"
													}
												},
												{
													"source": {
														"path": "[['glCreditCode']"
													},
													"sink": {
														"path": "glCreditCode"
													}
												},
												{
													"source": {
														"path": "[['organizationId']"
													},
													"sink": {
														"path": "organizationId"
													}
												},
												{
													"source": {
														"path": "[['isSystem']"
													},
													"sink": {
														"path": "isSystem"
													}
												},
												{
													"source": {
														"path": "[['hidden']"
													},
													"sink": {
														"path": "hidden"
													}
												},
												{
													"source": {
														"path": "[['showOnPayslip']"
													},
													"sink": {
														"path": "showOnPayslip"
													}
												},
												{
													"source": {
														"path": "[['payslipDisplayName']"
													},
													"sink": {
														"path": "payslipDisplayName"
													}
												},
												{
													"source": {
														"path": "[['thirdPartyPaymentEnabled']"
													},
													"sink": {
														"path": "thirdPartyPaymentEnabled"
													}
												},
												{
													"source": {
														"path": "[['deletedTime']"
													},
													"sink": {
														"path": "deletedTime"
													}
												},
												{
													"source": {
														"path": "[['deletedByUserId']"
													},
													"sink": {
														"path": "deletedByUserId"
													}
												},
												{
													"source": {
														"path": "[['atoCategory']"
													},
													"sink": {
														"path": "atoCategory"
													}
												},
												{
													"source": {
														"path": "[['superStreamContributionCategory']"
													},
													"sink": {
														"path": "superStreamContributionCategory"
													}
												},
												{
													"source": {
														"path": "[['isSuperable']"
													},
													"sink": {
														"path": "isSuperable"
													}
												},
												{
													"source": {
														"path": "[['isTaxable']"
													},
													"sink": {
														"path": "isTaxable"
													}
												},
												{
													"source": {
														"path": "[['includeInTotalPackage']"
													},
													"sink": {
														"path": "includeInTotalPackage"
													}
												},
												{
													"source": {
														"path": "[['includeInSalaryAndWages']"
													},
													"sink": {
														"path": "includeInSalaryAndWages"
													}
												},
												{
													"source": {
														"path": "[['specialTaxRate']"
													},
													"sink": {
														"path": "specialTaxRate"
													}
												},
												{
													"source": {
														"path": "[['costingStrategy']"
													},
													"sink": {
														"path": "costingStrategy"
													}
												},
												{
													"source": {
														"path": "[['proportionPeriodCostingPayItems'][0]"
													},
													"sink": {
														"path": "proportionPeriodCostingPayItems"
													}
												},
												{
													"source": {
														"path": "[['percentagePayItems'][0]"
													},
													"sink": {
														"path": "percentagePayItems"
													}
												},
												{
													"source": {
														"path": "[['isPercentage']"
													},
													"sink": {
														"path": "isPercentage"
													}
												},
												{
													"source": {
														"path": "[['deductionBankAccount']"
													},
													"sink": {
														"path": "deductionBankAccount"
													}
												},
												{
													"source": {
														"path": "[['rollupMode']"
													},
													"sink": {
														"path": "rollupMode"
													}
												},
												{
													"source": {
														"path": "[['onlyProcessWhenOtherEarningsExist']"
													},
													"sink": {
														"path": "onlyProcessWhenOtherEarningsExist"
													}
												},
												{
													"source": {
														"path": "[['isForeign']"
													},
													"sink": {
														"path": "isForeign"
													}
												},
												{
													"source": {
														"path": "[['isContractor']"
													},
													"sink": {
														"path": "isContractor"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['targetEntity']"
													},
													"sink": {
														"path": "customFields.targetEntity"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['dataType']"
													},
													"sink": {
														"path": "customFields.dataType"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['value']"
													},
													"sink": {
														"path": "customFields.value"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['name']"
													},
													"sink": {
														"path": "customFields.name"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['displayName']"
													},
													"sink": {
														"path": "customFields.displayName"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['description']"
													},
													"sink": {
														"path": "customFields.description"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['enabled']"
													},
													"sink": {
														"path": "customFields.enabled"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['global']"
													},
													"sink": {
														"path": "customFields.global"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['options'][0]"
													},
													"sink": {
														"path": "customFields.options"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['isMandatory']"
													},
													"sink": {
														"path": "customFields.isMandatory"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['order']"
													},
													"sink": {
														"path": "customFields.order"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['dateDriven']"
													},
													"sink": {
														"path": "customFields.dateDriven"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['timeBased']"
													},
													"sink": {
														"path": "customFields.timeBased"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['displayOnTimesheetSummary']"
													},
													"sink": {
														"path": "customFields.displayOnTimesheetSummary"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['preventMultipleEntries']"
													},
													"sink": {
														"path": "customFields.preventMultipleEntries"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['timePeriodMode']"
													},
													"sink": {
														"path": "customFields.timePeriodMode"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['inheritTimesheetPeriod']"
													},
													"sink": {
														"path": "customFields.inheritTimesheetPeriod"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['customFieldDisplayStatus']"
													},
													"sink": {
														"path": "customFields.customFieldDisplayStatus"
													}
												},
												{
													"source": {
														"path": "$['Org.OrganizationId']"
													},
													"sink": {
														"path": "$['Org.OrganizationId']"
													}
												},
												{
													"source": {
														"path": "$['OrgPayItem.PipelineTriggerTime']"
													},
													"sink": {
														"path": "$['OrgPayItem.PipelineTriggerTime']"
													}
												},
												{
													"source": {
														"path": "$['OrgPayItem.PipelineRunId']"
													},
													"sink": {
														"path": "$['OrgPayItem.PipelineRunId']"
													}
												},
												{
													"source": {
														"path": "$['Org.LegalName']"
													},
													"sink": {
														"path": "$['Org.LegalName']"
													}
												},
												{
													"source": {
														"path": "$['OrgPayItem.PipelineName']"
													},
													"sink": {
														"path": "$['OrgPayItem.PipelineName']"
													}
												}
											],
											"collectionReference": "$['payItems']"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/admin/company/', item().organizationId, '/pay-items')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_B1_OrgPayItems_ApiToDefintiv_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_OrgPayItems_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationPayItems"
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationPayItems"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "09_PayItems"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_OrgRosters_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organization"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson_RostersV3",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@variables('PipelineTriggerTime')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:10:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/organization/', item().organizationId, '/rostering-v3')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_FlattenOrgRosters_UpdateOrgRosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrganization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenOrgRosters_UpdateOrgRosters1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": "2022-01-25T00:18:17.611502Z",
										"ds_PipelineRunId": "187d99be-a307-4534-9acc-0a17fc03d0ab",
										"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
										"ds_Directory": "ds_adls2_stnidoprodeastau100_json_output",
										"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
									},
									"SourceSqlDefinitiv": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									},
									"SinkSqlDefinitiv": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineTriggerTime,pipeline().TriggerTime)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:05:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_Payslips_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrgPayRuns",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, payrunId, periodStart, periodEnd, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lookup_PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrgPayRuns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyApiToBlob",
									"description": "CustomReportPayslips",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "OrgPayRun.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodStartDate",
													"value": {
														"value": "@formatDateTime(item().periodStart, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodEndDate",
													"value": {
														"value": "@formatDateTime(item().periodEnd, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/EB7BCD04-6849-4B58-A786-1168A9AF829F?organizationId=', item().organizationId, '&selectedPayRunId=', item().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_B1_Payslips_ApiToDefintiv",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_TruncateInsertCustomReportPayslips",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"PipelineTriggerTime": {
										"value": "'@{pipeline().TriggerTime}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceApi": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "lookup_PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) from definitiv.CustomReportPayslipsD",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportPayslipsD"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "lookup_PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_B1_Payslips_ApiToDefintiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) from definitiv.CustomReportPayslipsE",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportPayslipsE"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "pl_monitoring_logic-nido-prod-eastau-100",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "lookup_PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-100",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"DataflowActivityOutput": {
									"value": "@activity('df_B1_Payslips_ApiToDefintiv').output",
									"type": "Expression"
								},
								"PreRowCount": {
									"value": "@activity('lookup_PreRowCount').output",
									"type": "Expression"
								},
								"PostRowCount": {
									"value": "@activity('lookup_PostRowCount').output",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_Payslips_ApiToDefinitiv_ARMW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrgPayRuns",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, payrunId, periodStart, periodEnd, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrgPayRuns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyApiToBlob",
									"description": "CustomReportPayslips",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "OrgPayRun.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodStartDate",
													"value": {
														"value": "@formatDateTime(item().periodStart, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodEndDate",
													"value": {
														"value": "@formatDateTime(item().periodEnd, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@variables('PipelineTriggerTime')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/EB7BCD04-6849-4B58-A786-1168A9AF829F?organizationId=', item().organizationId, '&selectedPayRunId=', item().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												},
												"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
												"ds_Directory": "ds_adsl2_stnidoprodeastau100_json"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_B1_Payslips_ApiToDefintiv",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_Payslips_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_B1_Payslips_ApiToDefintiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportPayslipsD"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportPayslipsD",
									"pipelineRunId": {
										"value": "@variables('PipelineRunId')",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@variables('PipelineTriggerTime')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MonitorPipeline",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_B1_Payslips_ApiToDefintiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('df_B1_Payslips_ApiToDefintiv').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_4",
								"type": "DatasetReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "@variables('PipelineTriggerTime')",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "@variables('PipelineRunId')",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_Timesheets_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup2').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "pl_B2_Timesheets_ApiToDefinitiv",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_A1_Timesheets_DboToArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceSqlSchema": {
												"value": "@pipeline().parameters.sourceSqlSchema",
												"type": "Expression"
											},
											"sourceSqlTable": {
												"value": "@pipeline().parameters.sourceSqlTable",
												"type": "Expression"
											},
											"sinkSqlSchema": {
												"value": "@pipeline().parameters.sinkSqlSchema",
												"type": "Expression"
											},
											"sinkSqlTable": {
												"value": "@pipeline().parameters.sinkSqlTable",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations where organizationCode = 'cms-pty-ltd'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "definitiv",
										"type": "Expression"
									},
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceApiSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sourceApiTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					},
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheetsD"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheetsD"
					},
					"sourceJsonSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sourceJsonTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					},
					"sinkJsonSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sinkJsonTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					},
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:05:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B2_Payslips_DefinitivToDraft1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_B2_Payslips_DefinitivToDraft",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B2_Payslips_DefinitivToDraft",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									},
									"SourceSqlDraftPayslip": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									},
									"SinkSqlDraftPreceda": {
										"ds_SchemaName": "draft",
										"ds_TableName": "Preceda_Payslip_2"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B3_Payslips_DedupeDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_B3_Payslips_DedupeDefinitiv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B3_Payslips_DedupeDefinitiv",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlDefinitivPayslips": {},
									"SinkSqlDraftPreceda": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T06:10:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_C1_Payslips_DraftReportViews')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_C1_Payslips_DraftReportViews",
						"description": "Sync changes.",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_C1_Payslips_DraftReportViews",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlPrecedaPayslip2": {
										"ds_SchemaName": "draft",
										"ds_TableName": "Preceda_Payslip_2"
									},
									"SourceSqlServiceList": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "ServiceList"
									},
									"SourceSqlPrecedaMap": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "Preceeda_Map"
									},
									"SourceSqlPreceedaPayCodes": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "Preceeda_Pay_Codes"
									},
									"SourceSqlDefinitivPayCodes": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "Definitiv_Pay_Codes"
									},
									"SinkSqlDraftPayslipReportView": {
										"ds_SchemaName": "draft",
										"ds_TableName": "ReportViewPayslips"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupAdfParameters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'LookupAdfParameters'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "adf",
									"ds_TableName": "Parameters"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachAdfParameter",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupAdfParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAdfParameters').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFromApiToDefinitivSchema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachDefinitivEmployee_EmploymentHistory",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDefinitivEmployees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDefinitivEmployees').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFromApiToDefinitivSchema_EmploymentHistory",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersEmployees",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "employeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersEmployees').output.value).SourceRelativeUrl, '{employeeId}', item().employeeId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": {
													"value": "@first(activity('LookupAdfParametersEmployees').output.value).SinkSchemaName",
													"type": "Expression"
												},
												"ds_TableName": {
													"value": "@first(activity('LookupAdfParametersEmployees').output.value).SinkTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LookupAdfParametersEmployees",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'ForEachDefinitivEmployee_EmploymentHistory'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": "adf",
												"ds_TableName": "Parameters"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyFromApiToDefinitivSchema_EmploymentHistory_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersEmployees",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "employeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersEmployees').output.value).SourceRelativeUrl, '{employeeId}', item().employeeId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LookupDefinitivEmployees",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachAdfParameter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select employeeId from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Employees"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LookupDefinitivOrganizations",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachAdfParameter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachDefinitivOrganization_LeaveApplications",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDefinitivOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDefinitivOrganizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupAdfParametersOrganizations_LeaveApplications",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'ForEachDefinitivOrganization_LeaveApplications'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": "adf",
												"ds_TableName": "Parameters"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyFromApiToDefinitivSchema_LeaveApplications",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersOrganizations_LeaveApplications",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersOrganizations_LeaveApplications').output.value).SourceRelativeUrl, '{orgId}', item().organizationId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachDefinitivOrganization_LeaveBalances",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDefinitivOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDefinitivOrganizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupAdfParametersOrganizations_LeaveBalances",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'ForEachDefinitivOrganization_LeaveApplications'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": "adf",
												"ds_TableName": "Parameters"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyFromApiToDefinitivSchema_LeaveBalances",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersOrganizations_LeaveBalances",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersOrganizations_LeaveBalances').output.value).SourceRelativeUrl, '{orgId}', item().organizationId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_FlattenDefinitivReportingArrays_LeaveApplications",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachDefinitivOrganization_LeaveApplications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenDefinitivReportingArrays",
								"type": "DataFlowReference",
								"parameters": {
									"sourceWildcardPathName": {
										"value": "'@{'ReportingLeaveApplications'}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_FlattenReportingArrays_LeaveBalances",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachDefinitivOrganization_LeaveBalances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenDefinitivReportingArrays",
								"type": "DataFlowReference",
								"parameters": {
									"sourceWildcardPathName": {
										"value": "'@{'ReportingLeaveBalances'}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T00:01:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportRosters_1_0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lookup_PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "pl_CopyFromApiToDefinitivSchema_CustomReportRosters_1_1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_CopyFromApiToDefinitivSchema_CustomReportRosters_1_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"paramOrganizationId": {
												"value": "@item().organizationId",
												"type": "Expression"
											},
											"TriggeredByPipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"TriggeredByPipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_UpdateCustomReportRosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrganization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportRosters",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().parameters.ExecutePipelineName",
											"type": "Expression"
										}
									},
									"SinkSqlDefintiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportRostersD"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "pl_monitoring_logic-nido-prod-eastau-100",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "lookup_PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-100",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"DataflowActivityOutput": {
									"value": "@activity('df_UpdateCustomReportRosters').output",
									"type": "Expression"
								},
								"PreRowCount": {
									"value": "@activity('lookup_PreRowCount').output",
									"type": "Expression"
								},
								"PostRowCount": {
									"value": "@activity('lookup_PostRowCount').output",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lookup_PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) from definitiv.CustomReportRostersD",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportRostersD"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "lookup_PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_UpdateCustomReportRosters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) from definitiv.CustomReportRostersD",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportRostersD"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ExecutePipelineName": {
						"type": "string",
						"defaultValue": "pl_CopyFromApiToDefinitivSchema_CustomReportRosters_1_1"
					}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:04:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportRosters_2_0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RosterStartDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRosterStartDate",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), -7), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RosterFinishDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRosterFinishDate",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(),28), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToJson_CustomReportRosters_copy2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "RosterStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "RosterFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "CustomReportRosters.PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "CustomReportRosters.PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": "00:10:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": {
										"value": "@concat(\n'/api/custom-reports/BE1BFE92-8295-4F80-A36C-1A63608C1433?organizationId=',\n'aaaaaaaa-bbbb-cccc-dddd-000000000000',\n'&startDate=', \nformatDateTime(variables('varRosterStartDate'), 'yyyy-MM-dd'),\n'&endDate=', \nformatDateTime(variables('varRosterFinishDate'), 'yyyy-MM-dd')\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_UpdateCustomReportRosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyToJson_CustomReportRosters_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportRosters",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SinkSqlDefintiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportRostersD"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varRosterStartDate": {
						"type": "String"
					},
					"varRosterFinishDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportRosters_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_UpdateCusomReportRosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportRosters",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": "2022-03-28T04:59:49.6141553Z",
										"ds_PipelineRunId": {
											"value": "f2eee8dc-e3ab-4c56-b68e-58bef341aabe",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "pl_CopyFromApiToDefinitivSchema_CustomReportRosters",
											"type": "Expression"
										}
									},
									"SinkSqlDefintiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportRostersD"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportTimesheets_2_0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TimesheetStartDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varTimesheetStartDate",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), -28), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TimesheetFinishDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varTimesheetFinishDate",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), 7), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToJson_CustomReportRosters_copy2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TimesheetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "TimesheetFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTimesheetStartDate",
										"value": {
											"value": "@variables('varTimesheetStartDate')",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTimesheetEndDate",
										"value": {
											"value": "@variables('varTimesheetFinishDate')",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": "00:10:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": {
										"value": "@concat(\n'/api/custom-reports/9B394863-2B5E-4704-8AD4-82352C1111C1?organizationId=',\n'aaaaaaaa-bbbb-cccc-dddd-000000000000',\n'&startDate=', \nformatDateTime(variables('varTimesheetStartDate'), 'yyyy-MM-dd'),\n'&endDate=', \nformatDateTime(variables('varTimesheetFinishDate'), 'yyyy-MM-dd')\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_UpdateCustomReportRosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyToJson_CustomReportRosters_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportTimesheets_2_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SinkSqlDefintiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportTimesheetsD"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varTimesheetStartDate": {
						"type": "String"
					},
					"varTimesheetFinishDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": []
		}
	]
}