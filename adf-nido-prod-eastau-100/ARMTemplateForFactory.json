{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-nido-prod-eastau-100"
		},
		"ls_sql_tnk001_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_tnk001'"
		},
		"ls_adls2_stnidoprodeastau100_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stnidoprodeastau100.dfs.core.windows.net/"
		},
		"ls_keyvault_kvnidoprodeastau100_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-nido-prod-eastau-100.vault.azure.net/"
		},
		"ls_rest_definitiv_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().sourceBaseUrl}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_01_Payslips_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_B1_Payslips_ApiToDefinitiv",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_B1_OrgPayRuns_ApiToDefinitiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_B1_Payslips_ApiToDefinitiv",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MasterPipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"MasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pl_B2_Payslips_DefinitivToDraft1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_B1_Payslips_ApiToDefinitiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_B2_Payslips_DefinitivToDraft1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MasterPipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"MasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pl_C1_Payslips_DraftReportViews",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_B2_Payslips_DefinitivToDraft1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_C1_Payslips_DraftReportViews",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MasterPipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"MasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pl_B1_OrgPayRuns_ApiToDefinitiv",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_B1_OrgPayRuns_ApiToDefinitiv",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"MasterPipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"MasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T01:50:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_B1_Payslips_ApiToDefinitiv')]",
				"[concat(variables('factoryId'), '/pipelines/pl_B2_Payslips_DefinitivToDraft1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_C1_Payslips_DraftReportViews')]",
				"[concat(variables('factoryId'), '/pipelines/pl_B1_OrgPayRuns_ApiToDefinitiv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A1_Payslips_DboToArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToArchive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID Number",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "ID Number",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "First Name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "First Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Surname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Position Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Position Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Level 2 Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Level 2 Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Payslip Number",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Payslip Number",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Pay Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Pay Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Period Start Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Period Start Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Period Ending Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Period Ending Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Hours or A/D Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Hours or A/D Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Hours or A/D Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Hours or A/D Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Number of Units",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Number of Units",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Department Code Description",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Department Code Description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Level 1 Description",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Level 1 Description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Level 1 Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Level 1 Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Level 1 Code Description",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Level 1 Code Description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date of Birth",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date of Birth",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Adj Serv Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Adj Serv Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Term Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Term Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Paid Up To Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Paid Up To Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Org Unit Id",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Org Unit Id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Org Unit Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Org Unit Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Org Unit Short Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Org Unit Short Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Base Rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Base Rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employment Type Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employment Type Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Gender Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Gender Desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Term Reason Description",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Term Reason Description",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Method Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Method Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Method Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Method Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "projectCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "projectCode",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "archive"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-15T00:45:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A1_Timesheets_DboToArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToArchive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveFull"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "archive"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveFull"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-17T01:49:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A2_Payslips_ArchiveToDraftStaging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyArchiveToStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "RecordCreatedDate",
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')",
											"type": "Expression"
										}
									},
									{
										"name": "RecordModifiedDate",
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RecordCreatedDate"
										},
										"sink": {
											"name": "RecordCreatedDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "RecordModifiedDate"
										},
										"sink": {
											"name": "RecordModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "PipelineRunId"
										},
										"sink": {
											"name": "PipelineRunId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "PipelineTriggerTime"
										},
										"sink": {
											"name": "PipelineTriggerTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "Payslip Number",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PayslipNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Base Rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "BaseRate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "DepartmentCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Employment Type Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmploymentTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Employment Type Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmploymentTypeCodeDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "First Name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Hours or A/D Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "HoursOrADCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Hours or A/D Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "HoursOrADCodeDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ID Number",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "IdNumber",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Level 1 Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Level1Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Level 2 Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Level2Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Number of Units",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "NumberOfUnits",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "PayDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Pay Method Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PayMethodCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Pay Method Code Desc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PayMethodCodeDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Period Ending Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "PeriodEndingDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Period Start Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "PeriodStartDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Position Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PositionTitle",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "projectCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ProjectCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Rate",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Rate",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Surname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "archive"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "StagingPrecedaPayslips"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-16T04:59:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A2_Timesheets_ArchiveToDraftStaging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyArchiveToStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "RecordCreatedDate",
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')",
											"type": "Expression"
										}
									},
									{
										"name": "RecordModifiedDate",
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RecordCreatedDate"
										},
										"sink": {
											"name": "RecordCreatedDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "RecordModifiedDate"
										},
										"sink": {
											"name": "RecordModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "PipelineRunId"
										},
										"sink": {
											"name": "PipelineRunId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "PipelineTriggerTime"
										},
										"sink": {
											"name": "PipelineTriggerTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RosterName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ApprovalStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CentreCostCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "EmployeeRefNo",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmploymentType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RoomCostCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TotalCost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TotalHours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WorkType",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "archive"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveFull"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "StagingEmpliveTimesheets"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-17T21:51:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A3_Payslips_DraftStagingToDraft')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_A3_Payslips_DraftStagingToDraft",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_A3_Payslips_DraftStagingToDraft",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlDraftStagingPreceda": {},
									"SinkSqlDraftPreceda": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "StagingPrecedaPayslips"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_A3_Payslips_DraftStagingToDraft')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_A3_Timesheets_DraftStagingToDraft')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_A3_Payslips_DraftStagingToDraft",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_A3_Payslips_DraftStagingToDraft",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlDraftStagingPreceda": {},
									"SinkSqlDraftPreceda": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "StagingPrecedaPayslips"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_A3_Payslips_DraftStagingToDraft')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B0_Payslips_BlobToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_B1_Payslips_ApiToDefinitiv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_Payslips_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {
										"ds_PipelineTriggerTime": "2022-02-24T02:35:58.9472761Z",
										"ds_PipelineRunId": "bef609c0-060d-4c9b-b6f2-20d73f3d06ed",
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
									},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": {
											"value": "@pipeline().parameters.SourceSqlSchema",
											"type": "Expression"
										},
										"ds_TableName": {
											"value": "@pipeline().parameters.SourceSqlTable",
											"type": "Expression"
										}
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": {
											"value": "@pipeline().parameters.SinkSqlSchema",
											"type": "Expression"
										},
										"ds_TableName": {
											"value": "@pipeline().parameters.SinkSqlTable",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"SourceSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportPayslipsE"
					},
					"SinkSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"SinkSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportPayslipsE"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_B1_Payslips_ApiToDefinitiv')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B0_Timesheets_BlobToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_B2_Timesheets_ApiToDefinitiv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportTimesheets1",
								"type": "DataFlowReference",
								"parameters": {
									"pipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "'@{pipeline().TriggerName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceApi": {
										"ds_PipelineTriggerTime": "2022-01-25T00:18:17.611502Z",
										"ds_PipelineRunId": "187d99be-a307-4534-9acc-0a17fc03d0ab",
										"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
										"ds_Directory": "ds_adsl2_stnidoprodeastau100_json_input",
										"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
									},
									"sinkSql": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"varTimesheetStartDate": {
						"type": "String",
						"defaultValue": "2021-10-01"
					},
					"varTimesheetFinishDate": {
						"type": "String"
					},
					"varTimesheetDate": {
						"type": "String",
						"defaultValue": "2021-10-01"
					},
					"varTimesheetDatePlus1": {
						"type": "String",
						"defaultValue": "2021-10-01"
					},
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T03:45:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_UpdateCusomReportTimesheets1')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_OrgPayItems_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrganizations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, legalName from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrganizations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyToJson1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayItem.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayItem.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "Org.LegalName",
													"value": {
														"value": "@item().legalName",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayItem.PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "ls_adls2_stnidoprodeastau100",
													"type": "LinkedServiceReference"
												},
												"path": {
													"value": "@concat(\n    pipeline().globalParameters.global_adls2_FileSystem,\n    '/',\n    pipeline().globalParameters.global_adls2_LogDirectory\n)",
													"type": "Expression"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['payItemId']"
													},
													"sink": {
														"path": "payItemId"
													}
												},
												{
													"source": {
														"path": "[['description']"
													},
													"sink": {
														"path": "description"
													}
												},
												{
													"source": {
														"path": "[['unitOfMeasureId']"
													},
													"sink": {
														"path": "unitOfMeasureId"
													}
												},
												{
													"source": {
														"path": "[['type']"
													},
													"sink": {
														"path": "type"
													}
												},
												{
													"source": {
														"path": "[['category']"
													},
													"sink": {
														"path": "category"
													}
												},
												{
													"source": {
														"path": "[['exportCode']"
													},
													"sink": {
														"path": "exportCode"
													}
												},
												{
													"source": {
														"path": "[['glDebitCode']"
													},
													"sink": {
														"path": "glDebitCode"
													}
												},
												{
													"source": {
														"path": "[['glCreditCode']"
													},
													"sink": {
														"path": "glCreditCode"
													}
												},
												{
													"source": {
														"path": "[['organizationId']"
													},
													"sink": {
														"path": "organizationId"
													}
												},
												{
													"source": {
														"path": "[['isSystem']"
													},
													"sink": {
														"path": "isSystem"
													}
												},
												{
													"source": {
														"path": "[['hidden']"
													},
													"sink": {
														"path": "hidden"
													}
												},
												{
													"source": {
														"path": "[['showOnPayslip']"
													},
													"sink": {
														"path": "showOnPayslip"
													}
												},
												{
													"source": {
														"path": "[['payslipDisplayName']"
													},
													"sink": {
														"path": "payslipDisplayName"
													}
												},
												{
													"source": {
														"path": "[['thirdPartyPaymentEnabled']"
													},
													"sink": {
														"path": "thirdPartyPaymentEnabled"
													}
												},
												{
													"source": {
														"path": "[['deletedTime']"
													},
													"sink": {
														"path": "deletedTime"
													}
												},
												{
													"source": {
														"path": "[['deletedByUserId']"
													},
													"sink": {
														"path": "deletedByUserId"
													}
												},
												{
													"source": {
														"path": "[['atoCategory']"
													},
													"sink": {
														"path": "atoCategory"
													}
												},
												{
													"source": {
														"path": "[['superStreamContributionCategory']"
													},
													"sink": {
														"path": "superStreamContributionCategory"
													}
												},
												{
													"source": {
														"path": "[['isSuperable']"
													},
													"sink": {
														"path": "isSuperable"
													}
												},
												{
													"source": {
														"path": "[['isTaxable']"
													},
													"sink": {
														"path": "isTaxable"
													}
												},
												{
													"source": {
														"path": "[['includeInTotalPackage']"
													},
													"sink": {
														"path": "includeInTotalPackage"
													}
												},
												{
													"source": {
														"path": "[['includeInSalaryAndWages']"
													},
													"sink": {
														"path": "includeInSalaryAndWages"
													}
												},
												{
													"source": {
														"path": "[['specialTaxRate']"
													},
													"sink": {
														"path": "specialTaxRate"
													}
												},
												{
													"source": {
														"path": "[['costingStrategy']"
													},
													"sink": {
														"path": "costingStrategy"
													}
												},
												{
													"source": {
														"path": "[['proportionPeriodCostingPayItems'][0]"
													},
													"sink": {
														"path": "proportionPeriodCostingPayItems"
													}
												},
												{
													"source": {
														"path": "[['percentagePayItems'][0]"
													},
													"sink": {
														"path": "percentagePayItems"
													}
												},
												{
													"source": {
														"path": "[['isPercentage']"
													},
													"sink": {
														"path": "isPercentage"
													}
												},
												{
													"source": {
														"path": "[['deductionBankAccount']"
													},
													"sink": {
														"path": "deductionBankAccount"
													}
												},
												{
													"source": {
														"path": "[['rollupMode']"
													},
													"sink": {
														"path": "rollupMode"
													}
												},
												{
													"source": {
														"path": "[['onlyProcessWhenOtherEarningsExist']"
													},
													"sink": {
														"path": "onlyProcessWhenOtherEarningsExist"
													}
												},
												{
													"source": {
														"path": "[['isForeign']"
													},
													"sink": {
														"path": "isForeign"
													}
												},
												{
													"source": {
														"path": "[['isContractor']"
													},
													"sink": {
														"path": "isContractor"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['targetEntity']"
													},
													"sink": {
														"path": "customFields.targetEntity"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['dataType']"
													},
													"sink": {
														"path": "customFields.dataType"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['value']"
													},
													"sink": {
														"path": "customFields.value"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['name']"
													},
													"sink": {
														"path": "customFields.name"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['displayName']"
													},
													"sink": {
														"path": "customFields.displayName"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['description']"
													},
													"sink": {
														"path": "customFields.description"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['enabled']"
													},
													"sink": {
														"path": "customFields.enabled"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['global']"
													},
													"sink": {
														"path": "customFields.global"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['options'][0]"
													},
													"sink": {
														"path": "customFields.options"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['isMandatory']"
													},
													"sink": {
														"path": "customFields.isMandatory"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['order']"
													},
													"sink": {
														"path": "customFields.order"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['dateDriven']"
													},
													"sink": {
														"path": "customFields.dateDriven"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['timeBased']"
													},
													"sink": {
														"path": "customFields.timeBased"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['displayOnTimesheetSummary']"
													},
													"sink": {
														"path": "customFields.displayOnTimesheetSummary"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['preventMultipleEntries']"
													},
													"sink": {
														"path": "customFields.preventMultipleEntries"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['timePeriodMode']"
													},
													"sink": {
														"path": "customFields.timePeriodMode"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['inheritTimesheetPeriod']"
													},
													"sink": {
														"path": "customFields.inheritTimesheetPeriod"
													}
												},
												{
													"source": {
														"path": "[['customFields'][0]['customFieldDisplayStatus']"
													},
													"sink": {
														"path": "customFields.customFieldDisplayStatus"
													}
												},
												{
													"source": {
														"path": "$['Org.OrganizationId']"
													},
													"sink": {
														"path": "$['Org.OrganizationId']"
													}
												},
												{
													"source": {
														"path": "$['OrgPayItem.PipelineTriggerTime']"
													},
													"sink": {
														"path": "$['OrgPayItem.PipelineTriggerTime']"
													}
												},
												{
													"source": {
														"path": "$['OrgPayItem.PipelineRunId']"
													},
													"sink": {
														"path": "$['OrgPayItem.PipelineRunId']"
													}
												},
												{
													"source": {
														"path": "$['Org.LegalName']"
													},
													"sink": {
														"path": "$['Org.LegalName']"
													}
												},
												{
													"source": {
														"path": "$['OrgPayItem.PipelineName']"
													},
													"sink": {
														"path": "$['OrgPayItem.PipelineName']"
													}
												}
											],
											"collectionReference": "$['payItems']"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/admin/company/', item().organizationId, '/pay-items')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_B1_OrgPayItems_ApiToDefintiv_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_OrgPayItems_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationPayItems"
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationPayItems"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "09_PayItems"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_B1_OrgPayItems_ApiToDefinitiv')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_OrgPayRuns_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrganizations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, legalName from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrganizations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyToJson1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "Org.LegalName",
													"value": {
														"value": "@item().legalName",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "ls_adls2_stnidoprodeastau100",
													"type": "LinkedServiceReference"
												},
												"path": {
													"value": "@concat(\n    pipeline().globalParameters.global_adls2_FileSystem,\n    '/',\n    pipeline().globalParameters.global_adls2_LogDirectory\n)",
													"type": "Expression"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['payRunId']"
													},
													"sink": {
														"path": "payRunId"
													}
												},
												{
													"source": {
														"path": "[['runNumber']"
													},
													"sink": {
														"path": "runNumber"
													}
												},
												{
													"source": {
														"path": "[['status']"
													},
													"sink": {
														"path": "status"
													}
												},
												{
													"source": {
														"path": "[['payslipGenerationStatus']"
													},
													"sink": {
														"path": "payslipGenerationStatus"
													}
												},
												{
													"source": {
														"path": "[['lodgementStatus']"
													},
													"sink": {
														"path": "lodgementStatus"
													}
												},
												{
													"source": {
														"path": "[['eofyLodgementStatus']"
													},
													"sink": {
														"path": "eofyLodgementStatus"
													}
												},
												{
													"source": {
														"path": "[['type']"
													},
													"sink": {
														"path": "type"
													}
												},
												{
													"source": {
														"path": "[['dateOpened']"
													},
													"sink": {
														"path": "dateOpened"
													}
												},
												{
													"source": {
														"path": "[['dateLastCalculated']"
													},
													"sink": {
														"path": "dateLastCalculated"
													}
												},
												{
													"source": {
														"path": "[['datePublished']"
													},
													"sink": {
														"path": "datePublished"
													}
												},
												{
													"source": {
														"path": "[['periodStart']"
													},
													"sink": {
														"path": "periodStart"
													}
												},
												{
													"source": {
														"path": "[['periodEnd']"
													},
													"sink": {
														"path": "periodEnd"
													}
												},
												{
													"source": {
														"path": "[['paymentDate']"
													},
													"sink": {
														"path": "paymentDate"
													}
												},
												{
													"source": {
														"path": "[['superannuationPaymentDate']"
													},
													"sink": {
														"path": "superannuationPaymentDate"
													}
												},
												{
													"source": {
														"path": "[['initiatingUserId']"
													},
													"sink": {
														"path": "initiatingUserId"
													}
												},
												{
													"source": {
														"path": "[['publishingUserId']"
													},
													"sink": {
														"path": "publishingUserId"
													}
												},
												{
													"source": {
														"path": "[['initiatingUserName']"
													},
													"sink": {
														"path": "initiatingUserName"
													}
												},
												{
													"source": {
														"path": "[['publishingUserName']"
													},
													"sink": {
														"path": "publishingUserName"
													}
												},
												{
													"source": {
														"path": "[['employeeCount']"
													},
													"sink": {
														"path": "employeeCount"
													}
												},
												{
													"source": {
														"path": "[['notes']"
													},
													"sink": {
														"path": "notes"
													}
												},
												{
													"source": {
														"path": "[['payCalendarId']"
													},
													"sink": {
														"path": "payCalendarId"
													}
												},
												{
													"source": {
														"path": "[['payCalendarName']"
													},
													"sink": {
														"path": "payCalendarName"
													}
												},
												{
													"source": {
														"path": "[['financialYearStartDate']"
													},
													"sink": {
														"path": "financialYearStartDate"
													}
												},
												{
													"source": {
														"path": "[['financialYearEndDate']"
													},
													"sink": {
														"path": "financialYearEndDate"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['payCalendarId']"
													},
													"sink": {
														"path": "PayCalendar.payCalendarId"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['description']"
													},
													"sink": {
														"path": "PayCalendar.description"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['weeklyFactorEquation']"
													},
													"sink": {
														"path": "PayCalendar.weeklyFactorEquation"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['weeklyFactor']"
													},
													"sink": {
														"path": "PayCalendar.weeklyFactor"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['period']"
													},
													"sink": {
														"path": "PayCalendar.period"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['periodStartDate']"
													},
													"sink": {
														"path": "PayCalendar.periodStartDate"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['proRataMode']"
													},
													"sink": {
														"path": "PayCalendar.proRataMode"
													}
												},
												{
													"source": {
														"path": "$['payCalendars'][0]['atoLodgementsEnabled']"
													},
													"sink": {
														"path": "PayCalendar.atoLodgementsEnabled"
													}
												},
												{
													"source": {
														"path": "$['currentFinancialYearStartDate']"
													},
													"sink": {
														"path": "currentFinancialYearStartDate"
													}
												},
												{
													"source": {
														"path": "$['currentFinancialYearEndDate']"
													},
													"sink": {
														"path": "currentFinancialYearEndDate"
													}
												},
												{
													"source": {
														"path": "$['Org.OrganizationId']"
													},
													"sink": {
														"path": "Org.OrganizationId"
													}
												},
												{
													"source": {
														"path": "$['OrgPayRun.PipelineTriggerTime']"
													},
													"sink": {
														"path": "OrgPayRun.PipelineTriggerTime"
													}
												},
												{
													"source": {
														"path": "$['OrgPayRun.PipelineRunId']"
													},
													"sink": {
														"path": "OrgPayRun.PipelineRunId"
													}
												},
												{
													"source": {
														"path": "$['Org.LegalName']"
													},
													"sink": {
														"path": "Org.LegalName"
													}
												},
												{
													"source": {
														"path": "$['OrgPayRun.PipelineName']"
													},
													"sink": {
														"path": "OrgPayRun.PipelineName"
													}
												}
											],
											"collectionReference": "$['payRuns']"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/company/', item().organizationId, '/pay-runs')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_FlattenPayRuns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenOrgPayRuns_UpdateOrgPayRuns",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayRuns": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SinkSqlDefinitiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationPayRuns"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_FlattenPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "OrganizationPayRuns",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": "@pipeline().TriggerTime"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "07_PayRuns"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_FlattenOrgPayRuns_UpdateOrgPayRuns')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_OrgRosters_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organization"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson_RostersV3",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@variables('PipelineTriggerTime')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:10:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/organization/', item().organizationId, '/rostering-v3')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_FlattenOrgRosters_UpdateOrgRosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrganization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenOrgRosters_UpdateOrgRosters1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": "2022-01-25T00:18:17.611502Z",
										"ds_PipelineRunId": "187d99be-a307-4534-9acc-0a17fc03d0ab",
										"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
										"ds_Directory": "ds_adls2_stnidoprodeastau100_json_output",
										"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
									},
									"SourceSqlDefinitiv": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									},
									"SinkSqlDefinitiv": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineTriggerTime,pipeline().TriggerTime)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:05:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_FlattenOrgRosters_UpdateOrgRosters1')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_Payslips_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrgPayRuns",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, payrunId, periodStart, periodEnd, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrgPayRuns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyApiToBlob",
									"description": "CustomReportPayslips",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "OrgPayRun.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodStartDate",
													"value": {
														"value": "@formatDateTime(item().periodStart, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodEndDate",
													"value": {
														"value": "@formatDateTime(item().periodEnd, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/EB7BCD04-6849-4B58-A786-1168A9AF829F?organizationId=', item().organizationId, '&selectedPayRunId=', item().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_B1_Payslips_ApiToDefintiv",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_Payslips_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_B1_Payslips_ApiToDefintiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportPayslipsE"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportPayslipsE",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_B1_Payslips_ApiToDefinitiv')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_Payslips_ApiToDefinitiv_ARMW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOrgPayRuns",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, payrunId, periodStart, periodEnd, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupOrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupOrgPayRuns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyApiToBlob",
									"description": "CustomReportPayslips",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "OrgPayRun.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodStartDate",
													"value": {
														"value": "@formatDateTime(item().periodStart, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "OrgPayRun.PeriodEndDate",
													"value": {
														"value": "@formatDateTime(item().periodEnd, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@variables('PipelineTriggerTime')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/EB7BCD04-6849-4B58-A786-1168A9AF829F?organizationId=', item().organizationId, '&selectedPayRunId=', item().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												},
												"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
												"ds_Directory": "ds_adsl2_stnidoprodeastau100_json"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_B1_Payslips_ApiToDefintiv",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B1_Payslips_ApiToDefinitiv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayslips": {},
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									},
									"SinkSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_B1_Payslips_ApiToDefintiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportPayslipsD"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportPayslipsD",
									"pipelineRunId": {
										"value": "@variables('PipelineRunId')",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@variables('PipelineTriggerTime')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MonitorPipeline",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_B1_Payslips_ApiToDefintiv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('df_B1_Payslips_ApiToDefintiv').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_4",
								"type": "DatasetReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "@variables('PipelineTriggerTime')",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "@variables('PipelineRunId')",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_B1_Payslips_ApiToDefinitiv')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl2_stnidoprodeastau100_json_3')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl2_stnidoprodeastau100_json_4')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B1_Timesheets_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup2').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "pl_B2_Timesheets_ApiToDefinitiv",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_A1_Timesheets_DboToArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceSqlSchema": {
												"value": "@pipeline().parameters.sourceSqlSchema",
												"type": "Expression"
											},
											"sourceSqlTable": {
												"value": "@pipeline().parameters.sourceSqlTable",
												"type": "Expression"
											},
											"sinkSqlSchema": {
												"value": "@pipeline().parameters.sinkSqlSchema",
												"type": "Expression"
											},
											"sinkSqlTable": {
												"value": "@pipeline().parameters.sinkSqlTable",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations where organizationCode = 'cms-pty-ltd'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "definitiv",
										"type": "Expression"
									},
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceApiSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sourceApiTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					},
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheetsD"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheetsD"
					},
					"sourceJsonSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sourceJsonTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					},
					"sinkJsonSchema": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"sinkJsonTable": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					},
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:05:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/pipelines/pl_A1_Timesheets_DboToArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B2_Payslips_DefinitivToDraft1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_B2_Payslips_DefinitivToDraft",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B2_Payslips_DefinitivToDraft",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceSqlDefinitivPayslips": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportPayslipsE"
									},
									"SourceSqlDraftPayslip": {
										"ds_SchemaName": "adf",
										"ds_TableName": "Parameters"
									},
									"SinkSqlDraftPreceda": {
										"ds_SchemaName": "draft",
										"ds_TableName": "Preceda_Payslip_2"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_B2_Payslips_DefinitivToDraft')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_B3_Payslips_DedupeDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "df_B3_Payslips_DedupeDefinitiv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_B3_Payslips_DedupeDefinitiv",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlDefinitivPayslips": {},
									"SinkSqlDraftPreceda": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T06:10:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_B3_Payslips_DedupeDefinitiv')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_C1_Payslips_DraftReportViews')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_C1_Payslips_DraftReportViews",
						"description": "Sync changes.",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_C1_Payslips_DraftReportViews",
								"type": "DataFlowReference",
								"parameters": {
									"PipelineRunId": {
										"value": "'@{variables('PipelineRunId')}'",
										"type": "Expression"
									},
									"PipelineTriggerTime": {
										"value": "'@{variables('PipelineTriggerTime')}'",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "'@{pipeline().Pipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSqlPrecedaPayslip2": {
										"ds_SchemaName": "draft",
										"ds_TableName": "Preceda_Payslip_2"
									},
									"SourceSqlServiceList": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "ServiceList"
									},
									"SourceSqlPrecedaMap": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "Preceeda_Map"
									},
									"SourceSqlPreceedaPayCodes": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "Preceeda_Pay_Codes"
									},
									"SourceSqlDefinitivPayCodes": {
										"ds_SchemaName": "dbo",
										"ds_TableName": "Definitiv_Pay_Codes"
									},
									"SinkSqlDraftPayslipReportView": {
										"ds_SchemaName": "draft",
										"ds_TableName": "ReportViewPayslips"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T01:04:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_C1_Payslips_DraftReportViews')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyArchiveToDraftSchema_Wages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyArchiveToStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "RecordCreatedDate",
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')",
											"type": "Expression"
										}
									},
									{
										"name": "RecordModifiedDate",
										"value": {
											"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RecordCreatedDate"
										},
										"sink": {
											"name": "RecordCreatedDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "RecordModifiedDate"
										},
										"sink": {
											"name": "RecordModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "PipelineRunId"
										},
										"sink": {
											"name": "PipelineRunId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "PipelineTriggerTime"
										},
										"sink": {
											"name": "PipelineTriggerTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FullName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FullName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ID_Number",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "IdNumber",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PayrunGroup",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PayRunGroup",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PositionID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PositionID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PositionTitle",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PositionTitle",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RoomName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Surname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WeekEndingDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "WeekEndingDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "archive"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "PreceedaWages"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "StagingPrecedaWages"
					}
				},
				"folder": {
					"name": "02_Wages"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupAdfParameters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'LookupAdfParameters'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "adf",
									"ds_TableName": "Parameters"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachAdfParameter",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupAdfParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupAdfParameters').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFromApiToDefinitivSchema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachDefinitivEmployee_EmploymentHistory",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDefinitivEmployees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDefinitivEmployees').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFromApiToDefinitivSchema_EmploymentHistory",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersEmployees",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "employeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersEmployees').output.value).SourceRelativeUrl, '{employeeId}', item().employeeId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": {
													"value": "@first(activity('LookupAdfParametersEmployees').output.value).SinkSchemaName",
													"type": "Expression"
												},
												"ds_TableName": {
													"value": "@first(activity('LookupAdfParametersEmployees').output.value).SinkTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LookupAdfParametersEmployees",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'ForEachDefinitivEmployee_EmploymentHistory'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": "adf",
												"ds_TableName": "Parameters"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyFromApiToDefinitivSchema_EmploymentHistory_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersEmployees",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "employeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersEmployees').output.value).SourceRelativeUrl, '{employeeId}', item().employeeId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LookupDefinitivEmployees",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachAdfParameter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select employeeId from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Employees"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LookupDefinitivOrganizations",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEachAdfParameter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachDefinitivOrganization_LeaveApplications",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDefinitivOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDefinitivOrganizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupAdfParametersOrganizations_LeaveApplications",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'ForEachDefinitivOrganization_LeaveApplications'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": "adf",
												"ds_TableName": "Parameters"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyFromApiToDefinitivSchema_LeaveApplications",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersOrganizations_LeaveApplications",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersOrganizations_LeaveApplications').output.value).SourceRelativeUrl, '{orgId}', item().organizationId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachDefinitivOrganization_LeaveBalances",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDefinitivOrganizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDefinitivOrganizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupAdfParametersOrganizations_LeaveBalances",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select * from [adf].[Parameters] where [PipelineName] = 'pl_CopyFromApiToDefinitivSchema' and [PipelineActivityName] = 'ForEachDefinitivOrganization_LeaveApplications'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": "adf",
												"ds_TableName": "Parameters"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyFromApiToDefinitivSchema_LeaveBalances",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupAdfParametersOrganizations_LeaveBalances",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@replace(first(activity('LookupAdfParametersOrganizations_LeaveBalances').output.value).SourceRelativeUrl, '{orgId}', item().organizationId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "a",
												"FileName": "b"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_FlattenDefinitivReportingArrays_LeaveApplications",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachDefinitivOrganization_LeaveApplications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenDefinitivReportingArrays",
								"type": "DataFlowReference",
								"parameters": {
									"sourceWildcardPathName": {
										"value": "'@{'ReportingLeaveApplications'}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_FlattenReportingArrays_LeaveBalances",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachDefinitivOrganization_LeaveBalances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenDefinitivReportingArrays",
								"type": "DataFlowReference",
								"parameters": {
									"sourceWildcardPathName": {
										"value": "'@{'ReportingLeaveBalances'}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T00:01:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_FlattenDefinitivReportingArrays')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl2_stnidoprodeastau100_json_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportRosters')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RosterDateIsFinishDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "RosterStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "RosterFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(formatDateTime(variables('varRosterDate'), 'yyyy-MM-dd'), formatDateTime(variables('varRosterFinishDate'), 'yyyy-MM-dd'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "IncrementRosterDate",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CopyToJson_CustomReportRosters",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varRosterDatePlus1",
										"value": {
											"value": "@formatDateTime(adddays(variables('varRosterDate'),1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopyToJson_CustomReportRosters",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "paramOrganizationId",
													"value": {
														"value": "@pipeline().parameters.paramOrganizationId",
														"type": "Expression"
													}
												},
												{
													"name": "CustomReportRosters.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "CustomReportRosters.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "varRosterDate",
													"value": {
														"value": "@variables('varRosterDate')",
														"type": "Expression"
													}
												},
												{
													"name": "paramRosterId",
													"value": {
														"value": "@pipeline().parameters.paramRosterId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:10:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/BE1BFE92-8295-4F80-A36C-1A63608C1433?organizationId=',pipeline().parameters.paramOrganizationId,'&startDate=', formatDateTime(variables('varRosterDate'), 'yyyy-MM-dd'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SetRosterDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "IncrementRosterDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varRosterDate",
										"value": {
											"value": "@variables('varRosterDatePlus1')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "RosterStartDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRosterStartDate",
							"value": {
								"value": "@formatdatetime(pipeline().parameters.paramRosterStartDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RosterFinishDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRosterFinishDate",
							"value": {
								"value": "@if(not(empty(pipeline().parameters.paramRosterFinishDate)), formatDateTime(pipeline().parameters.paramRosterFinishDate, 'yyyy-MM-dd'), formatDateTime(adddays(utcnow(),14), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RosterDateIsFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportRosters",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SinkSqlDefintiv": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"paramRosterStartDate": {
						"type": "string",
						"defaultValue": "2022-01-01"
					},
					"paramRosterFinishDate": {
						"type": "string",
						"defaultValue": "2022-01-01"
					},
					"paramOrganizationId": {
						"type": "string",
						"defaultValue": "DCA2633E-578E-4358-A5BF-0C38A96BB4CB"
					},
					"paramRosterId": {
						"type": "string",
						"defaultValue": "F4DA8091-4517-46C6-A5E0-E2A06D792924"
					}
				},
				"variables": {
					"varRosterStartDate": {
						"type": "String",
						"defaultValue": "2022-01-01"
					},
					"varRosterFinishDate": {
						"type": "String",
						"defaultValue": "2022-01-01"
					},
					"varRosterDate": {
						"type": "String",
						"defaultValue": "2022-01-01"
					},
					"varRosterDatePlus1": {
						"type": "String",
						"defaultValue": "2022-01-01"
					}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_UpdateCusomReportRosters')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportRosters_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportRosters",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": "2022-03-21T06:48:54.1502236Z",
										"ds_PipelineRunId": {
											"value": "1682fd68-b71a-461e-af19-89e6c0fcb9eb",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "pl_CopyFromApiToDefinitivSchema_CustomReportRosters",
											"type": "Expression"
										}
									},
									"SinkSqlDefintiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportRostersD"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_UpdateCusomReportRosters')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportWages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, payrunId, periodStart, periodEnd from definitiv.OrganizationPayRuns",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "payRunOrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "payRunPayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "payRunPeriodStartDate",
													"value": {
														"value": "@formatDateTime(item().periodStart, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "payRunPeriodEndDate",
													"value": {
														"value": "@formatDateTime(item().periodEnd, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/16F9B79E-D95C-4759-B5BE-A8EE599E777D?organizationId=',item().organizationId,'&selectedPayRunId=',item().payRunId,'&startDate=',formatDateTime(item().periodStart, 'yyyy-MM-dd'),'&endDate=', formatDateTime(item().periodEnd, 'yyyy-MM-dd'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_UpdateCusomReportWagesA",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportWages",
								"type": "DataFlowReference",
								"parameters": {
									"pipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "'@{pipeline().TriggerTime}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceApi": {},
									"sourceSql": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportWagesA"
									},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportWagesA"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "CopyToCsv1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateCusomReportWagesA",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportWages"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportWages",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_UpdateDraftWages",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_UpdateCusomReportWagesA",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateDraftWages",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportWagesA"
									},
									"sink1": {
										"ds_SchemaName": "draft",
										"ds_TableName": "PreceedaWages"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateDraftWages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "draft",
									"ds_TableName": "PreceedaWages"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "draft",
									"tableName": "PreceedaWages",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_UpdateCusomReportWagesB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_TruncateInsertCusomReportWages",
								"type": "DataFlowReference",
								"parameters": {
									"pipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "'@{pipeline().TriggerTime}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceApi": {},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportWagesB"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "CopyToCsv3",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateCusomReportWagesB",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportWagesB"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportWagesB",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineTriggerTime,pipeline().TriggerTime)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02_Wages"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateCusomReportWages')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateDraftWages')]",
				"[concat(variables('factoryId'), '/dataflows/df_TruncateInsertCusomReportWages')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_CustomReportWages_A')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, payrunId, periodStart, periodEnd from definitiv.OrganizationPayRuns",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "payRunOrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "payRunPayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "payRunPeriodStartDate",
													"value": {
														"value": "@formatDateTime(item().periodStart, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												},
												{
													"name": "payRunPeriodEndDate",
													"value": {
														"value": "@formatDateTime(item().periodEnd, 'yyyy-MM-dd')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/16F9B79E-D95C-4759-B5BE-A8EE599E777D?organizationId=',item().organizationId,'&selectedPayRunId=',item().payRunId,'&startDate=',formatDateTime(item().periodStart, 'yyyy-MM-dd'),'&endDate=', formatDateTime(item().periodEnd, 'yyyy-MM-dd'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_UpdateCusomReportWagesA",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateCusomReportWages",
								"type": "DataFlowReference",
								"parameters": {
									"pipelineRunId": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "'@{pipeline().TriggerTime}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceApi": {},
									"sourceSql": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportWagesD"
									},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "CustomReportWagesD"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "CopyToCsv1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateCusomReportWagesA",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportWagesD"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportWagesD",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineTriggerTime,pipeline().TriggerTime)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02_Wages"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateCusomReportWages')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_UpdateEmployees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select employeeId, organizationId from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Employees"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "employeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:05:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/employees/', item().employeeId, '/employment-history')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": "container-adf-nido-prod-eastau-100-1",
												"ds_Directory": "ds_adsl2_stnidoprodeastau100_json_input",
												"ds_PipelineName": "pl_B1_Payslips_ApiToDefinitiv"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_UpdateEmployeesEmploymentHistory",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateEmployeesEmploymentHistory",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "EmployeesEmploymentHistory"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateEmployeesEmploymentHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "EmployeesEmploymentHistory"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "EmployeesEmploymentHistory",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": "@pipeline().TriggerTime"
								}
							}
						]
					},
					{
						"name": "CopyToJson1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "pipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "pipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": {
										"value": "/api/v2/employees",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_UpdateEmployees",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyToJson1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateEmployees",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "Employees"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateEmployees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Employees"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "Employees",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": "@pipeline().TriggerTime"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "05_Employees"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateEmployeesEmploymentHistory')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateEmployees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, legalName from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyToJson1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@variables('PipelineRunId')",
														"type": "Expression"
													}
												},
												{
													"name": "legalName",
													"value": {
														"value": "@item().legalName",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/company/', item().organizationId, '/pay-runs')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_FlattenPayRuns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenOrgPayRuns_UpdateOrgPayRuns",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitivPayRuns": {},
									"SinkSqlDefinitiv": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_FlattenPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationPayRuns"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "OrganizationPayRuns",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": "@pipeline().TriggerTime"
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@convertFromUtc(\n    coalesce(\n        pipeline().parameters.MasterPipelineTriggerTime,\n        pipeline().TriggerTime\n    ),\n    'AUS Eastern Standard Time'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "07_PayRuns"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_FlattenOrgPayRuns_UpdateOrgPayRuns')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_OrganizationRosters')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations where organizationId='DCA2633E-578E-4358-A5BF-0C38A96BB4CB'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organization"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson_RostersV3",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgRosters.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "OrgRosters.PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "OrgRosters.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:10:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['rosterId']"
													},
													"sink": {
														"path": "rosterId"
													}
												},
												{
													"source": {
														"path": "[['isTemplate']"
													},
													"sink": {
														"path": "isTemplate"
													}
												},
												{
													"source": {
														"path": "[['ceaseDate']"
													},
													"sink": {
														"path": "ceaseDate"
													}
												},
												{
													"source": {
														"path": "[['paid']"
													},
													"sink": {
														"path": "paid"
													}
												},
												{
													"source": {
														"path": "[['name']"
													},
													"sink": {
														"path": "name"
													}
												},
												{
													"source": {
														"path": "[['description']"
													},
													"sink": {
														"path": "description"
													}
												},
												{
													"source": {
														"path": "[['defaultPeriodDurationType']"
													},
													"sink": {
														"path": "defaultPeriodDurationType"
													}
												},
												{
													"source": {
														"path": "[['customPeriodDuration']"
													},
													"sink": {
														"path": "customPeriodDuration"
													}
												},
												{
													"source": {
														"path": "[['commencementDate']"
													},
													"sink": {
														"path": "commencementDate"
													}
												},
												{
													"source": {
														"path": "[['notifyEmployeesByDefault']"
													},
													"sink": {
														"path": "notifyEmployeesByDefault"
													}
												},
												{
													"source": {
														"path": "[['costingSettings']"
													},
													"sink": {
														"path": "costingSettings"
													}
												},
												{
													"source": {
														"path": "[['showAsTwelveHourTime']"
													},
													"sink": {
														"path": "showAsTwelveHourTime"
													}
												},
												{
													"source": {
														"path": "$['Org.OrganizationId']"
													},
													"sink": {
														"path": "$['Org.OrganizationId']"
													}
												},
												{
													"source": {
														"path": "$['OrgRosters.PipelineTriggerTime']"
													},
													"sink": {
														"path": "$['OrgRosters.PipelineTriggerTime']"
													}
												},
												{
													"source": {
														"path": "$['OrgRosters.PipelineName']"
													},
													"sink": {
														"path": "$['OrgRosters.PipelineName']"
													}
												},
												{
													"source": {
														"path": "$['OrgRosters.PipelineRunId']"
													},
													"sink": {
														"path": "$['OrgRosters.PipelineRunId']"
													}
												}
											],
											"collectionReference": "$['items']"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/organization/', item().organizationId, '/rostering-v3')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachRoster",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup2').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "pl_CustomReportRosters",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_CopyFromApiToDefinitivSchema_CustomReportRosters",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"paramRosterStartDate": {
												"value": "@item().commencementDate",
												"type": "Expression"
											},
											"paramRosterFinishDate": {
												"value": "@item().ceaseDate",
												"type": "Expression"
											},
											"paramOrganizationId": {
												"value": "@item().organizationId",
												"type": "Expression"
											},
											"paramRosterId": {
												"value": "@item().rosterId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_FlattenOrgRosters_UpdateOrgRosters1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select rosterId, organizationId, commencementDate, ceaseDate, defaultPeriodDurationType \nfrom definitiv.OrganizationRosters \nwhere commencementDate > '2021-12-31'\norder by commencementDate, ceaseDate",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "OrganizationRosters"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "df_FlattenOrgRosters_UpdateOrgRosters1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrganization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenOrgRosters_UpdateOrgRosters1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceSqlDefinitiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationRosters"
									},
									"SinkSqlDefinitiv": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "OrganizationRosters"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:04:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_FlattenOrgRosters_UpdateOrgRosters1')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_CustomReportRosters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_OrganizationRosters_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations where organizationId='DCA2633E-578E-4358-A5BF-0C38A96BB4CB'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organization"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOrganization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson_RostersV3",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "OrgRosters.PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "OrgRosters.PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "OrgRosters.PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:10:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings",
												"filePattern": "setOfObjects"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/organization/', item().organizationId, '/rostering-v3')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachOrganization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_FlattenOrgRosters_UpdateOrgRosters1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceBlobDefinitiv": {},
									"SourceSqlDefinitiv": {},
									"SinkSqlDefinitiv": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:04:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_FlattenOrgRosters_UpdateOrgRosters1')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:15:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/company/', item().organizationId, '/reporting/leave-applications')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_UpdateReportingLeaveApplications",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateReportingLeaveApplications",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "ReportingLeaveApplications"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateReportingLeaveApplications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "ReportingLeaveApplications"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "ReportingLeaveApplications",
									"pipelineRunId": {
										"value": "@variables('PipelineRunId')",
										"type": "Expression"
									},
									"pipelineTriggerTime": {
										"value": "@variables('PipelineTriggerTime')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineTriggerTime,pipeline().TriggerTime)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateReportingLeaveApplications')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetPipelineTriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetPipelineRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "organizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "pipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:10:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/company/', item().organizationId, '/reporting/leave-balances?asOfDate=2021-11-01')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@variables('PipelineRunId')",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@variables('PipelineTriggerTime')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "df_UpdateReportingLeaveBalances",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_UpdateReportingLeaveBalances",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"ds_SchemaName": "definitiv",
										"ds_TableName": "ReportingLeaveBalances"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyToCsv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_UpdateReportingLeaveBalances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "ReportingLeaveBalances"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "ReportingLeaveBalances",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": "@pipeline().TriggerTime"
								}
							}
						]
					},
					{
						"name": "SetPipelineTriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineTriggerTime",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineTriggerTime,pipeline().TriggerTime)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetPipelineRunId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@coalesce(pipeline().parameters.MasterPipelineRunId,pipeline().RunId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MasterPipelineTriggerTime": {
						"type": "string"
					},
					"MasterPipelineRunId": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineTriggerTime": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_UpdateReportingLeaveBalances')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToArchiveSchema_Wages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToArchive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PayrunGroup",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PayrunGroup",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WeekEndingDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "WeekEndingDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TypeCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "TypeCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransTypeCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "TransTypeCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SalaryCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SalaryCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Hours_Units",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Hours_Units",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "RoomName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RoomName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ID_Number",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "ID_Number",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Surname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FullName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FullName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PayrollEntity",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PayrollEntity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PayrollState",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PayrollState",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PositionID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PositionID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PositionTitle",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PositionTitle",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "PreceedaWages"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "archive"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "PreceedaWages"
					}
				},
				"folder": {
					"name": "02_Wages"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "adf",
									"ds_TableName": "Parameters"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data 1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "05:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": false,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": {
													"value": "@item().SinkSchemName",
													"type": "Expression"
												},
												"ds_TableName": {
													"value": "@item().SinkTableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sql_tnk001",
											"type": "DatasetReference",
											"parameters": {
												"ds_SchemaName": {
													"value": "@item().SinkSchemaName",
													"type": "Expression"
												},
												"ds_TableName": {
													"value": "@item().SinkTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-25T22:02:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_Employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Staff_New"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Staff_New"
					}
				},
				"folder": {
					"name": "05_Employees"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_LeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceeda_Leave_Balances"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceeda_Leave_Balances"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_LeaveConsumed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceeda_Leave_Taken"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceeda_Leave_Taken"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_LongServiceLeave')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_LSL_Active_Employees"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_LSL_Active_Employees"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_Rosters')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveRosteredHours"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveRosteredHours"
					}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_RostersDaily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveRosteredHours_Daily"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveRosteredHours_Daily"
					}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_Timesheets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveFull"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveFull"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_TimesheetsDaily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveDaily"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "EmpliveDaily"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromDboToDraftSchema_Wages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "PreceedaWages"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "PreceedaWages"
					}
				},
				"folder": {
					"name": "02_Wages"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-14T05:41:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CreateCsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyToCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "amount",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "amount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "createdByUser",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "createdByUser",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "createdDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "createdDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "employeeId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "employeeId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "employmentType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "employmentType",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "end",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "end",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "firstName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "firstName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "lastName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "lastName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "modifiedByUser",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "modifiedByUser",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "modifiedDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "modifiedDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "payRunOrganizationId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "payRunOrganizationId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "payRunPayRunId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "payRunPayRunId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "payRunPeriodEndDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "payRunPeriodEndDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "payRunPeriodStartDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "payRunPeriodStartDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pipelineRunId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "pipelineRunId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pipelineTriggerTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										},
										"sink": {
											"name": "pipelineTriggerTime",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "quantity",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "room",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "room",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "rosterEntryId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rosterEntryId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "rosterId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rosterId",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "serviceCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "serviceCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "start",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SourceFileName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SourceFileName",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": "definitiv",
									"ds_TableName": "CustomReportRostersB"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "definitiv",
									"tableName": "CustomReportRostersB",
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"pipelineTriggerTime": "@pipeline().TriggerTime"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-05T22:41:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CreateCsv_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ReportingLeaveApplications",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"DirectoryName": "a",
										"FileName": "b"
									},
									"sink1": {
										"schemaName": "ReportingLeaveApplications_csv",
										"tableName": "DefaultFile",
										"pipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"pipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-02T04:30:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ReportingLeaveApplications')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OrganizationPayRuns",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CustomReportRosters",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OrganizationPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_OrganizationRosters",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CustomReportWages",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OrganizationPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_CustomReportWages",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CustomReportPayslips",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OrganizationPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_B1_Payslips_ApiToDefinitiv",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CustomReportTimesheets",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OrganizationPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_A1_Timesheets_DboToArchive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ReportingLeaveApplications",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ReportingLeaveBalances",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Employees",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_Employees",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T01:50:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_OrganizationRosters')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_CustomReportWages')]",
				"[concat(variables('factoryId'), '/pipelines/pl_B1_Payslips_ApiToDefinitiv')]",
				"[concat(variables('factoryId'), '/pipelines/pl_A1_Timesheets_DboToArchive')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Employees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Payslips')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy tnk_001.dbo.* to tnk_001.draft",
				"activities": [
					{
						"name": "CopyDboToDraft",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "05:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Employee Ref# No",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employee",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "Start",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										},
										"sink": {
											"name": "End",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Employment Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Hours",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Cost",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Brk",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ord$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ADJP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T1x5$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "T2$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LL175$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CARE$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COM$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JURY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LSL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LWOP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MAT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "PERS$",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHNW$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDOT$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UAL$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "UPERS$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WCOMP$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "RDO$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "NPAY$",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Allowances",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Approval Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Centre Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Contract",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Contract Hours Per Cycle",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Max Hours Per Period",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Pay Level",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Qualification Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Role Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Cost Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Room Ref# No",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Roster",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Shift",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Timesheet Comments",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Total Bill",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Work Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Nickname",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sourceSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sourceSqlTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"ds_SchemaName": {
										"value": "@pipeline().parameters.sinkSqlSchema",
										"type": "Expression"
									},
									"ds_TableName": {
										"value": "@pipeline().parameters.sinkSqlTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSqlSchema": {
						"type": "string"
					},
					"sourceSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					},
					"sinkSqlSchema": {
						"type": "string",
						"defaultValue": "draft"
					},
					"sinkSqlTable": {
						"type": "string",
						"defaultValue": "Preceda_Payslip_2"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T01:56:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls2_stnidoprodeastau100_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaName": {
						"type": "String"
					},
					"tableName": {
						"type": "String"
					},
					"pipelineRunId": {
						"type": "string"
					},
					"pipelineTriggerTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('ds_adsl2_stnidoprodeastau100_csv/', dataset().schemaName, '.', dataset().tableName, '/', formatdatetime(string(dataset().pipelineTriggerTime), 'yyyy-MM-ddTHH:mm:ss'), '_', 'pipelineRunId_', dataset().pipelineRunId)",
							"type": "Expression"
						},
						"fileSystem": "container-adf-nido-prod-eastau-100-1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls2_stnidoprodeastau100_json_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "object",
						"defaultValue": "2022-01-25T00:18:17.611502Z"
					},
					"ds_PipelineRunId": {
						"type": "string",
						"defaultValue": "187d99be-a307-4534-9acc-0a17fc03d0ab"
					},
					"ds_FileSystem": {
						"type": "string",
						"defaultValue": "container-adf-nido-prod-eastau-100-1"
					},
					"ds_Directory": {
						"type": "string",
						"defaultValue": "ds_adsl2_stnidoprodeastau100_json_input"
					},
					"ds_PipelineName": {
						"type": "string",
						"defaultValue": "pl_B1_Payslips_ApiToDefinitiv"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls2_stnidoprodeastau100_json_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "object",
						"defaultValue": "2022-01-25T00:18:17.611502Z"
					},
					"ds_PipelineRunId": {
						"type": "string",
						"defaultValue": "187d99be-a307-4534-9acc-0a17fc03d0ab"
					},
					"ds_FileSystem": {
						"type": "string",
						"defaultValue": "container-adf-nido-prod-eastau-100-1"
					},
					"ds_Directory": {
						"type": "string",
						"defaultValue": "ds_adls2_stnidoprodeastau100_json_output"
					},
					"ds_PipelineName": {
						"type": "string",
						"defaultValue": "pl_B1_Payslips_ApiToDefinitiv"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl2_stnidoprodeastau100_json_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DirectoryName": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"fileSystem": "container-adf-nido-prod-eastau-100-1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl2_stnidoprodeastau100_json_3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DefaultFile.json",
						"folderPath": "DefaultDirectory",
						"fileSystem": "container-adf-nido-prod-eastau-100-1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl2_stnidoprodeastau100_json_4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PipelineTriggerTime": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    'ds_adsl2_stnidoprodeastau100_json/', \n    dataset().PipelineName, '/', \n    formatDateTime(string(dataset().PipelineTriggerTime), 'yyyy-MM-ddTHH:mm:ss'),\n    '_PipelineRunId_', dataset().PipelineRunId, '_Monitoring')",
							"type": "Expression"
						},
						"fileSystem": "container-adf-nido-prod-eastau-100-1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rest_definitiv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_rest_definitiv",
					"type": "LinkedServiceReference",
					"parameters": {
						"sourceBaseUrl": "https://nido.definitiv.com.au"
					}
				},
				"parameters": {
					"sourceRelativeUrl": {
						"type": "String",
						"defaultValue": "/api/v2/organizations"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().sourceRelativeUrl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rest_definitiv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_tnk001')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_tnk001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_SchemaName": {
						"type": "string",
						"defaultValue": "adf"
					},
					"ds_TableName": {
						"type": "string",
						"defaultValue": "Parameters"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls2_stnidoprodeastau100')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls2_stnidoprodeastau100_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_keyvault_kvnidoprodeastau100')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_keyvault_kvnidoprodeastau100_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_rest_definitiv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"sourceBaseUrl": {
						"type": "String",
						"defaultValue": "https://nido.definitiv.com.au"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_rest_definitiv_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_tnk001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_tnk001_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_01_Payslips')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_01_Payslips_Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 4,
						"startTime": "2022-01-17T23:51:00",
						"timeZone": "AUS Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_01_Payslips_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AustraliaEastIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 240,
							"cleanup": false
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_A3_Payslips_DraftStagingToDraft')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDraftStagingPreceda"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPreceda",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tPipelineTriggerTime as string,\n\tPipelineRunId as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDraftStagingPreceda\nSourceSqlDraftStagingPreceda alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['RecordId','RecordWatermark'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tRecordId,\n\t\tRecordWatermark = RecordVersion,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue\n\t)) ~> SinkSqlDraftPreceda"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_B1_OrgPayItems_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "09_PayItems"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitivPayslips"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayslips"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitivPayslips",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "CastDateType1"
						},
						{
							"name": "FilterPeriodEndDate"
						},
						{
							"name": "Insert"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "Delete"
						},
						{
							"name": "Update"
						},
						{
							"name": "UnionAlterRowCondition"
						},
						{
							"name": "SelectSqlDefinitivPayslips"
						},
						{
							"name": "SelectBlobDefinitivPayslips"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\t{OrgPayRun.OrganizationId} as string,\n\t\t{OrgPayRun.PayRunId} as string,\n\t\t{OrgPayRun.PeriodEndDate} as date,\n\t\t{OrgPayRun.PeriodStartDate} as date,\n\t\t{OrgPayRun.PipelineRunId} as string,\n\t\t{OrgPayRun.PipelineTriggerTime} as string,\n\t\tbaseRate as double,\n\t\tdepartmentCode as string,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tnumberOfUnits as double,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpositionTitle as string,\n\t\tprojectCode as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivPayslips\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayslips\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nSelectBlobDefinitivPayslips derive(PayDate = toDate(PayDate),\n\t\tHoursOrADCode = toString(HoursOrADCode)) ~> CastDateType1\nCastDateType1 filter(greater({OrgPayRun.PeriodEndDate}, toDate(\"2021-10-15\", 'yyyy-MM-dd'))) ~> FilterPeriodEndDate\nNotExistsInsert derive(AlterRowCondition = \"Insert\",\n\t\tRecordCreatedDate = currentUTC('A.U.S. Eastern Standard Time'),\n\t\tRecordIsDeleted = false()) ~> Insert\nSelectSqlDefinitivPayslips, FilterPeriodEndDate exists({Sql.DepartmentCode} == DepartmentCode\n\t&& {Sql.OrganizationId} == {OrgPayRun.OrganizationId}\n\t&& {Sql.PayRunId} == {OrgPayRun.PayRunId}\n\t&& {Sql.EmployeeId} == EmployeeId\n\t&& {Sql.HoursOrADCode} == HoursOrADCode\n\t&& {Sql.HoursOrADCodeDesc} == HoursOrADCodeDesc\n\t&& {Sql.Level1Code} == Level1Code\n\t&& {Sql.Level2Code} == Level2Code\n\t&& {Sql.PayslipId} == PayslipId\n\t&& {Sql.PayslipLineItemId} == PayslipLineItemId\n\t&& {Sql.PositionTitle} == PositionTitle\n\t&& {Sql.ProjectCode} == ProjectCode\n\t&& {Sql.Rate} == Rate,\n\tnegate:true,\n\tbroadcast: 'right')~> NotExistsDelete\nNotExistsDelete derive(AlterRowCondition = \"Delete\",\n\t\tRecordModifiedDate = currentUTC('A.U.S. Eastern Standard Time'),\n\t\tRecordIsDeleted = true()) ~> Delete\nExistsUpdate derive(AlterRowCondition = \"Update\",\n\t\tRecordModifiedDate = currentUTC('A.U.S. Eastern Standard Time'),\n\t\tRecordIsDeleted = false()) ~> Update\nUpdate, Insert, Delete union(byName: true)~> UnionAlterRowCondition\nSourceSqlDefinitivPayslips select(mapColumn(\n\t\t{Sql.EmployeeId} = EmployeeId,\n\t\t{Sql.OrganizationId} = OrganizationId,\n\t\t{Sql.PayRunId} = PayRunId,\n\t\t{Sql.PayslipId} = PayslipId,\n\t\t{Sql.PayslipLineItemId} = PayslipLineItemId,\n\t\t{Sql.DepartmentCode} = DepartmentCode,\n\t\t{Sql.HoursOrADCode} = HoursOrADCode,\n\t\t{Sql.HoursOrADCodeDesc} = HoursOrADCodeDesc,\n\t\t{Sql.Level1Code} = Level1Code,\n\t\t{Sql.Level2Code} = Level2Code,\n\t\t{Sql.PositionTitle} = PositionTitle,\n\t\t{Sql.ProjectCode} = ProjectCode,\n\t\t{Sql.Rate} = Rate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectSqlDefinitivPayslips\nSourceBlobDefinitivPayslips select(mapColumn(\n\t\t{OrgPayRun.OrganizationId},\n\t\t{OrgPayRun.PayRunId},\n\t\t{OrgPayRun.PeriodEndDate},\n\t\t{OrgPayRun.PeriodStartDate},\n\t\t{OrgPayRun.PipelineRunId},\n\t\t{OrgPayRun.PipelineTriggerTime},\n\t\tBaseRate = baseRate,\n\t\tDepartmentCode = departmentCode,\n\t\tEmployeeId = employeeId,\n\t\tEmploymentTypeCode = employmentTypeCode,\n\t\tEmploymentTypeCodeDesc = employmentTypeCodeDesc,\n\t\tFirstName = firstName,\n\t\tHoursOrADCode = {hoursOrA/DCode},\n\t\tHoursOrADCodeDesc = {hoursOrA/DCodeDesc},\n\t\tIdNumber = idNumber,\n\t\tLevel1Code = level1Code,\n\t\tLevel2Code = level2Code,\n\t\tPayslipLineItemId = lineItemId,\n\t\tNumberOfUnits = numberOfUnits,\n\t\tPayDate = payDate,\n\t\tPayMethodCode = payMethodCode,\n\t\tPayMethodCodeDesc = payMethodCodeDesc,\n\t\tPayslipId = payslipId,\n\t\tPayslipNumber = payslipNumber,\n\t\tPeriodEndingDate = periodEndingDate,\n\t\tPeriodStartDate = periodStartDate,\n\t\tPositionTitle = positionTitle,\n\t\tProjectCode = projectCode,\n\t\tRate = rate,\n\t\tSurname = surname,\n\t\tValue = value,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectBlobDefinitivPayslips\nFilterPeriodEndDate, SelectSqlDefinitivPayslips exists(DepartmentCode == {Sql.DepartmentCode}\n\t&& EmployeeId == {Sql.EmployeeId}\n\t&& HoursOrADCode == {Sql.HoursOrADCode}\n\t&& HoursOrADCodeDesc == {Sql.HoursOrADCodeDesc}\n\t&& Level1Code == {Sql.Level1Code}\n\t&& Level2Code == {Sql.Level2Code}\n\t&& {OrgPayRun.OrganizationId} == {Sql.OrganizationId}\n\t&& {OrgPayRun.PayRunId} == {Sql.PayRunId}\n\t&& PayslipId == {Sql.PayslipId}\n\t&& PayslipLineItemId == {Sql.PayslipLineItemId}\n\t&& PositionTitle == {Sql.PositionTitle}\n\t&& ProjectCode == {Sql.ProjectCode}\n\t&& Rate == {Sql.Rate},\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nFilterPeriodEndDate, SelectSqlDefinitivPayslips exists(DepartmentCode == {Sql.DepartmentCode}\n\t&& EmployeeId == {Sql.EmployeeId}\n\t&& HoursOrADCode == {Sql.HoursOrADCode}\n\t&& HoursOrADCodeDesc == {Sql.HoursOrADCodeDesc}\n\t&& Level1Code == {Sql.Level1Code}\n\t&& Level2Code == {Sql.Level2Code}\n\t&& {OrgPayRun.OrganizationId} == {Sql.OrganizationId}\n\t&& {OrgPayRun.PayRunId} == {Sql.PayRunId}\n\t&& PayslipId == {Sql.PayslipId}\n\t&& PayslipLineItemId == {Sql.PayslipLineItemId}\n\t&& PositionTitle == {Sql.PositionTitle}\n\t&& ProjectCode == {Sql.ProjectCode}\n\t&& Rate == {Sql.Rate},\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nUnionAlterRowCondition aggregate(groupBy(AlterRowCondition),\n\tCountAlterRowCondition = count(AlterRowCondition)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['DepartmentCode','EmployeeId','HoursOrADCode','HoursOrADCodeDesc','Level1Code','Level2Code','OrganizationId','PayRunId','PayslipId','PayslipLineItemId','PositionTitle','ProjectCode','Rate'],\n\tformat: 'table',\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (\"ds_adls2_stnidoprodeastau100_log\"),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tOrganizationId = {OrgPayRun.OrganizationId},\n\t\tPayRunId = {OrgPayRun.PayRunId},\n\t\tPeriodEndDate = {OrgPayRun.PeriodEndDate},\n\t\tPeriodStartDate = {OrgPayRun.PeriodStartDate},\n\t\tPipelineRunId = {OrgPayRun.PipelineRunId},\n\t\tPipelineTriggerTime = {OrgPayRun.PipelineTriggerTime},\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmployeeId,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tPayslipLineItemId,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPayslipId,\n\t\tPayslipNumber,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tSourceFileName,\n\t\tAlterRowCondition,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordCreatedDate,\n\t\tEmployeeId = {Sql.EmployeeId},\n\t\tOrganizationId = {Sql.OrganizationId},\n\t\tPayRunId = {Sql.PayRunId},\n\t\tPayslipId = {Sql.PayslipId},\n\t\tPayslipLineItemId = {Sql.PayslipLineItemId},\n\t\tDepartmentCode = {Sql.DepartmentCode},\n\t\tHoursOrADCode = {Sql.HoursOrADCode},\n\t\tHoursOrADCodeDesc = {Sql.HoursOrADCodeDesc},\n\t\tLevel1Code = {Sql.Level1Code},\n\t\tLevel2Code = {Sql.Level2Code},\n\t\tPositionTitle = {Sql.PositionTitle},\n\t\tProjectCode = {Sql.ProjectCode},\n\t\tRate = {Sql.Rate}\n\t)) ~> SinkSqlDefinitivPayslips"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_B1_OrgPayItems_ApiToDefinitiv_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "09_PayItems"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitivOrgPayItems"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkDefinitivOrgPayItems",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "SelectBlobDefinitivOrgPayItems"
						}
					],
					"script": "source(output(\n\t\t{Org.LegalName} as string,\n\t\t{Org.OrganizationId} as string,\n\t\t{OrgPayItem.PipelineName} as string,\n\t\t{OrgPayItem.PipelineRunId} as string,\n\t\t{OrgPayItem.PipelineTriggerTime} as string,\n\t\tatoCategory as string,\n\t\tcategory as string,\n\t\tcostingStrategy as string,\n\t\tcustomFields as (customFieldDisplayStatus as string, dataType as string, dateDriven as boolean, description as string, displayName as string, displayOnTimesheetSummary as boolean, enabled as boolean, global as boolean, inheritTimesheetPeriod as string, isMandatory as boolean, name as string, order as boolean, preventMultipleEntries as boolean, targetEntity as boolean, timeBased as boolean, timePeriodMode as string, value as integer),\n\t\tdeductionBankAccount as (accountName as string, accountNumber as string, bsb as string, reference as string),\n\t\tdeletedByUserId as string,\n\t\tdeletedTime as string,\n\t\tdescription as string,\n\t\texportCode as string,\n\t\tglCreditCode as integer,\n\t\tglDebitCode as integer,\n\t\thidden as boolean,\n\t\tincludeInSalaryAndWages as boolean,\n\t\tincludeInTotalPackage as boolean,\n\t\tisContractor as boolean,\n\t\tisForeign as boolean,\n\t\tisPercentage as boolean,\n\t\tisSuperable as boolean,\n\t\tisSystem as boolean,\n\t\tisTaxable as boolean,\n\t\tonlyProcessWhenOtherEarningsExist as boolean,\n\t\torganizationId as string,\n\t\tpayItemId as string,\n\t\tpayslipDisplayName as string,\n\t\trollupMode as string,\n\t\tshowOnPayslip as boolean,\n\t\tspecialTaxRate as string,\n\t\tsuperStreamContributionCategory as string,\n\t\tthirdPartyPaymentEnabled as boolean,\n\t\ttype as string,\n\t\tunitOfMeasureId as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivOrgPayItems\nSourceBlobDefinitivOrgPayItems select(mapColumn(\n\t\tLegalName = {Org.LegalName},\n\t\tOrganizationId = {Org.OrganizationId},\n\t\tPipelineName = {OrgPayItem.PipelineName},\n\t\tPipelineRunId = {OrgPayItem.PipelineRunId},\n\t\tPipelineTriggerTime = {OrgPayItem.PipelineTriggerTime},\n\t\tatoCategory,\n\t\tcategory,\n\t\tcostingStrategy,\n\t\tdeletedByUserId,\n\t\tdeletedTime,\n\t\tdescription,\n\t\texportCode,\n\t\tglCreditCode,\n\t\tglDebitCode,\n\t\thidden,\n\t\tincludeInSalaryAndWages,\n\t\tincludeInTotalPackage,\n\t\tisContractor,\n\t\tisForeign,\n\t\tisPercentage,\n\t\tisSuperable,\n\t\tisSystem,\n\t\tisTaxable,\n\t\tonlyProcessWhenOtherEarningsExist,\n\t\torganizationId,\n\t\tpayItemId,\n\t\tpayslipDisplayName,\n\t\trollupMode,\n\t\tshowOnPayslip,\n\t\tspecialTaxRate,\n\t\tsuperStreamContributionCategory,\n\t\tthirdPartyPaymentEnabled,\n\t\ttype,\n\t\tunitOfMeasureId,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectBlobDefinitivOrgPayItems\nSelectBlobDefinitivOrgPayItems sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tLegalName,\n\t\tOrganizationId = SelectBlobDefinitivOrgPayItems@OrganizationId,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tatoCategory,\n\t\tcategory,\n\t\tcostingStrategy,\n\t\tdeletedByUserId,\n\t\tdeletedTime,\n\t\tdescription,\n\t\texportCode,\n\t\tglCreditCode,\n\t\tglDebitCode,\n\t\thidden,\n\t\tincludeInSalaryAndWages,\n\t\tincludeInTotalPackage,\n\t\tisContractor,\n\t\tisForeign,\n\t\tisPercentage,\n\t\tisSuperable,\n\t\tisSystem,\n\t\tisTaxable,\n\t\tonlyProcessWhenOtherEarningsExist,\n\t\torganizationId = SelectBlobDefinitivOrgPayItems@organizationId,\n\t\tpayItemId,\n\t\tpayslipDisplayName,\n\t\trollupMode,\n\t\tshowOnPayslip,\n\t\tspecialTaxRate,\n\t\tsuperStreamContributionCategory,\n\t\tthirdPartyPaymentEnabled,\n\t\ttype,\n\t\tunitOfMeasureId,\n\t\tSourceFileName\n\t)) ~> SinkDefinitivOrgPayItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_B1_Payslips_ApiToDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitivPayslips"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayslips"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitivPayslips",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "CastDateType1"
						},
						{
							"name": "FilterPeriodEndDate"
						},
						{
							"name": "Insert"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "Delete"
						},
						{
							"name": "Update"
						},
						{
							"name": "UnionAlterRowCondition"
						},
						{
							"name": "SelectSqlDefinitivPayslips"
						},
						{
							"name": "SelectBlobDefinitivPayslips"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\t{OrgPayRun.OrganizationId} as string,\n\t\t{OrgPayRun.PayRunId} as string,\n\t\t{OrgPayRun.PeriodEndDate} as date,\n\t\t{OrgPayRun.PeriodStartDate} as date,\n\t\t{OrgPayRun.PipelineRunId} as string,\n\t\t{OrgPayRun.PipelineTriggerTime} as string,\n\t\tbaseRate as double,\n\t\tdepartmentCode as string,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tnumberOfUnits as double,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpositionTitle as string,\n\t\tprojectCode as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivPayslips\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayslips\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nSelectBlobDefinitivPayslips derive(PayDate = toDate(PayDate),\n\t\tHoursOrADCode = toString(HoursOrADCode)) ~> CastDateType1\nCastDateType1 filter(greater({OrgPayRun.PeriodEndDate}, toDate(\"2021-10-15\", 'yyyy-MM-dd'))) ~> FilterPeriodEndDate\nNotExistsInsert derive(AlterRowCondition = \"Insert\",\n\t\tRecordCreatedDate = currentUTC('A.U.S. Eastern Standard Time'),\n\t\tRecordIsDeleted = false()) ~> Insert\nSelectSqlDefinitivPayslips, FilterPeriodEndDate exists({Sql.DepartmentCode} == DepartmentCode\n\t&& {Sql.OrganizationId} == {OrgPayRun.OrganizationId}\n\t&& {Sql.PayRunId} == {OrgPayRun.PayRunId}\n\t&& {Sql.EmployeeId} == EmployeeId\n\t&& {Sql.HoursOrADCode} == HoursOrADCode\n\t&& {Sql.HoursOrADCodeDesc} == HoursOrADCodeDesc\n\t&& {Sql.Level1Code} == Level1Code\n\t&& {Sql.Level2Code} == Level2Code\n\t&& {Sql.PayslipId} == PayslipId\n\t&& {Sql.PayslipLineItemId} == PayslipLineItemId\n\t&& {Sql.PositionTitle} == PositionTitle\n\t&& {Sql.ProjectCode} == ProjectCode\n\t&& {Sql.Rate} == Rate,\n\tnegate:true,\n\tbroadcast: 'right')~> NotExistsDelete\nNotExistsDelete derive(AlterRowCondition = \"Delete\",\n\t\tRecordModifiedDate = currentUTC('A.U.S. Eastern Standard Time'),\n\t\tRecordIsDeleted = true()) ~> Delete\nExistsUpdate derive(AlterRowCondition = \"Update\",\n\t\tRecordModifiedDate = currentUTC('A.U.S. Eastern Standard Time'),\n\t\tRecordIsDeleted = false()) ~> Update\nUpdate, Insert, Delete union(byName: true)~> UnionAlterRowCondition\nSourceSqlDefinitivPayslips select(mapColumn(\n\t\t{Sql.EmployeeId} = EmployeeId,\n\t\t{Sql.OrganizationId} = OrganizationId,\n\t\t{Sql.PayRunId} = PayRunId,\n\t\t{Sql.PayslipId} = PayslipId,\n\t\t{Sql.PayslipLineItemId} = PayslipLineItemId,\n\t\t{Sql.DepartmentCode} = DepartmentCode,\n\t\t{Sql.HoursOrADCode} = HoursOrADCode,\n\t\t{Sql.HoursOrADCodeDesc} = HoursOrADCodeDesc,\n\t\t{Sql.Level1Code} = Level1Code,\n\t\t{Sql.Level2Code} = Level2Code,\n\t\t{Sql.PositionTitle} = PositionTitle,\n\t\t{Sql.ProjectCode} = ProjectCode,\n\t\t{Sql.Rate} = Rate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectSqlDefinitivPayslips\nSourceBlobDefinitivPayslips select(mapColumn(\n\t\t{OrgPayRun.OrganizationId},\n\t\t{OrgPayRun.PayRunId},\n\t\t{OrgPayRun.PeriodEndDate},\n\t\t{OrgPayRun.PeriodStartDate},\n\t\t{OrgPayRun.PipelineRunId},\n\t\t{OrgPayRun.PipelineTriggerTime},\n\t\tBaseRate = baseRate,\n\t\tDepartmentCode = departmentCode,\n\t\tEmployeeId = employeeId,\n\t\tEmploymentTypeCode = employmentTypeCode,\n\t\tEmploymentTypeCodeDesc = employmentTypeCodeDesc,\n\t\tFirstName = firstName,\n\t\tHoursOrADCode = {hoursOrA/DCode},\n\t\tHoursOrADCodeDesc = {hoursOrA/DCodeDesc},\n\t\tIdNumber = idNumber,\n\t\tLevel1Code = level1Code,\n\t\tLevel2Code = level2Code,\n\t\tPayslipLineItemId = lineItemId,\n\t\tNumberOfUnits = numberOfUnits,\n\t\tPayDate = payDate,\n\t\tPayMethodCode = payMethodCode,\n\t\tPayMethodCodeDesc = payMethodCodeDesc,\n\t\tPayslipId = payslipId,\n\t\tPayslipNumber = payslipNumber,\n\t\tPeriodEndingDate = periodEndingDate,\n\t\tPeriodStartDate = periodStartDate,\n\t\tPositionTitle = positionTitle,\n\t\tProjectCode = projectCode,\n\t\tRate = rate,\n\t\tSurname = surname,\n\t\tValue = value,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectBlobDefinitivPayslips\nFilterPeriodEndDate, SelectSqlDefinitivPayslips exists(DepartmentCode == {Sql.DepartmentCode}\n\t&& EmployeeId == {Sql.EmployeeId}\n\t&& HoursOrADCode == {Sql.HoursOrADCode}\n\t&& HoursOrADCodeDesc == {Sql.HoursOrADCodeDesc}\n\t&& Level1Code == {Sql.Level1Code}\n\t&& Level2Code == {Sql.Level2Code}\n\t&& {OrgPayRun.OrganizationId} == {Sql.OrganizationId}\n\t&& {OrgPayRun.PayRunId} == {Sql.PayRunId}\n\t&& PayslipId == {Sql.PayslipId}\n\t&& PayslipLineItemId == {Sql.PayslipLineItemId}\n\t&& PositionTitle == {Sql.PositionTitle}\n\t&& ProjectCode == {Sql.ProjectCode}\n\t&& Rate == {Sql.Rate},\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nFilterPeriodEndDate, SelectSqlDefinitivPayslips exists(DepartmentCode == {Sql.DepartmentCode}\n\t&& EmployeeId == {Sql.EmployeeId}\n\t&& HoursOrADCode == {Sql.HoursOrADCode}\n\t&& HoursOrADCodeDesc == {Sql.HoursOrADCodeDesc}\n\t&& Level1Code == {Sql.Level1Code}\n\t&& Level2Code == {Sql.Level2Code}\n\t&& {OrgPayRun.OrganizationId} == {Sql.OrganizationId}\n\t&& {OrgPayRun.PayRunId} == {Sql.PayRunId}\n\t&& PayslipId == {Sql.PayslipId}\n\t&& PayslipLineItemId == {Sql.PayslipLineItemId}\n\t&& PositionTitle == {Sql.PositionTitle}\n\t&& ProjectCode == {Sql.ProjectCode}\n\t&& Rate == {Sql.Rate},\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nUnionAlterRowCondition aggregate(groupBy(AlterRowCondition),\n\tCountAlterRowCondition = count(AlterRowCondition)) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['DepartmentCode','EmployeeId','HoursOrADCode','HoursOrADCodeDesc','Level1Code','Level2Code','OrganizationId','PayRunId','PayslipId','PayslipLineItemId','PositionTitle','ProjectCode','Rate'],\n\tformat: 'table',\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (\"ds_adls2_stnidoprodeastau100_log\"),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tOrganizationId = {OrgPayRun.OrganizationId},\n\t\tPayRunId = {OrgPayRun.PayRunId},\n\t\tPeriodEndDate = {OrgPayRun.PeriodEndDate},\n\t\tPeriodStartDate = {OrgPayRun.PeriodStartDate},\n\t\tPipelineRunId = {OrgPayRun.PipelineRunId},\n\t\tPipelineTriggerTime = {OrgPayRun.PipelineTriggerTime},\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmployeeId,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tPayslipLineItemId,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPayslipId,\n\t\tPayslipNumber,\n\t\tPeriodEndingDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tSourceFileName,\n\t\tAlterRowCondition,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordCreatedDate\n\t)) ~> SinkSqlDefinitivPayslips"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_B2_Payslips_DefinitivToDraft')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayslips"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDraftPayslip"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPreceda",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "Update"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "Insert"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "Delete"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayslips\nsource(output(\n\t\tRecordId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select RecordId from draft.Preceda_Payslip_2 where RecordIsDefinitiv=1',\n\tformat: 'query') ~> SourceSqlDraftPayslip\nUnion1 alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nSourceSqlDefinitivPayslips, SourceSqlDraftPayslip exists(SourceSqlDefinitivPayslips@RecordId == SourceSqlDraftPayslip@RecordId,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nExistsUpdate derive(AlterRowCondition = \"Update\") ~> Update\nSourceSqlDefinitivPayslips, SourceSqlDraftPayslip exists(SourceSqlDefinitivPayslips@RecordId == SourceSqlDraftPayslip@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nNotExistsInsert derive(AlterRowCondition = \"Insert\") ~> Insert\nSourceSqlDraftPayslip, SourceSqlDefinitivPayslips exists(SourceSqlDraftPayslip@RecordId == SourceSqlDefinitivPayslips@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsDelete\nNotExistsDelete derive(AlterRowCondition = \"Delete\") ~> Delete\nUpdate, Insert, Delete union(byName: true)~> Union1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['RecordId'],\n\tformat: 'table',\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (\"ds_adls2_stnidoprodeastau100_log\"),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tRecordId,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tEmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayslipLineItemId,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tAlterRowCondition\n\t)) ~> SinkSqlDraftPreceda"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_B3_Payslips_DedupeDefinitiv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayslips"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPreceda",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Window1"
						}
					],
					"script": "parameters{\n\tPipelineTriggerTime as string,\n\tPipelineRunId as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayslips\nFilter1 alterRow(deleteIf(true())) ~> AlterRow1\nWindow1 aggregate(groupBy(EmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayslipLineItemId,\n\t\tDepartmentCode,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate),\n\tCountRows = count('1')) ~> Aggregate1\nAggregate1 filter(CountRows>1) ~> Filter1\nSourceSqlDefinitivPayslips window(over(EmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayslipLineItemId,\n\t\tDepartmentCode,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate),\n\tRowNumber = rowNumber()) ~> Window1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:true,\n\tkeys:['EmployeeId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> SinkSqlDraftPreceda"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_C1_Payslips_DraftReportViews')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlPrecedaPayslip2"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlServiceList"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlPrecedaMap"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlPreceedaPayCodes"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitivPayCodes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDraftPayslipReportView",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "RecordIsDefinitiv"
						},
						{
							"name": "RecordIsPreceda"
						},
						{
							"name": "InnerPrecedaMap1"
						},
						{
							"name": "RightOuterPrecedaPayslip21"
						},
						{
							"name": "LeftOuterPrecedaPayCodes"
						},
						{
							"name": "RightOuterPrecedaPayslip22"
						},
						{
							"name": "LeftOuterDefinitivPayCodes"
						},
						{
							"name": "PayCodeIsReport"
						},
						{
							"name": "UnionPrecedaDefinitiv"
						},
						{
							"name": "SelectServiceList"
						},
						{
							"name": "SelectDefinitivPayCode"
						},
						{
							"name": "SelectPrecedaPayCode"
						},
						{
							"name": "SelectPrecedaMap"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordWatermark as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as string,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlPrecedaPayslip2\nsource(output(\n\t\tCode as string,\n\t\tService_Name as string,\n\t\tService_ID as string,\n\t\tBase as string,\n\t\tOwner as string,\n\t\tAddress as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tPostal_Code as double,\n\t\tCountry as string,\n\t\tPlaces as double,\n\t\tDate_of_NIDO_Transition as date,\n\t\tDateTNKManagedFrom as date,\n\t\tPreviousOwner as string,\n\t\tBrand as string,\n\t\tRegistered_Name as string,\n\t\tLatitude as decimal(18,6),\n\t\tLongitude as decimal(18,6),\n\t\tDateServiceClosed as date,\n\t\tService_or_Office as string,\n\t\tApprovedProvider as string,\n\t\tApprovedProviderABN as string,\n\t\tApprovedProviderNumber as string,\n\t\tProposedOpenDate as date,\n\t\t{Project Manager / Company} as string,\n\t\t{Landscaping Company} as string,\n\t\tArchitects as string,\n\t\t{Construction completion date} as date,\n\t\t{Yard completion date} as date,\n\t\t{Fitout start date} as date,\n\t\t{Service approval pre-inspection date} as date,\n\t\t{Service approval status} as string,\n\t\t{Start up person} as string,\n\t\t{Notes on progress} as string,\n\t\t{Stage in service lifecycle} as string,\n\t\t{Type of proposal} as string,\n\t\t{ESM First Name} as string,\n\t\t{ESM Last Name} as string,\n\t\t{ESM Mobile Number} as string,\n\t\t{ESM Email} as string,\n\t\tServiceAdminFirstName as string,\n\t\tServiceAdminLastName as string,\n\t\tServiceAdminEmail as string,\n\t\t{Business Phone} as string,\n\t\tOpen as string,\n\t\tClose as string,\n\t\t{Email Address} as string,\n\t\tWebsite as string,\n\t\tSupplierCompany as string,\n\t\t{Staff Employer} as string,\n\t\tModified as timestamp,\n\t\tID as integer,\n\t\tService_Approval_Date as date,\n\t\tDateTNKAcquired as date,\n\t\tCreditCardAcquital as boolean,\n\t\tRent as decimal(19,4),\n\t\t{Board Approval Date} as date,\n\t\t{DA date} as date,\n\t\t{AFL signed date} as date,\n\t\tOwnerEmail as string,\n\t\tSageServiceCode as string,\n\t\tPQLEmail as string,\n\t\tBaseFuture as string,\n\t\tPreviousPlaces as integer,\n\t\tDatePlacesChanged as date,\n\t\tPQLEmail2 as string,\n\t\tLandlordsName as string,\n\t\tLandlordsEmailAddress as string,\n\t\tLandlordsPhoneNumber as string,\n\t\tLandlordsEntity as string,\n\t\tLandlordsAddress as string,\n\t\tProposedFeesOvers as decimal(19,4),\n\t\tProposedFeesUnders as decimal(19,4),\n\t\tDA_Status as string,\n\t\tBoard_Approval_Status as string,\n\t\tOccupancy_Certificate as boolean,\n\t\t{LL Mortgagee consent to Lease} as boolean,\n\t\t{Lease registered} as boolean,\n\t\t{External counsel signed off} as boolean,\n\t\t{Bank Guarantee to be issued date} as date,\n\t\t{Corporate Guarantor details} as string,\n\t\t{Corporate Guarantor Capped Amount} as decimal(19,4),\n\t\t{Capital Contribution payable to Tenant under the AFL or Lease} as string,\n\t\t{Capital Contribution Amount} as decimal(19,4),\n\t\t{Estimated capital expenditure expected to be paid by Tenant for set-up} as decimal(19,4),\n\t\t{Tenant Insurance in place} as boolean,\n\t\t{Estimated Gross Turnover - Insurance} as decimal(19,4),\n\t\t{Estimated Annual Wages - Insurance} as decimal(19,4),\n\t\t{Contents Value - Insurance} as decimal(19,4),\n\t\tBrand_at_TNK_PurchaseDate as string,\n\t\tBrand_Change_Date as date,\n\t\tBrand_Before_Change as string,\n\t\tAverageDailyFee as decimal(19,4),\n\t\tBase4Reports as string,\n\t\tDateTNDAcquired as date,\n\t\tWaitListSoftware as string,\n\t\tNominatedSupervisorID as integer,\n\t\tService_CRN as string,\n\t\t{Provider CRN (Proda)} as string,\n\t\t{Cluster Name} as string,\n\t\t{KMs to Cluster Lead Service} as double,\n\t\tCurriculumLeaderEmail as string,\n\t\t{Board Approval Method} as string,\n\t\t{Acquisition Category} as string,\n\t\tBizNameRenewal as date,\n\t\t{AFL Status} as string,\n\t\t{Lease Staus} as string,\n\t\t{Nomos updated} as boolean,\n\t\t{ROE Status} as string,\n\t\t{Bank Guarantee Amount} as decimal(19,4),\n\t\tWkBeginSpaceToMyWL as date,\n\t\tLGAname_deprecated as string,\n\t\t{Purpose Built or Converted} as string,\n\t\tLGAcode_deprecated as integer,\n\t\tSEIFAdecileLGA as integer,\n\t\tSA2code as integer,\n\t\tSA2name as string,\n\t\t{Year building built} as integer,\n\t\t{No 0-5 Year olds} as float,\n\t\tAveHouseholdIncome as decimal(19,4),\n\t\tAveMortgageRepayments as decimal(19,4),\n\t\tUnemploymentRate as float,\n\t\tAveWeeklyRental as decimal(19,4),\n\t\tAveWeeklyHouseholdIncome as decimal(19,4),\n\t\tBirthRate2018 as float,\n\t\t{Population Growth Est 2020-2025} as float,\n\t\t{Female Workforce Particpation Rate} as float,\n\t\t{Population Density per Hectare} as float,\n\t\t{No Dwellings} as integer,\n\t\t{No Houses} as integer,\n\t\t{No Apartments} as integer,\n\t\t{No. Housing Approvals} as integer,\n\t\tAveAgePopulation as float,\n\t\tSEIFAdecileSA2 as integer,\n\t\t{Curriculum Leader FirstName} as string,\n\t\t{Curriculum Leader LastName} as string,\n\t\t{Curriculum Leader} as string,\n\t\t{PQL FirstName} as string,\n\t\t{PQL LastName} as string,\n\t\tAreaManager as string,\n\t\tLastModified as timestamp,\n\t\tLastModifiedBy as string,\n\t\tAdded as timestamp,\n\t\tAddedBy as string,\n\t\tServiceApprovalGrantedDate as date,\n\t\tLandlordAgent as string,\n\t\tmanaged_bb as string,\n\t\tLGAname as string,\n\t\tEsmEmailThink as string,\n\t\tSAEmailThink as string,\n\t\tPQLEmailThink as string,\n\t\tPQLEmail2Think as string,\n\t\tCLEmailThink as string,\n\t\tService_ID_History as string,\n\t\tEmailAddressThink as string,\n\t\tBBGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlServiceList\nsource(output(\n\t\tPreceedaCode as string,\n\t\tServiceCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlPrecedaMap\nsource(output(\n\t\tCode as string,\n\t\tDescription as string,\n\t\t{Description Group} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlPreceedaPayCodes\nsource(output(\n\t\tCode as string,\n\t\tDescription as string,\n\t\tDescriptionGroup as string,\n\t\treport as boolean,\n\t\tIsReportViewPayslipsFilter as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitivPayCodes\nSourceSqlPrecedaPayslip2 filter(RecordIsDefinitiv==true() \r\n    && PeriodEndingDate > toDate(\"2021-10-15\")) ~> RecordIsDefinitiv\nSourceSqlPrecedaPayslip2 filter(RecordIsPreceda==true() \r\n    && PeriodEndingDate <= toDate(\"2021-10-15\")) ~> RecordIsPreceda\nSelectServiceList, SelectPrecedaMap join({ServiceList.Code} == {PrecedaMap.ServiceCode},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> InnerPrecedaMap1\nInnerPrecedaMap1, RecordIsPreceda join({PrecedaMap.PreceedaCode} == DepartmentCode,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> RightOuterPrecedaPayslip21\nRightOuterPrecedaPayslip21, SelectPrecedaPayCode join(toString(HoursOrADCode) == {PrecedaPayCodes.Code},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftOuterPrecedaPayCodes\nInnerPrecedaMap1, RecordIsDefinitiv join({PrecedaMap.PreceedaCode} == ProjectCode,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> RightOuterPrecedaPayslip22\nRightOuterPrecedaPayslip22, SelectDefinitivPayCode join(HoursOrADCodeDesc == {DefinitivPayCodes.Description},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftOuterDefinitivPayCodes\nSourceSqlDefinitivPayCodes filter(IsReportViewPayslipsFilter==true()) ~> PayCodeIsReport\nLeftOuterDefinitivPayCodes, LeftOuterPrecedaPayCodes union(byName: true)~> UnionPrecedaDefinitiv\nSourceSqlServiceList select(mapColumn(\n\t\t{ServiceList.Code} = Code,\n\t\t{ServiceList.Owner} = Owner\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectServiceList\nPayCodeIsReport select(mapColumn(\n\t\t{DefinitivPayCodes.Code} = Code,\n\t\t{DefinitivPayCodes.Description} = Description,\n\t\t{DefinitivPayCodes.DescriptionGroup} = DescriptionGroup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDefinitivPayCode\nSourceSqlPreceedaPayCodes select(mapColumn(\n\t\t{PrecedaPayCodes.Code} = Code,\n\t\t{PrecedaPayCodes.Description} = Description,\n\t\t{PrecedaPayCodes.Description Group} = {Description Group}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPrecedaPayCode\nSourceSqlPrecedaMap select(mapColumn(\n\t\t{PrecedaMap.PreceedaCode} = PreceedaCode,\n\t\t{PrecedaMap.ServiceCode} = ServiceCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPrecedaMap\nUnionPrecedaDefinitiv alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['RecordId','RecordWatermark'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 20), 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'yyyy-MM-dd\\'T\\'HH-mm-ss'),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tServiceListCode = {ServiceList.Code},\n\t\tServiceListOwner = {ServiceList.Owner},\n\t\tPrecedaMapPreceedaCode = {PrecedaMap.PreceedaCode},\n\t\tPrecedaMapServiceCode = {PrecedaMap.ServiceCode},\n\t\tRecordId,\n\t\tRecordWatermark,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tDefinitivPayCode = {DefinitivPayCodes.Code},\n\t\tDefinitivPayCodeDescription = {DefinitivPayCodes.Description},\n\t\tDefinitivPayCodeDescriptionGroup = {DefinitivPayCodes.DescriptionGroup},\n\t\tPrecedaPayCode = {PrecedaPayCodes.Code},\n\t\tPrecedaPayCodeDescription = {PrecedaPayCodes.Description},\n\t\t{PrecedaPayCodeDescription Group} = {PrecedaPayCodes.Description Group}\n\t)) ~> SinkSqlDraftPayslipReportView"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FlattenDefinitivReportingArrays')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "08_Organizations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "parameters{\n\tsourceWildcardPathName as string ('ReportingLeaveApplications')\n}\nsource(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:[($sourceWildcardPathName)]) ~> source1\nsource1 foldDown(unroll(reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\ttransactionCommit: 'single',\n\treportSuccessOnError: false) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl2_stnidoprodeastau100_json_1')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FlattenOrgPayRuns_UpdateOrgPayRuns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "07_PayRuns"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitivPayRuns"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectSourceBlobDefinitivPayRuns"
						}
					],
					"script": "source(output(\n\t\tOrg as (LegalName as string, OrganizationId as string),\n\t\tOrgPayRun as (PipelineName as string, PipelineRunId as string, PipelineTriggerTime as string),\n\t\tPayCalendar as (atoLodgementsEnabled as boolean, description as string, payCalendarId as string, period as string, periodStartDate as string, proRataMode as string, weeklyFactor as double, weeklyFactorEquation as short),\n\t\tcurrentFinancialYearEndDate as string,\n\t\tcurrentFinancialYearStartDate as string,\n\t\tdateLastCalculated as string,\n\t\tdateOpened as string,\n\t\tdatePublished as string,\n\t\temployeeCount as short,\n\t\teofyLodgementStatus as string,\n\t\tfinancialYearEndDate as string,\n\t\tfinancialYearStartDate as string,\n\t\tinitiatingUserId as string,\n\t\tinitiatingUserName as string,\n\t\tlodgementStatus as string,\n\t\tnotes as string,\n\t\tpayCalendarId as string,\n\t\tpayCalendarName as string,\n\t\tpayRunId as string,\n\t\tpaymentDate as string,\n\t\tpayslipGenerationStatus as string,\n\t\tperiodEnd as string,\n\t\tperiodStart as string,\n\t\tpublishingUserId as string,\n\t\tpublishingUserName as string,\n\t\trunNumber as short,\n\t\tstatus as string,\n\t\tsuperannuationPaymentDate as string,\n\t\ttype as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitivPayRuns\nSelectSourceBlobDefinitivPayRuns alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nSourceBlobDefinitivPayRuns select(mapColumn(\n\t\t{Org.LegalName} = Org.LegalName,\n\t\t{Org.OrganizationId} = Org.OrganizationId,\n\t\t{OrgPayRun.PayCalendar} = OrgPayRun.PipelineName,\n\t\t{OrgPayRun.PipelineRunId} = OrgPayRun.PipelineRunId,\n\t\t{OrgPayRun.PipelineTriggerTime} = OrgPayRun.PipelineTriggerTime,\n\t\t{PayCalendar.atoLodgementsEnabled} = PayCalendar.atoLodgementsEnabled,\n\t\t{PayCalendar.payCalendarId} = PayCalendar.payCalendarId,\n\t\t{PayCalendar.period} = PayCalendar.period,\n\t\t{PayCalendar.periodStartDate} = PayCalendar.periodStartDate,\n\t\t{PayCalendar.proRataMode} = PayCalendar.proRataMode,\n\t\t{PayCalendar.weeklyFactor} = PayCalendar.weeklyFactor,\n\t\t{PayCalendar.weeklyFactorEquation} = PayCalendar.weeklyFactorEquation,\n\t\tcurrentFinancialYearEndDate,\n\t\tcurrentFinancialYearStartDate,\n\t\tdateLastCalculated,\n\t\tdateOpened,\n\t\tdatePublished,\n\t\temployeeCount,\n\t\teofyLodgementStatus,\n\t\tfinancialYearEndDate,\n\t\tfinancialYearStartDate,\n\t\tinitiatingUserId,\n\t\tinitiatingUserName,\n\t\tlodgementStatus,\n\t\tnotes,\n\t\tpayCalendarId,\n\t\tpayCalendarName,\n\t\tpayRunId,\n\t\tpaymentDate,\n\t\tpayslipGenerationStatus,\n\t\tperiodEnd,\n\t\tperiodStart,\n\t\tpublishingUserId,\n\t\tpublishingUserName,\n\t\trunNumber,\n\t\tstatus,\n\t\tsuperannuationPaymentDate,\n\t\ttype,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSourceBlobDefinitivPayRuns\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['payRunId'],\n\tformat: 'table',\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adls2_stnidoprodeastau100_log',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tlegalName = {Org.LegalName},\n\t\torganizationId = {Org.OrganizationId},\n\t\tpayCalendar = {OrgPayRun.PayCalendar},\n\t\tpipelineRunId = {OrgPayRun.PipelineRunId},\n\t\tpipelineTriggerTime = {OrgPayRun.PipelineTriggerTime},\n\t\tatoLodgementsEnabled = {PayCalendar.atoLodgementsEnabled},\n\t\tpayCalendarId = {PayCalendar.payCalendarId},\n\t\tperiod = {PayCalendar.period},\n\t\tperiodStartDate = {PayCalendar.periodStartDate},\n\t\tproRataMode = {PayCalendar.proRataMode},\n\t\tweeklyFactor = {PayCalendar.weeklyFactor},\n\t\tweeklyFactorEquation = {PayCalendar.weeklyFactorEquation},\n\t\tcurrentFinancialYearEndDate,\n\t\tcurrentFinancialYearStartDate,\n\t\tdateLastCalculated,\n\t\tdateOpened,\n\t\tdatePublished,\n\t\temployeeCount,\n\t\teofyLodgementStatus,\n\t\tfinancialYearEndDate,\n\t\tfinancialYearStartDate,\n\t\tinitiatingUserId,\n\t\tinitiatingUserName,\n\t\tlodgementStatus,\n\t\tnotes,\n\t\tpayCalendarId,\n\t\tpayCalendarName,\n\t\tpayRunId,\n\t\tpaymentDate,\n\t\tpayslipGenerationStatus,\n\t\tperiodEnd,\n\t\tperiodStart,\n\t\tpublishingUserId,\n\t\tpublishingUserName,\n\t\trunNumber,\n\t\tstatus,\n\t\tsuperannuationPaymentDate,\n\t\ttype,\n\t\tSourceFileName\n\t)) ~> SinkSqlDefinitiv"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FlattenOrgRosters_UpdateOrgRosters1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "AlterRowConditionInsert"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "AlterRowConditionUpdate"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "AlterRowConditionDelete"
						},
						{
							"name": "UnionAlterRowCondtions"
						},
						{
							"name": "CastTypes"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          {OrgRosters.PipelineName} as string,",
						"          {OrgRosters.PipelineRunId} as string,",
						"          {OrgRosters.PipelineTriggerTime} as string,",
						"          ceaseDate as string,",
						"          commencementDate as string,",
						"          costingSettings as string,",
						"          customPeriodDuration as short,",
						"          defaultPeriodDurationType as string,",
						"          description as string,",
						"          isTemplate as boolean,",
						"          name as string,",
						"          notifyEmployeesByDefault as boolean,",
						"          paid as boolean,",
						"          rosterId as string,",
						"          showAsTwelveHourTime as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceBlobDefinitiv",
						"source(output(",
						"          ceaseDate as date,",
						"          commencementDate as date,",
						"          costingSettings as string,",
						"          customPeriodDuration as short,",
						"          defaultPeriodDurationType as string,",
						"          description as string,",
						"          isTemplate as boolean,",
						"          name as string,",
						"          notifyEmployeesByDefault as boolean,",
						"          paid as boolean,",
						"          rosterId as string,",
						"          showAsTwelveHourTime as boolean,",
						"          organizationId as string,",
						"          pipelineRunId as string,",
						"          pipelineTriggerTime as string,",
						"          SourceFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceSqlDefinitiv",
						"UnionAlterRowCondtions alterRow(insertIf(AlterRowCondition==\"Insert\"),",
						"     updateIf(AlterRowCondition==\"Update\"),",
						"     deleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1",
						"CastTypes, SourceSqlDefinitiv exists(upper(SourceBlobDefinitiv@rosterId) == upper(SourceSqlDefinitiv@rosterId),",
						"     negate:true,",
						"     broadcast: 'auto')~> NotExistsInsert",
						"NotExistsInsert derive(AlterRowCondition = \"Insert\") ~> AlterRowConditionInsert",
						"CastTypes, SourceSqlDefinitiv exists(upper(SourceBlobDefinitiv@rosterId) == upper(SourceSqlDefinitiv@rosterId),",
						"     negate:false,",
						"     broadcast: 'auto')~> ExistsUpdate",
						"ExistsUpdate derive(AlterRowCondition = \"Update\") ~> AlterRowConditionUpdate",
						"SourceSqlDefinitiv, SourceBlobDefinitiv exists(upper(SourceSqlDefinitiv@rosterId) == upper(SourceBlobDefinitiv@rosterId),",
						"     negate:true,",
						"     broadcast: 'auto')~> NotExistsDelete",
						"NotExistsDelete derive(AlterRowCondition = \"Delete\") ~> AlterRowConditionDelete",
						"AlterRowConditionInsert, AlterRowConditionUpdate, AlterRowConditionDelete union(byName: true)~> UnionAlterRowCondtions",
						"SourceBlobDefinitiv derive(ceaseDate = toDate(ceaseDate),",
						"          commencementDate = toDate(commencementDate)) ~> CastTypes",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['rosterId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',",
						"     rejectedData_folderPath: 'ds_adsl2_stnidoprodeastau100_csv/definitiv.OrganizationRosters',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          organizationId = {Org.OrganizationId},",
						"          pipelineRunId = {OrgRosters.PipelineRunId},",
						"          pipelineTriggerTime = {OrgRosters.PipelineTriggerTime},",
						"          ceaseDate,",
						"          commencementDate,",
						"          costingSettings,",
						"          customPeriodDuration,",
						"          defaultPeriodDurationType,",
						"          description,",
						"          isTemplate,",
						"          name,",
						"          notifyEmployeesByDefault,",
						"          paid,",
						"          rosterId,",
						"          showAsTwelveHourTime",
						"     )) ~> SinkSqlDefinitiv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl2_stnidoprodeastau100_json_1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['ReportingLeaveApplications']) ~> source1\nsource1 foldDown(unroll(reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['ReportingLeaveApplications.csv'],\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl2_stnidoprodeastau100_json_1')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_TruncateInsertCusomReportWages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "sourceApi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FilterWeekEndingDate"
						},
						{
							"name": "CastDateType"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tpipelineRunId as string (uuid()),\n\tpipelineTriggerTime as string\n}\nsource(output(\n\t\tamount as double,\n\t\tdepartment as string,\n\t\temployeeId as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tpayItemId as string,\n\t\tpayRunId as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayrunGroup as string,\n\t\tpayslipId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nCastDateType filter(greater(weekEndingDate, toDate(\"2021-10-15\"))) ~> FilterWeekEndingDate\nSelect1 derive(weekEndingDate = toDate(weekEndingDate),\n\t\t{hoursOrA/DCode} = toInteger({hoursOrA/DCode})) ~> CastDateType\nsourceApi select(mapColumn(\n\t\tamount,\n\t\tdepartment,\n\t\temployeeId,\n\t\tfirstName,\n\t\tfullName,\n\t\t{hoursOrA/DCode},\n\t\t{hoursOrA/DCodeDesc},\n\t\tidNumber,\n\t\tlevel1Code,\n\t\tlevel2Code,\n\t\twageLineItemId = lineItemId,\n\t\tpayItemId,\n\t\tpayRunId,\n\t\tpayRunOrganizationId,\n\t\tpayRunPayRunId,\n\t\tpayRunPeriodEndDate,\n\t\tpayRunPeriodStartDate,\n\t\tpayrunGroup,\n\t\tpayslipId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpositionID,\n\t\tpositionTitle,\n\t\troom,\n\t\tsurname,\n\t\tweekEndingDate,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilterWeekEndingDate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportWagesErrorOutput/\", toString($pipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $pipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tamount,\n\t\tdepartment,\n\t\temployeeId,\n\t\tfirstName,\n\t\tfullName,\n\t\t{hoursOrA/DCode},\n\t\t{hoursOrA/DCodeDesc},\n\t\tidNumber,\n\t\tlevel1Code,\n\t\tlevel2Code,\n\t\twageLineItemId,\n\t\tpayItemId,\n\t\tpayRunId,\n\t\tpayRunOrganizationId,\n\t\tpayRunPayRunId,\n\t\tpayRunPeriodEndDate,\n\t\tpayRunPeriodStartDate,\n\t\tpayrunGroup,\n\t\tpayslipId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpositionID,\n\t\tpositionTitle,\n\t\troom,\n\t\tsurname,\n\t\tweekEndingDate,\n\t\tSourceFileName\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_TruncateInsertCustomReportPayslips')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "SourceApi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CastDateType1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string,\n\tPipelineName as string\n}\nsource(output(\n\t\tbaseRate as double,\n\t\tdepartmentCode as string,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tnumberOfUnits as double,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\tprojectCode as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceApi\nSelect2 derive(periodEndingDate = toDate(periodEndingDate),\n\t\tperiodStartDate = toDate(periodStartDate),\n\t\tpipelineTriggerTime = fromUTC(toTimestamp(pipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time'),\n\t\tpayDate = toDate(payDate)) ~> CastDateType1\nSourceApi select(mapColumn(\n\t\tbaseRate,\n\t\tdepartmentCode,\n\t\temployeeId,\n\t\temploymentTypeCode,\n\t\temploymentTypeCodeDesc,\n\t\tfirstName,\n\t\t{hoursOrA/DCode},\n\t\t{hoursOrA/DCodeDesc},\n\t\tidNumber,\n\t\tlevel1Code,\n\t\tlevel2Code,\n\t\tlineItemId,\n\t\tnumberOfUnits,\n\t\tpayDate,\n\t\tpayMethodCode,\n\t\tpayMethodCodeDesc,\n\t\tpayRunOrganizationId,\n\t\tpayRunPayRunId,\n\t\tpayRunPeriodEndDate,\n\t\tpayRunPeriodStartDate,\n\t\tpayslipId,\n\t\tpayslipNumber,\n\t\tperiodEndingDate,\n\t\tperiodStartDate,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpositionTitle,\n\t\tprojectCode,\n\t\trate,\n\t\tsurname,\n\t\tvalue,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nCastDateType1 filter(greater(periodEndingDate, toDate(\"2021-10-15\", 'yyyy-MM-dd'))) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/\", $PipelineName, \"/\",\r\n    toString(toTimestamp(left($PipelineTriggerTime, 26), 'yyyy-MM-dd\\'T\\'HH:mm:ss')),\r\n    \"_PipelineRunId_\", $PipelineRunId, \"_ErrorOutput\")),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportRosters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "04_Rosters"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefintiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CastDateType"
						}
					],
					"script": "source(output(\n\t\t{CustomReportRosters.PipelineRunId} as string,\n\t\t{CustomReportRosters.PipelineTriggerTime} as string,\n\t\tamount as double,\n\t\tcreatedByUser as string,\n\t\tcreatedDate as string,\n\t\tdate as string,\n\t\temployeeId as string,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tfirstName as string,\n\t\tlastName as string,\n\t\tmodifiedByUser as string,\n\t\tmodifiedDate as string,\n\t\tparamOrganizationId as string,\n\t\tparamRosterId as string,\n\t\tquantity as double,\n\t\troom as string,\n\t\trosterEntryId as string,\n\t\trosterId as string,\n\t\tserviceCode as string,\n\t\tstart as string,\n\t\tvarRosterDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tlimit: 100,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitiv\nSourceBlobDefinitiv derive(date = toDate(date),\n\t\tcreatedDate = toDate(createdDate),\n\t\tmodifiedDate = toDate(modifiedDate),\n\t\tRecordCreatedDate = toDate({CustomReportRosters.PipelineTriggerTime}),\n\t\tRecordIsDeleted = false(),\n\t\tRecordModifiedDate = toDate({CustomReportRosters.PipelineTriggerTime})) ~> CastDateType\nCastDateType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adls2_stnidoprodeastau100_log',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tPipelineRunId = {CustomReportRosters.PipelineRunId},\n\t\tPipelineTriggerTime = {CustomReportRosters.PipelineTriggerTime},\n\t\tamount,\n\t\tcreatedByUser,\n\t\tcreatedDate,\n\t\tdate,\n\t\temployeeId,\n\t\temploymentType,\n\t\tend,\n\t\tfirstName,\n\t\tlastName,\n\t\tmodifiedByUser,\n\t\tmodifiedDate,\n\t\tparamOrganizationId,\n\t\tparamRosterId,\n\t\tquantity,\n\t\troom,\n\t\trosterEntryId,\n\t\trosterId,\n\t\tserviceCode,\n\t\tstart,\n\t\tvarRosterDate,\n\t\tSourceFileName,\n\t\tRecordCreatedDate,\n\t\tRecordIsDeleted,\n\t\tRecordModifiedDate\n\t)) ~> SinkSqlDefintiv"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportTimesheets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03_Timesheets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tapprovalStatus as string,\n\t\tcentreCostCode as string,\n\t\tdate as string,\n\t\temployee as string,\n\t\temployeeId as string,\n\t\t{employeeRef.No} as integer,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tleaveApplicationId as string,\n\t\torganizationId as string,\n\t\tpayRunId as string,\n\t\tperiodEndDate as date,\n\t\tperiodStartDate as date,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\troom as string,\n\t\troomCostCode as string,\n\t\troster as string,\n\t\trosterId as string,\n\t\tstart as string,\n\t\ttimesheetId as string,\n\t\ttotalCost as double,\n\t\ttotalHours as double,\n\t\tworkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['timesheetId','leaveApplicationId','date'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportTimesheets1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03_Timesheets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "sourceApi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "CastDateType"
						}
					],
					"script": "parameters{\n\tpipelineRunId as string,\n\tpipelineTriggerTime as string\n}\nsource(output(\n\t\tapprovalStatus as string,\n\t\tcentreCostCode as string,\n\t\tdate as string,\n\t\temployee as string,\n\t\temployeeId as string,\n\t\t{employeeRef.No} as integer,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tleaveApplicationId as string,\n\t\torganizationOrganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\troom as string,\n\t\troomCostCode as string,\n\t\troster as string,\n\t\trosterId as string,\n\t\tstart as string,\n\t\ttimesheetId as string,\n\t\ttotalCost as double,\n\t\ttotalHours as double,\n\t\tworkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nsourceApi derive(date = toDate(date),\n\t\tpipelineTriggerTime = fromUTC(toTimestamp(pipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType\nCastDateType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportTimesheetsErrorOutput/\", toString($pipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $pipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tapprovalStatus,\n\t\tcentreCostCode,\n\t\tdate,\n\t\temployee,\n\t\temployeeId,\n\t\tNo = {employeeRef.No},\n\t\temploymentType,\n\t\tend,\n\t\tleaveApplicationId,\n\t\torganizationOrganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\troom,\n\t\troomCostCode,\n\t\troster,\n\t\trosterId,\n\t\tstart,\n\t\ttimesheetId,\n\t\ttotalCost,\n\t\ttotalHours,\n\t\tworkType,\n\t\tSourceFileName\n\t)) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateCusomReportWages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "sourceApi"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sourceSql"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "FilterWeekEndingDate"
						},
						{
							"name": "CastDateType1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Insert"
						},
						{
							"name": "Update"
						},
						{
							"name": "Delete"
						},
						{
							"name": "UnionAlterRowCondition"
						},
						{
							"name": "NotExistsDelete"
						},
						{
							"name": "CastDateType2"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "ExistsUpdate"
						}
					],
					"script": "parameters{\n\tpipelineRunId as string (\"1b8c16e7-2b69-4758-b37c-06a6aa153d3c\"),\n\tpipelineTriggerTime as string (\"2022-01-14T00:59:42.8892361Z\")\n}\nsource(output(\n\t\tamount as double,\n\t\tdepartment as string,\n\t\temployeeId as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tpayItemId as string,\n\t\tpayRunId as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayrunGroup as string,\n\t\tpayslipId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceApi\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayItemId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tWageLineItemId as integer,\n\t\tAmount as decimal(19,4),\n\t\tDepartment as string,\n\t\tFirstName as string,\n\t\tFullName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tPayRunGroup as string,\n\t\tPositionID as string,\n\t\tPositionTitle as string,\n\t\tRoom as string,\n\t\tSurname as string,\n\t\tWeekEndingDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSql\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\"),\n\tdeleteIf(AlterRowCondition==\"Delete\")) ~> AlterRow1\nCastDateType1 filter(greater(WeekEndingDate, toDate(\"2021-10-15\"))) ~> FilterWeekEndingDate\nSelect1 derive(WeekEndingDate = toDate(WeekEndingDate),\n\t\tHoursOrADCode = toInteger(HoursOrADCode),\n\t\tPipelineTriggerTime = fromUTC(toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType1\nsourceApi select(mapColumn(\n\t\tAmount = amount,\n\t\tDepartment = department,\n\t\tEmployeeId = employeeId,\n\t\tFirstName = firstName,\n\t\tFullName = fullName,\n\t\tHoursOrADCode = {hoursOrA/DCode},\n\t\tHoursOrADCodeDesc = {hoursOrA/DCodeDesc},\n\t\tIdNumber = idNumber,\n\t\tLevel1Code = level1Code,\n\t\tLevel2Code = level2Code,\n\t\tLineItemId = lineItemId,\n\t\tPayItemId = payItemId,\n\t\tPayRunId = payRunId,\n\t\tOrganizationId = payRunOrganizationId,\n\t\tPayRunId = payRunPayRunId,\n\t\tPayRunPeriodEndDate = payRunPeriodEndDate,\n\t\tPayRunPeriodStartDate = payRunPeriodStartDate,\n\t\tPayrunGroup = payrunGroup,\n\t\tPayslipId = payslipId,\n\t\tPipelineRunId = pipelineRunId,\n\t\tPipelineTriggerTime = pipelineTriggerTime,\n\t\tPositionID = positionID,\n\t\tPositionTitle = positionTitle,\n\t\tRoom = room,\n\t\tSurname = surname,\n\t\tWeekEndingDate = weekEndingDate,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsourceSql select(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nNotExistsInsert derive(AlterRowCondition = \"Insert\",\n\t\tRecordCreatedDate = PipelineTriggerTime) ~> Insert\nExistsUpdate derive(AlterRowCondition = \"Update\",\n\t\tRecordModifiedDate = PipelineTriggerTime) ~> Update\nNotExistsDelete derive(AlterRowCondition = \"Delete\",\n\t\tRecordModifiedDate = PipelineTriggerTime,\n\t\tRecordIsDeleted = true()) ~> Delete\nUpdate, Insert, Delete union(byName: true)~> UnionAlterRowCondition\nCastDateType2, FilterWeekEndingDate exists(Select2@OrganizationId == Select1@OrganizationId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsDelete\nSelect2 derive(PipelineTriggerTime = fromUTC(toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss'), 'A.U.S. Eastern Standard Time')) ~> CastDateType2\nFilterWeekEndingDate, CastDateType2 exists(Select1@OrganizationId == Select2@OrganizationId\n\t&& Select1@EmployeeId == Select2@EmployeeId\n\t&& Select1@PayRunId == Select2@PayRunId\n\t&& Select1@PayItemId == Select2@PayItemId\n\t&& LineItemId == WageLineItemId\n\t&& Select1@Department == Select2@Department\n\t&& Select1@PositionTitle == Select2@PositionTitle\n\t&& CastDateType1@HoursOrADCode == Select2@HoursOrADCode\n\t&& Select1@HoursOrADCodeDesc == Select2@HoursOrADCodeDesc\n\t&& Select1@Level1Code == Select2@Level1Code\n\t&& Select1@Level2Code == Select2@Level2Code\n\t&& CastDateType1@WeekEndingDate == Select2@WeekEndingDate,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nFilterWeekEndingDate, CastDateType2 exists(Select1@OrganizationId == Select2@OrganizationId,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['OrganizationId','EmployeeId','PayRunId','PayslipId','PayItemId','WageLineItemId','Department','PositionTitle','Level1Code','Level2Code','HoursOrADCode','HoursOrADCodeDesc','WeekEndingDate'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportRostersWagesOutput/\", toString($pipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $pipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tAmount,\n\t\tDepartment,\n\t\tEmployeeId,\n\t\tFirstName,\n\t\tFullName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tLineItemId,\n\t\tPayItemId,\n\t\tPayRunId,\n\t\tOrganizationId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayrunGroup = UnionAlterRowCondition@PayrunGroup,\n\t\tPayslipId,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tPositionID,\n\t\tPositionTitle,\n\t\tRoom,\n\t\tSurname,\n\t\tWeekEndingDate,\n\t\tSourceFileName,\n\t\tAlterRowCondition,\n\t\tRecordModifiedDate,\n\t\tRecordCreatedDate,\n\t\tRecordId,\n\t\tRecordVersion,\n\t\tRecordIsDeleted,\n\t\tPipelineSourceFileName,\n\t\tWageLineItemId,\n\t\tPayRunGroup = UnionAlterRowCondition@PayRunGroup\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateDraftPayslips')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tbaseRate as double,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tnumberOfUnits as double,\n\t\torganizationId as string,\n\t\tpayDate as timestamp,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as timestamp,\n\t\tperiodStartDate as timestamp,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\trowUrlColumn: 'SourceFileName',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nSelect1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nsource1 select(mapColumn(\n\t\t{Base Rate} = baseRate,\n\t\t{Employment Type Code} = employmentTypeCode,\n\t\t{Employment Type Code Desc} = employmentTypeCodeDesc,\n\t\t{First Name} = firstName,\n\t\thoursOrADCode_definitiv = {hoursOrA/DCode},\n\t\thoursOrADCodeDesc_definitiv = {hoursOrA/DCodeDesc},\n\t\t{ID Number} = idNumber,\n\t\t{Level 1 Code} = level1Code,\n\t\t{Level 2 Code} = level2Code,\n\t\t{Number of Units} = numberOfUnits,\n\t\t{Pay Date} = payDate,\n\t\t{Pay Method Code} = payMethodCode,\n\t\t{Pay Method Code Desc} = payMethodCodeDesc,\n\t\t{Payslip Number} = payslipNumber,\n\t\t{Period Start Date} = periodStartDate,\n\t\t{Period Ending Date} = periodEndingDate,\n\t\t{Position Title} = positionTitle,\n\t\tRate = rate,\n\t\tSurname = surname,\n\t\tValue = value,\n\t\tpayslipId,\n\t\tpayRunId,\n\t\temployeeId,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['employeeId','payslipId','Employment Type Code','Level 1 Code','Level 2 Code','Period Start Date','Period Ending Date'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Base Rate},\n\t\t{Employment Type Code},\n\t\t{Employment Type Code Desc},\n\t\t{First Name},\n\t\thoursOrADCode_definitiv,\n\t\thoursOrADCodeDesc_definitiv,\n\t\t{ID Number},\n\t\t{Level 1 Code},\n\t\t{Level 2 Code},\n\t\t{Number of Units},\n\t\t{Pay Date},\n\t\t{Pay Method Code},\n\t\t{Pay Method Code Desc},\n\t\t{Payslip Number},\n\t\t{Period Start Date},\n\t\t{Period Ending Date},\n\t\t{Position Title},\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tpayslipId,\n\t\tpayRunId,\n\t\temployeeId,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateDraftPayslips_Definitiv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDraft"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SourceSqlDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "UnionAlterRowCondition"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "NotExistsInsert"
						},
						{
							"name": "Update"
						},
						{
							"name": "Insert"
						}
					],
					"script": "parameters{\n\tPipelineRunId as string,\n\tPipelineTriggerTime as string\n}\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDraft\nsource(output(\n\t\tRecordId as string,\n\t\tRecordVersion as binary,\n\t\tRecordCreatedDate as timestamp,\n\t\tRecordModifiedDate as timestamp,\n\t\tRecordIsDeleted as boolean,\n\t\tRecordIsDefinitiv as boolean,\n\t\tRecordIsPreceda as boolean,\n\t\tPipelineRunId as string,\n\t\tPipelineSourceFileName as string,\n\t\tPipelineTriggerTime as string,\n\t\tEmployeeId as string,\n\t\tOrganizationId as string,\n\t\tPayRunId as string,\n\t\tPayslipId as string,\n\t\tPayRunPeriodEndDate as date,\n\t\tPayRunPeriodStartDate as date,\n\t\tPayslipLineItemId as integer,\n\t\tPayslipNumber as string,\n\t\tBaseRate as double,\n\t\tDepartmentCode as string,\n\t\tEmploymentTypeCode as string,\n\t\tEmploymentTypeCodeDesc as string,\n\t\tFirstName as string,\n\t\tHoursOrADCode as integer,\n\t\tHoursOrADCodeDesc as string,\n\t\tIdNumber as integer,\n\t\tLevel1Code as string,\n\t\tLevel2Code as string,\n\t\tNumberOfUnits as double,\n\t\tPayDate as date,\n\t\tPayMethodCode as string,\n\t\tPayMethodCodeDesc as string,\n\t\tPeriodEndingDate as date,\n\t\tPeriodStartDate as date,\n\t\tPositionTitle as string,\n\t\tProjectCode as string,\n\t\tRate as double,\n\t\tSurname as string,\n\t\tValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceSqlDefinitiv\nUnionAlterRowCondition alterRow(insertIf(AlterRowCondition==\"Insert\"),\n\tupdateIf(AlterRowCondition==\"Update\")) ~> AlterRow1\nUpdate, Insert union(byName: true)~> UnionAlterRowCondition\nSourceSqlDefinitiv, SourceSqlDraft exists(SourceSqlDefinitiv@RecordId == SourceSqlDraft@RecordId \r\n    && SourceSqlDefinitiv@RecordVersion != SourceSqlDraft@RecordVersion,\n\tnegate:false,\n\tbroadcast: 'left')~> ExistsUpdate\nSourceSqlDefinitiv, SourceSqlDraft exists(SourceSqlDefinitiv@RecordId == SourceSqlDraft@RecordId,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExistsInsert\nExistsUpdate derive(AlterRowCondition = \"Update\") ~> Update\nNotExistsInsert derive(AlterRowCondition = \"Insert\") ~> Insert\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['RecordId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: (concat(\"ds_adsl2_stnidoprodeastau100_json/definitiv.CustomReportPayslipsErrorOutput/\", toString($PipelineTriggerTime, 'yyyy-MM-ddTHH-mm'), \"_\", $PipelineRunId)),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tRecordId,\n\t\tRecordCreatedDate,\n\t\tRecordModifiedDate,\n\t\tRecordIsDeleted,\n\t\tRecordIsDefinitiv,\n\t\tRecordIsPreceda,\n\t\tPipelineRunId,\n\t\tPipelineSourceFileName,\n\t\tPipelineTriggerTime,\n\t\tEmployeeId,\n\t\tOrganizationId,\n\t\tPayRunId,\n\t\tPayslipId,\n\t\tPayRunPeriodEndDate,\n\t\tPayRunPeriodStartDate,\n\t\tPayslipLineItemId,\n\t\tPayslipNumber,\n\t\tBaseRate,\n\t\tDepartmentCode,\n\t\tEmploymentTypeCode,\n\t\tEmploymentTypeCodeDesc,\n\t\tFirstName,\n\t\tHoursOrADCode,\n\t\tHoursOrADCodeDesc,\n\t\tIdNumber,\n\t\tLevel1Code,\n\t\tLevel2Code,\n\t\tNumberOfUnits,\n\t\tPayDate,\n\t\tPayMethodCode,\n\t\tPayMethodCodeDesc,\n\t\tPeriodEndingDate,\n\t\tPeriodStartDate,\n\t\tPositionTitle,\n\t\tProjectCode,\n\t\tRate,\n\t\tSurname,\n\t\tValue,\n\t\tAlterRowCondition\n\t)) ~> SinkSql"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateDraftWages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tamount as double,\n\t\tdepartment as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\torganizationId as string,\n\t\tpayRunId as string,\n\t\tpayrunGroup as string,\n\t\tperiodEndDate as date,\n\t\tperiodStartDate as date,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as timestamp,\n\t\temployeeId as string,\n\t\tpayItemId as string,\n\t\tpayRunOrganizationId as string,\n\t\tpayRunPayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\trowUrlColumn: 'SourceFileName',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nSelect1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nsource1 select(mapColumn(\n\t\tAmount = amount,\n\t\tDepartment = department,\n\t\tFirstName = firstName,\n\t\tFullName = fullName,\n\t\thoursOrADCode_definitiv = {hoursOrA/DCode},\n\t\thoursOrADCodeDesc_definitiv = {hoursOrA/DCodeDesc},\n\t\tID_Number = idNumber,\n\t\tPayrollEntity = level1Code,\n\t\tPayrollState = level2Code,\n\t\tPayrunGroup = payrunGroup,\n\t\tPositionID = positionID,\n\t\tPositionTitle = positionTitle,\n\t\tRoomName = room,\n\t\tSurname = surname,\n\t\tWeekEndingDate = weekEndingDate,\n\t\tperiodStartDate,\n\t\tperiodEndDate,\n\t\tpayItemId,\n\t\tpayslipId,\n\t\tpayRunId,\n\t\temployeeId,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['employeeId','payslipId','payItemId','WeekEndingDate','PayrollState','Department'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateEmployees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tdateOfBirth as date,\n\t\temailAddress as string,\n\t\temployeeId as string,\n\t\temployeeNumber as integer,\n\t\tfirstName as string,\n\t\tgender as string,\n\t\thiredDate as date,\n\t\tlastModified as string,\n\t\tmiddleName as string,\n\t\torganization as (name as string, organizationId as string),\n\t\torganizationId as string,\n\t\tpaymentAccounts as (bankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string), employeePaymentAccountId as string, paySplit as (amount as double, type as string), sortOrder as boolean)[],\n\t\tphoneNumbers as (type as string, value as string)[],\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpreferredName as string,\n\t\tstreetAddresses as (components as string, coordinate as string, countryCode as string, fullAddress as string, postCode as short, state as string, street as string, suburb as string, type as string)[],\n\t\tsuperAccounts as (ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, fundABN as long, fundESA as string, fundName as string, fundType as string, fundUSI as string, membershipNumber as string, smsfBankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string))[],\n\t\tsuperContributions as (amount as double, ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, employeeSuperannuationContributionId as string, minimumAmount as string, payItemDescription as string, payItemId as string, valueType as string)[],\n\t\tsurname as string,\n\t\ttaxDeclaration as (australianResidentForTaxPurposes as boolean, canEdit as boolean, claimDependantsOrSpecialTaxOffset as boolean, claimMedicareLevyVariation as boolean, claimSeniorsPensionersOffset as boolean, claimTaxFreeThreshold as boolean, effectiveDate as string, employeeId as string, employeeTaxDeclarationId as string, financialSupplementDebt as boolean, helpDebt as boolean, lodgementDate as string, lodgementStatus as string, signatureDate as string, signaturePresent as string, taxFileNumber as integer, taxFileNumberExemption as string, workingHolidayMaker as boolean),\n\t\ttitle as string,\n\t\tusername as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 select(mapColumn(\n\t\tdateOfBirth,\n\t\temailAddress,\n\t\temployeeId,\n\t\temployeeNumber,\n\t\tfirstName,\n\t\tgender,\n\t\thiredDate,\n\t\tlastModified,\n\t\tmiddleName,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tpreferredName,\n\t\tsurname,\n\t\ttitle,\n\t\tusername,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateEmployeesEmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tbaseRate as double,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as string,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tnumberOfUnits as double,\n\t\torganizationId as string,\n\t\tpayDate as string,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayRunId as string,\n\t\tpayRunPeriodEndDate as date,\n\t\tpayRunPeriodStartDate as date,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as string,\n\t\tperiodStartDate as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\tpositionTitle as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\treportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 foldDown(unroll(reportData, reportData),\n\tmapColumn(\n\t\tapprovers = reportData.approvers,\n\t\tdateSubmitted = reportData.dateSubmitted,\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tgender = reportData.gender,\n\t\tleaveAppNumDays = reportData.leaveAppNumDays,\n\t\tleaveApplicationId = reportData.leaveApplicationId,\n\t\tleaveDateEnd = reportData.leaveDateEnd,\n\t\tleaveDateStart = reportData.leaveDateStart,\n\t\tleaveNotes = reportData.leaveNotes,\n\t\tleavePaymentStatus = reportData.leavePaymentStatus,\n\t\tleaveReasonName = reportData.leaveReasonName,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tleaveUnitOfMeasure = reportData.leaveUnitOfMeasure,\n\t\tleaveUnits = reportData.leaveUnits,\n\t\tprintName = reportData.printName,\n\t\tstatus = reportData.status,\n\t\tsurname = reportData.surname,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Flatten1\nFlatten1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['leaveApplicationId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_UpdateReportingLeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\taddFooterRow as boolean,\n\t\taddStatusBar as boolean,\n\t\textraReportData as string[],\n\t\theaders as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],\n\t\torganizationId as string,\n\t\tpipelineRunId as string,\n\t\tpipelineTriggerTime as string,\n\t\treportData as (employeeId as string, employeeNumber as integer, firstName as string, leaveEntitlementHours as double, leaveProRataHours as double, leaveTotalHours as double, leaveTypeId as string, leaveTypeName as string, primaryDepartmentCode as short, primaryDepartmentGlCode as string, primaryDepartmentName as string, primaryLocationCode as string, primaryLocationGlCode as string, primaryLocationName as string, primaryProjectCode as string, primaryProjectGlCode as string, primaryProjectName as string, primaryRoleCode as string, primaryRoleName as string, printName as string, surname as string)[],\n\t\treportVariantTag as string,\n\t\tserverTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 foldDown(unroll(reportData, reportData),\n\tmapColumn(\n\t\temployeeId = reportData.employeeId,\n\t\temployeeNumber = reportData.employeeNumber,\n\t\tfirstName = reportData.firstName,\n\t\tleaveEntitlementHours = reportData.leaveEntitlementHours,\n\t\tleaveProRataHours = reportData.leaveProRataHours,\n\t\tleaveTotalHours = reportData.leaveTotalHours,\n\t\tleaveTypeId = reportData.leaveTypeId,\n\t\tleaveTypeName = reportData.leaveTypeName,\n\t\tprimaryDepartmentCode = reportData.primaryDepartmentCode,\n\t\tprimaryDepartmentGlCode = reportData.primaryDepartmentGlCode,\n\t\tprimaryDepartmentName = reportData.primaryDepartmentName,\n\t\tprimaryLocationCode = reportData.primaryLocationCode,\n\t\tprimaryLocationGlCode = reportData.primaryLocationGlCode,\n\t\tprimaryLocationName = reportData.primaryLocationName,\n\t\tprimaryProjectCode = reportData.primaryProjectCode,\n\t\tprimaryProjectGlCode = reportData.primaryProjectGlCode,\n\t\tprimaryProjectName = reportData.primaryProjectName,\n\t\tprimaryRoleCode = reportData.primaryRoleCode,\n\t\tprimaryRoleName = reportData.primaryRoleName,\n\t\tprintName = reportData.printName,\n\t\tsurname = reportData.surname,\n\t\torganizationId,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Flatten1\nFlatten1 alterRow(upsertIf(true()),\n\tdeleteIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['employeeId','leaveTypeId'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		}
	]
}