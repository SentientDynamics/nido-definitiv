{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-nido-prod-eastau-100"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"ls_sql_tnk001_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_tnk001'"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stnidoprodeastau100.dfs.core.windows.net/"
		},
		"ls_adls2_stnidoprodeastau100_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stnidoprodeastau100.dfs.core.windows.net/"
		},
		"ls_keyvault_kvnidoprodeastau100_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-nido-prod-eastau-100.vault.azure.net/"
		},
		"ls_rest_definitiv_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().sourceBaseUrl}"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName1": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName1": {
			"type": "string",
			"defaultValue": "Employees"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName2": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName2": {
			"type": "string",
			"defaultValue": "EmployeePaymentAccounts"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName3": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName3": {
			"type": "string",
			"defaultValue": "EmployeePhoneNumbers"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName4": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName4": {
			"type": "string",
			"defaultValue": "EmployeeStreetAddresses"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName5": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName5": {
			"type": "string",
			"defaultValue": "EmployeeSuperAccounts"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName6": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName6": {
			"type": "string",
			"defaultValue": "EmployeeSuperContributions"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName7": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName7": {
			"type": "string",
			"defaultValue": "EmployeeTaxDeclarations"
		},
		"tr_EmploymentHistory_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_EmploymentHistory_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_EmploymentHistory_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_EmploymentHistory_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "EmployeesEmploymentHistory"
		},
		"tr_LeaveApplications_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_LeaveApplications_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "ReportingLeaveApplications"
		},
		"tr_LeaveBalances_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_LeaveBalances_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "ReportingLeaveBalances"
		},
		"tr_Organizations_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_Organizations_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Organizations_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_Organizations_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "Organizations"
		},
		"tr_PayRuns_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_PayRuns_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "OrganizationPayRuns"
		},
		"tr_Rosters_Scheduled_1h_properties_pl_CopyFromApiToDefinitivSchema_Rosters_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Rosters_Scheduled_1h_properties_pl_CopyFromApiToDefinitivSchema_Rosters_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "CustomReportRosters"
		},
		"tr_Timesheets_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Timesheets_original_parameters_param_SchemaName": {
			"type": "string",
			"defaultValue": "definitiv"
		},
		"tr_Timesheets_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Timesheets_original_parameters_param_TableName": {
			"type": "string",
			"defaultValue": "CustomReportTimesheets"
		},
		"dataFactory_properties_globalParameters_global_adls2_FileSystem_value": {
			"type": "string",
			"defaultValue": "container-adf-nido-prod-eastau-100-1"
		},
		"dataFactory_properties_globalParameters_global_adls2_InputDirectory_Json_value": {
			"type": "string",
			"defaultValue": "ds_adls2_stnidoprodeastau100_json_input"
		},
		"dataFactory_properties_globalParameters_global_adls2_OutputDirectory_Json_value": {
			"type": "string",
			"defaultValue": "ds_adls2_stnidoprodeastau100_json_output"
		},
		"dataFactory_properties_globalParameters_global_adls2_LogDirectory_value": {
			"type": "string",
			"defaultValue": "ds_adls2_stnidoprodeastau100_log"
		},
		"dataFactory_properties_globalParameters_global_logic_Monitoring_baseUrl_value": {
			"type": "string",
			"defaultValue": "https://prod-06.australiaeast.logic.azure.com/workflows/b4b99c6f86254ebb80fd01886e8f11bd/triggers/manual/paths/invoke/"
		},
		"dataFactory_properties_globalParameters_global_logic_Monitoring_SAS_value": {
			"type": "string",
			"defaultValue": "?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YTtqyRkDA7A1_pfSdRdJ1PpzB0qgYRvQZmIf1f-N_P4"
		},
		"dataFactory_properties_globalParameters_global_adls2_SqlErrorRowDirectory_value": {
			"type": "string",
			"defaultValue": "ErrorRows"
		},
		"dataFactory_properties_globalParameters_global_CustomReportId_Timesheets_value": {
			"type": "string",
			"defaultValue": "9B394863-2B5E-4704-8AD4-82352C1111C1"
		},
		"dataFactory_properties_globalParameters_global_CustomReportId_Rosters_value": {
			"type": "string",
			"defaultValue": "BE1BFE92-8295-4F80-A36C-1A63608C1433"
		},
		"dataFactory_properties_globalParameters_global_CustomReportId_Payslips_value": {
			"type": "string",
			"defaultValue": "EB7BCD04-6849-4B58-A786-1168A9AF829F"
		},
		"dataFactory_properties_globalParameters_global_CustomReportId_Wages_value": {
			"type": "string",
			"defaultValue": "16F9B79E-D95C-4759-B5BE-A8EE599E777D"
		},
		"dataFactory_properties_globalParameters_global_CustomReportId_GenericOrgId_value": {
			"type": "string",
			"defaultValue": "DCA2633E-578E-4358-A5BF-0C38A96BB4CB"
		},
		"dataFactory_properties_globalParameters_global_REST_RequestTimeoutDuration_30min_value": {
			"type": "string",
			"defaultValue": "00:30:00"
		},
		"dataFactory_properties_globalParameters_global_REST_RequestTimeoutDuration_90min_value": {
			"type": "string",
			"defaultValue": "01:30:00"
		},
		"dataFactory_properties_globalParameters_global_CustomReportId_ReportingLeaveApplications_value": {
			"type": "string",
			"defaultValue": "A1D9B4D7-3A79-413F-B13D-4BA5BC567BDC"
		},
		"dataFactory_properties_globalConfigurations_PipelineBillingEnabled": {
			"type": "string",
			"defaultValue": "true"
		},
		"dataFactory_location": {
			"type": "string",
			"defaultValue": "australiaeast"
		},
		"dataFactory_identity_type": {
			"type": "string",
			"defaultValue": "SystemAssigned"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ApiToJson",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": {
									"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
									"type": "Expression"
								},
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": {
										"value": "/api/v2/employees",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_Employees",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Employees",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_Employees\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSqlEmployee": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName1",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName1",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeePaymentAccounts": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName2",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName2",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeePhoneNumbers": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName3",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName3",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeStreetAddresses": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName4",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName4",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeSuperAccounts": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName5",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName5",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeSuperContributions": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName6",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName6",
											"type": "Expression"
										}
									},
									"sinkSqlEmployeeTaxDeclaration": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemeName7",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName7",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemeName1",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName1",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.Employees",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemeName1",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName1",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('ApiToJson').output.errors[0].Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName1",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName1",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Employees",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Employees').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName1",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemeName1": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName1": {
						"type": "string",
						"defaultValue": "Employees"
					},
					"param_SchemeName2": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName2": {
						"type": "string",
						"defaultValue": "EmployeePaymentAccounts"
					},
					"param_SchemeName3": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName3": {
						"type": "string",
						"defaultValue": "EmployeePhoneNumbers"
					},
					"param_SchemeName4": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName4": {
						"type": "string",
						"defaultValue": "EmployeeStreetAddresses"
					},
					"param_SchemeName5": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName5": {
						"type": "string",
						"defaultValue": "EmployeeSuperAccounts"
					},
					"param_SchemeName6": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName6": {
						"type": "string",
						"defaultValue": "EmployeeSuperContributions"
					},
					"param_SchemeName7": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName7": {
						"type": "string",
						"defaultValue": "EmployeeTaxDeclarations"
					}
				},
				"variables": {
					"var_PreRowCount": {
						"type": "String",
						"defaultValue": "var_PreRowCount"
					},
					"var_PostRowCount": {
						"type": "String",
						"defaultValue": "var_PostRowCount"
					},
					"var_CopyActivityOutput": {
						"type": "String",
						"defaultValue": "var_CopyActivityOutput"
					},
					"var_DataflowActivityOutput": {
						"type": "String",
						"defaultValue": "var_DataflowActivityOutput"
					},
					"var_CopyActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_CopyActivityErrorMessage"
					},
					"var_DataflowActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_DataflowActivityErrorMessage"
					}
				},
				"folder": {
					"name": "05_Employees"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/dataflows/df_Employees')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_EmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Employees",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [employeeId] FROM [definitiv].[Employees]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Employees"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Employee",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Employees').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "Employee.EmployeeId",
													"value": {
														"value": "@item().employeeId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/employees/',\nitem().employeeId,\n'/employment-history'\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_EmploymentHistory",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_EmploymentHistory",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_EmploymentHistory\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.EmployeesEmploymentHistory",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_EmploymentHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.EmployeesEmploymentHistory",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_EmploymentHistory",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_EmploymentHistory').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "EmployeesEmploymentHistory"
					}
				},
				"folder": {
					"name": "05_Employees"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_EmploymentHistory')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Organizations",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId, legalName from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Organization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Organizations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "Org.LegalName",
													"value": {
														"value": "@item().legalName",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerId",
													"value": {
														"value": "@pipeline().TriggerId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/company/', item().organizationId, '/pay-runs')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_OrgPayRuns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Organization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_OrgPayRuns",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_OrgPayRuns\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "pl_CopyFromApiToDefinitivSchema_Payslips",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_Payslips",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"param_SchemaName": "definitiv",
								"param_TableName": "CustomReportPayslips"
							}
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.OrganizationPayRuns",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_OrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.OrganizationPayRuns",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "pl_CopyFromApiToDefinitivSchema_Wages",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromApiToDefinitivSchema_Wages",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"param_SchemaName": "definitiv",
								"param_TableName": "CustomReportWages"
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_OrgPayRuns",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_OrgPayRuns').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "OrganizationPayRuns"
					}
				},
				"folder": {
					"name": "07_PayRuns"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_OrgPayRuns')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Payslips')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Wages')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Organizations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Organizations",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Organizations",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_Organizations\""
								},
								"datasetParameters": {
									"SourceBlobDefinitiv": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SinkSqlDefinitiv": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ApiToJson",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": {
									"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
									"type": "Expression"
								},
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": "/api/v2/organizations"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Organizations",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Organizations').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('ApiToJson').output.errors[0].Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "Organizations"
					}
				},
				"variables": {
					"varLogicAppBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "08_Organizations"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-20T04:04:15Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/df_Organizations')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Payslips')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OrgPayRuns",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [Org.OrganizationId] as orgId, [payRunId], [Org.LegalName] as orgLegalName, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "OrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "OrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('OrgPayRuns').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ApiToJson",
									"description": "",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().orgId",
														"type": "Expression"
													}
												},
												{
													"name": "Org.LegalName",
													"value": {
														"value": "@item().orgLegalName",
														"type": "Expression"
													}
												},
												{
													"name": "PayRun.PayRunId",
													"value": {
														"value": "@item().payRunId",
														"type": "Expression"
													}
												},
												{
													"name": "PayRun.PayslipGenerationStatus",
													"value": {
														"value": "@item().payslipGenerationStatus",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/custom-reports/',\npipeline().globalParameters.global_CustomReportId_Payslips,\n'?organizationId=', \nitem().orgId, \n'&selectedPayRunId=', \nitem().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_Payslips",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "OrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Payslips",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": "\"container-adf-nido-prod-eastau-100-1\"",
									"param_ErrorRowDirectory": "\"ErrorRows\"",
									"param_DataflowName": "\"df_Payslips\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.CustomReportPayslips",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Payslips",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.CustomReportPayslips",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Payslips",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Payslips').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "CustomReportPayslips"
					}
				},
				"variables": {
					"var_PreRowCount": {
						"type": "String",
						"defaultValue": "var_PreRowCount"
					},
					"var_PostRowCount": {
						"type": "String",
						"defaultValue": " var_PostRowCount"
					},
					"var_CopyActivityOutput": {
						"type": "String",
						"defaultValue": "var_CopyActivityOutput"
					},
					"var_DataflowActivityOutput": {
						"type": "String",
						"defaultValue": "var_DataflowActivityOutput"
					},
					"var_CopyActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_CopyActivityErrorMessage"
					},
					"var_DataflowActivityErrorMessage": {
						"type": "String",
						"defaultValue": "var_DataflowActivityErrorMessage"
					}
				},
				"folder": {
					"name": "01_Payslips"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_Payslips')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Organizations",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Organization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Organizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/custom-reports/',\npipeline().globalParameters.global_CustomReportId_ReportingLeaveApplications,\n'?organizationId=', \nitem().organizationId, \n'&startDate=',\n'2021-10-22',\n'&endDate=',\nformatDateTime(convertFromUtc(utcNow(), 'AUS Eastern Standard Time'), 'yyyy-MM-dd'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_LeaveApplications",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Organization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LeaveApplications",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": "\"container-adf-nido-prod-eastau-100-1\"",
									"param_ErrorRowDirectory": "\"ErrorRows\"",
									"param_DataflowName": "\"df_LeaveApplications\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.ReportingLeaveApplications",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_LeaveApplications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.ReportingLeaveApplications",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_LeaveApplications",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_LeaveApplications').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "ReportingLeaveApplications"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_LeaveApplications')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Organizations",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "varLeaveBalanceDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Organization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Organizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												},
												{
													"name": "QueryLeaveBalanceDate",
													"value": {
														"value": "@variables('varLeaveBalanceDate')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\r\n'/api/company/', \r\nitem().organizationId, \r\n'/reporting/leave-balances?asOfDate=',\r\nvariables('varLeaveBalanceDate')\r\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_ReportingLeaveBalances",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Organization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ReportingLeaveBalances",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_ReportingLeaveBalances\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "varLeaveBalanceDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLeaveBalanceDate",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'AUS Eastern Standard Time'), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.ReportingLeaveBalances",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_ReportingLeaveBalances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.ReportingLeaveBalances",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_ReportingLeaveBalances",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_ReportingLeaveBalances').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "ReportingLeaveBalances"
					}
				},
				"variables": {
					"varLeaveBalanceDate": {
						"type": "String",
						"defaultValue": "2022-06-01"
					}
				},
				"folder": {
					"name": "06_Leave"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/df_ReportingLeaveBalances')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Rosters')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RosterStartDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRosterStartDate",
							"value": {
								"value": "@formatDateTime(addDays(convertFromUtc(utcNow(), 'AUS Eastern Standard Time'), -28), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RosterFinishDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varRosterFinishDate",
							"value": {
								"value": "@formatDateTime(addDays(convertFromUtc(utcNow(), 'AUS Eastern Standard Time'), 28), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ApiToJson",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "RosterStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "RosterFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineTriggerTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "QueryStartDate",
										"value": {
											"value": "@variables('varRosterStartDate')",
											"type": "Expression"
										}
									},
									{
										"name": "QueryFinishDate",
										"value": {
											"value": "@variables('varRosterFinishDate')",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": {
									"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_90min}",
									"type": "Expression"
								},
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_rest_definitiv",
								"type": "DatasetReference",
								"parameters": {
									"sourceRelativeUrl": {
										"value": "@concat(\n'/api/custom-reports/',\npipeline().globalParameters.global_CustomReportId_Rosters,\n'?organizationId=',\npipeline().globalParameters.global_CustomReportId_GenericOrgId,\n'&startDate=', \nformatDateTime(variables('varRosterStartDate'), 'yyyy-MM-dd'),\n'&endDate=', \nformatDateTime(variables('varRosterFinishDate'), 'yyyy-MM-dd')\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference",
								"parameters": {
									"ds_PipelineTriggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"ds_PipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"ds_FileSystem": {
										"value": "@pipeline().globalParameters.global_adls2_FileSystem",
										"type": "Expression"
									},
									"ds_Directory": {
										"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
										"type": "Expression"
									},
									"ds_PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "df_Rosters",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Rosters",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": {
										"value": "'@{pipeline().globalParameters.global_adls2_FileSystem}'",
										"type": "Expression"
									},
									"param_ErrorRowDirectory": {
										"value": "'@{pipeline().globalParameters.global_adls2_SqlErrorRowDirectory}'",
										"type": "Expression"
									},
									"param_DataflowName": "\"df_Rosters\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.CustomReportRosters",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Rosters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.CustomReportRosters",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ApiToJson",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('ApiToJson').output.errors[0].Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Rosters",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Rosters').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "CustomReportRosters"
					}
				},
				"variables": {
					"varRosterStartDate": {
						"type": "String"
					},
					"varRosterFinishDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "04_Rosters"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/dataflows/df_Rosters')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Timesheets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Organizations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select organizationId from definitiv.Organizations",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "Organizations"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Organization",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Organizations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Organizations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "Org.OrganizationId",
													"value": {
														"value": "@item().organizationId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/timesheets?orgId=', \nitem().organizationId, \n'&start=',addDays(utcNow(),-1),\n'&end=',addDays(utcNow(),0),\n'&statusFilter=Approved'\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Timesheet_sql",
											"type": "DatasetReference",
											"parameters": {
												"param_SchemaName": "dbo",
												"param_TableName": "TimesheetReport"
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_ReportingTimesheets",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Organization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TimesheetDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TimesheetReport": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"WritetoSQLDB": {
										"param_SchemaName": "dbo",
										"param_TableName": "TimesheetReport"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "TimesheetReport"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/dataflows/TimesheetDataFlow')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/Timesheet_sql')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Timesheets_original')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TimesheetStartDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varTimesheetStartDate",
							"value": {
								"value": "@formatDateTime(addDays(convertFromUtc(utcNow(), 'AUS Eastern Standard Time'), -35), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TimesheetFinishDate",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "TimesheetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varTimesheetFinishDate",
							"value": {
								"value": "@formatDateTime(addDays(convertFromUtc(utcNow(), 'AUS Eastern Standard Time'), 7), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "df_Timesheets",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QueryDateIsFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Timesheets",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": "\"container-adf-nido-prod-eastau-100-1\"",
									"param_ErrorRowDirectory": "\"ErrorRows\"",
									"param_DataflowName": "\"df_Timesheets\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.CustomReportTimesheets",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Timesheets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.CustomReportTimesheets",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "QueryDateIsFinishDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "TimesheetQueryDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('varTimesheetQueryDate'), variables('varTimesheetFinishDate'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "QueryStartDate",
													"value": {
														"value": "@variables('varTimesheetStartDate')",
														"type": "Expression"
													}
												},
												{
													"name": "QueryFinishDate",
													"value": {
														"value": "@variables('varTimesheetFinishDate')",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat(\n'/api/custom-reports/',\npipeline().globalParameters.global_CustomReportId_Timesheets,\n'?organizationId=',\npipeline().globalParameters.global_CustomReportId_GenericOrgId,\n'&startDate=', \nformatDateTime(variables('varTimesheetQueryDate'), 'yyyy-MM-dd')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "TimesheetQueryDatePlusOne",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "varTimesheetQueryDatePlusOne",
										"value": {
											"value": "@formatDateTime(addDays(variables('varTimesheetQueryDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "NextTimesheetQueryDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TimesheetQueryDatePlusOne",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "varTimesheetQueryDate",
										"value": {
											"value": "@variables('varTimesheetQueryDatePlusOne')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "TimesheetQueryDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "TimesheetFinishDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varTimesheetQueryDate",
							"value": {
								"value": "@variables('varTimesheetStartDate')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Timesheets",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Timesheets').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "CustomReportTimesheets"
					}
				},
				"variables": {
					"varTimesheetStartDate": {
						"type": "String"
					},
					"varTimesheetFinishDate": {
						"type": "String"
					},
					"varTimesheetQueryDate": {
						"type": "String"
					},
					"varTimesheetQueryDatePlusOne": {
						"type": "String"
					}
				},
				"folder": {
					"name": "03_Timesheets"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-18T05:28:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/df_Timesheets')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyFromApiToDefinitivSchema_Wages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Wages",
						"description": "",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "OrgPayRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Wages",
								"type": "DataFlowReference",
								"parameters": {
									"param_FileSystem": "\"container-adf-nido-prod-eastau-100-1\"",
									"param_ErrorRowDirectory": "\"ErrorRows\"",
									"param_DataflowName": "\"df_Wages\""
								},
								"datasetParameters": {
									"sourceJson": {
										"ds_PipelineTriggerTime": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"ds_PipelineRunId": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"ds_FileSystem": {
											"value": "@pipeline().globalParameters.global_adls2_FileSystem",
											"type": "Expression"
										},
										"ds_Directory": {
											"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
											"type": "Expression"
										},
										"ds_PipelineName": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"sinkSql": {
										"param_SchemaName": {
											"value": "@pipeline().parameters.param_SchemaName",
											"type": "Expression"
										},
										"param_TableName": {
											"value": "@pipeline().parameters.param_TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PreRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PreRowCount from definitiv.CustomReportWages",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PostRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "df_Wages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) as PostRowCount from definitiv.CustomReportWages",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": {
										"value": "@pipeline().parameters.param_SchemaName",
										"type": "Expression"
									},
									"param_TableName": {
										"value": "@pipeline().parameters.param_TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "OrgPayRuns",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PreRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [Org.OrganizationId] as orgId, [payRunId], [Org.LegalName] as orgLegalName, [payslipGenerationStatus] from definitiv.OrganizationPayRuns where [payslipGenerationStatus] = 'Complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference",
								"parameters": {
									"param_SchemaName": "definitiv",
									"param_TableName": "OrganizationPayRuns"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "OrgPayRun",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "OrgPayRuns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('OrgPayRuns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ApiToJson",
									"description": "",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "PipelineName",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineRunId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "PipelineTriggerTime",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": {
												"value": "@{pipeline().globalParameters.global_REST_RequestTimeoutDuration_30min}",
												"type": "Expression"
											},
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_rest_definitiv",
											"type": "DatasetReference",
											"parameters": {
												"sourceRelativeUrl": {
													"value": "@concat('/api/custom-reports/',\npipeline().globalParameters.global_CustomReportId_Wages,\n'?organizationId=', \nitem().orgId, \n'&selectedPayRunId=', \nitem().payRunId)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
											"type": "DatasetReference",
											"parameters": {
												"ds_PipelineTriggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"ds_PipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"ds_FileSystem": {
													"value": "@pipeline().globalParameters.global_adls2_FileSystem",
													"type": "Expression"
												},
												"ds_Directory": {
													"value": "@pipeline().globalParameters.global_adls2_OutputDirectory_Json",
													"type": "Expression"
												},
												"ds_PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "logic-nido-prod-eastau-101_1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ApiToJson",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineTriggerType": {
												"value": "@pipeline().TriggerType",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineName": {
												"value": "@pipeline()?.TriggeredByPipelineName",
												"type": "Expression"
											},
											"PipelineTriggeredByPipelineRunId": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											},
											"ActivityOutputMessage": {
												"value": "@activity('ApiToJson').output.errors[0].Message",
												"type": "Expression"
											},
											"AzureSqlTargetTable": {
												"value": "@pipeline().parameters.param_TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "logic-nido-prod-eastau-101_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_Wages",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-101",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"ActivityOutputMessage": {
									"value": "@activity('df_Wages').error.Message",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "logic-nido-prod-eastau-102",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PostRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_monitoring_logic-nido-prod-eastau-102",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"PipelineTriggerId": {
									"value": "@pipeline().TriggerId",
									"type": "Expression"
								},
								"PipelineTriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"PipelineTriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"PipelineTriggerType": {
									"value": "@pipeline().TriggerType",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineName": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								},
								"PipelineTriggeredByPipelineRunId": {
									"value": "@pipeline()?.TriggeredByPipelineRunId",
									"type": "Expression"
								},
								"AzureSqlTargetTable": {
									"value": "@pipeline().parameters.param_TableName",
									"type": "Expression"
								},
								"AzureSqlTargetTablePreRowCount": {
									"value": "@activity('PreRowCount').output.value",
									"type": "Expression"
								},
								"AzureSqlTargetTablePostRowCount": {
									"value": "@activity('PostRowCount').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "CustomReportWages"
					}
				},
				"variables": {
					"varCopyActivityErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "02_Wages"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T07:04:52Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/df_Wages')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-101')]",
				"[concat(variables('factoryId'), '/pipelines/pl_monitoring_logic-nido-prod-eastau-102')]",
				"[concat(variables('factoryId'), '/datasets/ds_rest_definitiv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_monitoring_logic-nido-prod-eastau-101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "logic-nido-prod-eastau-101",
						"description": "Pipeline monitoring and notification",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(\n    pipeline().globalParameters.global_logic_Monitoring_baseUrl,\n    'failed',\n    pipeline().globalParameters.global_logic_Monitoring_SAS\n    )",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"PipelineName": "@{pipeline().parameters.PipelineName}",
								"PipelineRunId": "@{pipeline().parameters.PipelineRunId}",
								"PipelineTriggerId": "@{pipeline().parameters.PipelineTriggerId}",
								"PipelineTriggerName": "@{pipeline().parameters.PipelineTriggerName}",
								"PipelineTriggerTime": "@{pipeline().parameters.PipelineTriggerTime}",
								"PipelineTriggerType": "@{pipeline().parameters.PipelineTriggerType}",
								"PipelineTriggeredByPipelineName": "@{pipeline().parameters.PipelineTriggeredByPipelineName}",
								"PipelineTriggeredByPipelineRunId": "@{pipeline().parameters.PipelineTriggeredByPipelineRunId}",
								"ActivityOutputMessage": "@{pipeline().parameters.ActivityOutputMessage}",
								"AzureSqlTargetTable": "@{pipeline().parameters.AzureSqlTargetTable}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineTriggerId": {
						"type": "string"
					},
					"PipelineTriggerName": {
						"type": "string"
					},
					"PipelineTriggerTime": {
						"type": "string"
					},
					"PipelineTriggerType": {
						"type": "string"
					},
					"PipelineTriggeredByPipelineName": {
						"type": "string"
					},
					"PipelineTriggeredByPipelineRunId": {
						"type": "string"
					},
					"ActivityOutputMessage": {
						"type": "string"
					},
					"AzureSqlTargetTable": {
						"type": "string"
					}
				},
				"variables": {
					"varLogicAppBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "00_Monitoring"
				},
				"annotations": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_monitoring_logic-nido-prod-eastau-102')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "logic-nido-prod-eastau-102",
						"description": "Pipeline monitoring and notification",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(\n    pipeline().globalParameters.global_logic_Monitoring_baseUrl,\n    'succeeded',\n    pipeline().globalParameters.global_logic_Monitoring_SAS\n    )",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AustraliaEastIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"PipelineName": "@{pipeline().parameters.PipelineName}",
								"PipelineRunId": "@{pipeline().parameters.PipelineRunId}",
								"PipelineTriggerId": "@{pipeline().parameters.PipelineTriggerId}",
								"PipelineTriggerName": "@{pipeline().parameters.PipelineTriggerName}",
								"PipelineTriggerTime": "@{pipeline().parameters.PipelineTriggerTime}",
								"PipelineTriggerType": "@{pipeline().parameters.PipelineTriggerType}",
								"PipelineTriggeredByPipelineName": "@{pipeline().parameters.PipelineTriggeredByPipelineName}",
								"PipelineTriggeredByPipelineRunId": "@{pipeline().parameters.PipelineTriggeredByPipelineRunId}",
								"AzureSqlTargetTablePreRowCount": "@{pipeline().parameters.AzureSqlTargetTablePreRowCount}",
								"AzureSqlTargetTablePostRowCount": "@{pipeline().parameters.AzureSqlTargetTablePostRowCount}",
								"AzureSqlTargetTable": "@{pipeline().parameters.AzureSqlTargetTable}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string",
						"defaultValue": "PipelineName"
					},
					"PipelineRunId": {
						"type": "object",
						"defaultValue": "PipelineRunId"
					},
					"PipelineTriggerId": {
						"type": "string",
						"defaultValue": "PipelineTriggerId"
					},
					"PipelineTriggerName": {
						"type": "string",
						"defaultValue": "PipelineTriggerName"
					},
					"PipelineTriggerTime": {
						"type": "string",
						"defaultValue": "PipelineTriggerTime"
					},
					"PipelineTriggerType": {
						"type": "string",
						"defaultValue": "PipelineTriggerType"
					},
					"PipelineTriggeredByPipelineName": {
						"type": "string",
						"defaultValue": "PipelineTriggeredByPipelineName"
					},
					"PipelineTriggeredByPipelineRunId": {
						"type": "string",
						"defaultValue": "PipelineTriggeredByPipelineRunId"
					},
					"AzureSqlTargetTable": {
						"type": "string",
						"defaultValue": "AzureSqlTargetTable"
					},
					"AzureSqlTargetTablePreRowCount": {
						"type": "string",
						"defaultValue": "AzureSqlTargetTablePreRowCount"
					},
					"AzureSqlTargetTablePostRowCount": {
						"type": "string",
						"defaultValue": "AzureSqlTargetTablePostRowCount"
					}
				},
				"folder": {
					"name": "00_Monitoring"
				},
				"annotations": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AustraliaEastIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TimesheetJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "string",
						"defaultValue": "2022-01-25T00:18:17.611502Z"
					},
					"ds_PipelineRunId": {
						"type": "string",
						"defaultValue": "187d99be-a307-4534-9acc-0a17fc03d0ab"
					},
					"ds_FileSystem": {
						"type": "string",
						"defaultValue": "container-adf-nido-prod-eastau-100-1"
					},
					"ds_Directory": {
						"type": "string",
						"defaultValue": "ds_adls2_stnidoprodeastau100_json_output"
					},
					"ds_PipelineName": {
						"type": "string",
						"defaultValue": "pl_B1_Payslips_ApiToDefinitiv"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"timesheetId": {
							"type": "string"
						},
						"employeeId": {
							"type": "string"
						},
						"employeeName": {
							"type": "string"
						},
						"projectId": {
							"type": "string"
						},
						"positionId": {
							"type": "null"
						},
						"positionName": {
							"type": "null"
						},
						"projectApprovalWorkflow": {
							"type": "array"
						},
						"projectName": {
							"type": "string"
						},
						"projectWorkOrderId": {
							"type": "null"
						},
						"workOrderName": {
							"type": "null"
						},
						"roleId": {
							"type": "string"
						},
						"roleName": {
							"type": "string"
						},
						"departmentId": {
							"type": "string"
						},
						"departmentName": {
							"type": "string"
						},
						"locationId": {
							"type": "string"
						},
						"locationName": {
							"type": "string"
						},
						"shiftTypeId": {
							"type": "null"
						},
						"shiftTypeName": {
							"type": "string"
						},
						"date": {
							"type": "string"
						},
						"useTime": {
							"type": "boolean"
						},
						"durationHours": {
							"type": "null"
						},
						"employeeSpecifiedDurationHours": {
							"type": "null"
						},
						"startTimeOfDay": {
							"type": "string"
						},
						"employeeSpecifiedStartTimeOfDay": {
							"type": "null"
						},
						"endTimeOfDay": {
							"type": "string"
						},
						"employeeSpecifiedEndTimeOfDay": {
							"type": "null"
						},
						"timePeriodAlerts": {
							"type": "array"
						},
						"breaks": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"description": {
										"type": "string"
									},
									"startTimeOfDay": {
										"type": "string"
									},
									"employeeSpecifiedStartTimeOfDay": {
										"type": "null"
									},
									"endTimeOfDay": {
										"type": "string"
									},
									"employeeSpecifiedEndTimeOfDay": {
										"type": "null"
									},
									"durationHours": {
										"type": "null"
									},
									"employeeSpecifiedDurationHours": {
										"type": "null"
									}
								}
							}
						},
						"tasks": {
							"type": "array"
						},
						"workOrderTasks": {
							"type": "array"
						},
						"assets": {
							"type": "array"
						},
						"notes": {
							"type": "null"
						},
						"timePeriodMode": {
							"type": "string"
						},
						"status": {
							"type": "string"
						},
						"approvals": {
							"type": "array"
						},
						"publicHolidayWorked": {
							"type": "null"
						},
						"timeClockEvents": {
							"type": "array"
						},
						"customFields": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"customFieldId": {
										"type": "string"
									},
									"targetEntity": {
										"type": "integer"
									},
									"dataType": {
										"type": "string"
									},
									"value": {
										"type": "null"
									},
									"name": {
										"type": "string"
									},
									"displayName": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"enabled": {
										"type": "boolean"
									},
									"global": {
										"type": "boolean"
									},
									"options": {
										"type": "array"
									},
									"isMandatory": {
										"type": "boolean"
									},
									"order": {
										"type": "integer"
									},
									"dateDriven": {
										"type": "boolean"
									},
									"timeBased": {
										"type": "boolean"
									},
									"displayOnTimesheetSummary": {
										"type": "boolean"
									},
									"preventMultipleEntries": {
										"type": "boolean"
									},
									"timePeriodMode": {
										"type": "null"
									},
									"inheritTimesheetPeriod": {
										"type": "null"
									},
									"customFieldDisplayStatus": {
										"type": "null"
									}
								}
							}
						},
						"totalBreakHours": {
							"type": "number"
						},
						"totalWorkedHours": {
							"type": "number"
						},
						"allowEditing": {
							"type": "boolean"
						},
						"submittedDateTime": {
							"type": "string"
						},
						"lastUpdated": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Timesheet_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_tnk001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"param_TableName": {
						"type": "string",
						"defaultValue": "TimesheetReport"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().param_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().param_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls2_stnidoprodeastau100_json_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls2_stnidoprodeastau100",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_PipelineTriggerTime": {
						"type": "string",
						"defaultValue": "2022-01-25T00:18:17.611502Z"
					},
					"ds_PipelineRunId": {
						"type": "string",
						"defaultValue": "187d99be-a307-4534-9acc-0a17fc03d0ab"
					},
					"ds_FileSystem": {
						"type": "string",
						"defaultValue": "container-adf-nido-prod-eastau-100-1"
					},
					"ds_Directory": {
						"type": "string",
						"defaultValue": "ds_adls2_stnidoprodeastau100_json_output"
					},
					"ds_PipelineName": {
						"type": "string",
						"defaultValue": "pl_B1_Payslips_ApiToDefinitiv"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\n    dataset().ds_Directory,\n    '/',\n    dataset().ds_PipelineName,\n    '/',\n    formatDateTime(string(dataset().ds_PipelineTriggerTime), 'yyyy-MM-ddTHH-mm-ss'),\n    '_',\n    dataset().ds_PipelineRunId\n)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_FileSystem",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_rest_definitiv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_rest_definitiv",
					"type": "LinkedServiceReference",
					"parameters": {
						"sourceBaseUrl": "https://nido.definitiv.com.au"
					}
				},
				"parameters": {
					"sourceRelativeUrl": {
						"type": "String",
						"defaultValue": "/api/v2/organizations"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().sourceRelativeUrl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_rest_definitiv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_tnk001')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_tnk001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"param_SchemaName": {
						"type": "string",
						"defaultValue": "definitiv"
					},
					"param_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().param_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().param_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls2_stnidoprodeastau100')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls2_stnidoprodeastau100_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_keyvault_kvnidoprodeastau100')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_keyvault_kvnidoprodeastau100_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_rest_definitiv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"sourceBaseUrl": {
						"type": "String",
						"defaultValue": "https://nido.definitiv.com.au"
					}
				},
				"annotations": [
					"Basic Authentication i.e. Base 64 encoded; Credentials Format {API Key}:{Password (Leave empty)} e.g. \"Basic {base64 string}\""
				],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_rest_definitiv_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_tnk001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_tnk001_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_Employees_Scheduled_1d')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_Employees",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemeName1": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName1')]",
							"param_TableName1": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName1')]",
							"param_SchemeName2": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName2')]",
							"param_TableName2": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName2')]",
							"param_SchemeName3": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName3')]",
							"param_TableName3": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName3')]",
							"param_SchemeName4": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName4')]",
							"param_TableName4": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName4')]",
							"param_SchemeName5": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName5')]",
							"param_TableName5": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName5')]",
							"param_SchemeName6": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName6')]",
							"param_TableName6": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName6')]",
							"param_SchemeName7": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_SchemeName7')]",
							"param_TableName7": "[parameters('tr_Employees_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Employees_parameters_param_TableName7')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-07T04:42:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Employees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_EmploymentHistory_Scheduled_1w')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_EmploymentHistory",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_EmploymentHistory_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_EmploymentHistory_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_EmploymentHistory_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_EmploymentHistory_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-06-08T05:19:00",
						"endTime": "2023-09-01T09:04:42",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								3
							],
							"weekDays": [
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_EmploymentHistory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_LeaveApplications_Scheduled_1d')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_LeaveApplications_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_LeaveApplications_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-08T05:45:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_ReportingLeaveApplications')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_LeaveBalances_Scheduled_1d')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_LeaveBalances_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_LeaveBalances_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-08T06:03:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_ReportingLeaveBalances')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_Monitoring_Scheduled_1d')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-12T01:17:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_Organizations_Scheduled_1w')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_Organizations",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_Organizations_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_Organizations_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_Organizations_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_Organizations_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-06-06T04:33:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Organizations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_PayRuns_Scheduled_1w')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Parent pipeline for Payslips and Wages.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_PayRuns_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_PayRuns_Scheduled_1w_properties_pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-04-01T01:00:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							],
							"weekDays": [
								"Thursday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_OrganizationPayRuns')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_Rosters_Scheduled_1h')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_Rosters",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_Rosters_Scheduled_1h_properties_pl_CopyFromApiToDefinitivSchema_Rosters_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_Rosters_Scheduled_1h_properties_pl_CopyFromApiToDefinitivSchema_Rosters_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-04-14T09:00:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"hours": [
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Rosters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_Timesheets_Scheduled_1d')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CopyFromApiToDefinitivSchema_Timesheets_original",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_SchemaName": "[parameters('tr_Timesheets_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Timesheets_original_parameters_param_SchemaName')]",
							"param_TableName": "[parameters('tr_Timesheets_Scheduled_1d_properties_pl_CopyFromApiToDefinitivSchema_Timesheets_original_parameters_param_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-04-24T18:00:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								3
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CopyFromApiToDefinitivSchema_Timesheets_original')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AustraliaEastIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 240,
							"cleanup": false
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TimesheetDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TimesheetJson",
								"type": "DatasetReference"
							},
							"name": "TimesheetReport"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Timesheet_sql",
								"type": "DatasetReference"
							},
							"name": "WritetoSQLDB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          timesheetId as string,",
						"          employeeId as string,",
						"          employeeName as string,",
						"          projectId as string,",
						"          positionId as string,",
						"          positionName as string,",
						"          projectApprovalWorkflow as string[],",
						"          projectName as string,",
						"          projectWorkOrderId as string,",
						"          workOrderName as string,",
						"          roleId as string,",
						"          roleName as string,",
						"          departmentId as string,",
						"          departmentName as string,",
						"          locationId as string,",
						"          locationName as string,",
						"          shiftTypeId as string,",
						"          shiftTypeName as string,",
						"          date as string,",
						"          useTime as boolean,",
						"          durationHours as string,",
						"          employeeSpecifiedDurationHours as string,",
						"          startTimeOfDay as string,",
						"          employeeSpecifiedStartTimeOfDay as string,",
						"          endTimeOfDay as string,",
						"          employeeSpecifiedEndTimeOfDay as string,",
						"          timePeriodAlerts as string[],",
						"          breaks as (description as string, startTimeOfDay as string, employeeSpecifiedStartTimeOfDay as string, endTimeOfDay as string, employeeSpecifiedEndTimeOfDay as string, durationHours as string, employeeSpecifiedDurationHours as string)[],",
						"          tasks as string[],",
						"          workOrderTasks as string[],",
						"          assets as string[],",
						"          notes as string,",
						"          timePeriodMode as string,",
						"          status as string,",
						"          approvals as string[],",
						"          publicHolidayWorked as string,",
						"          timeClockEvents as string[],",
						"          customFields as (customFieldId as string, targetEntity as integer, dataType as string, value as string, name as string, displayName as string, description as string, enabled as boolean, global as boolean, options as string[], isMandatory as boolean, order as integer, dateDriven as boolean, timeBased as boolean, displayOnTimesheetSummary as boolean, preventMultipleEntries as boolean, timePeriodMode as string, inheritTimesheetPeriod as string, customFieldDisplayStatus as string)[],",
						"          totalBreakHours as double,",
						"          totalWorkedHours as double,",
						"          allowEditing as boolean,",
						"          submittedDateTime as string,",
						"          lastUpdated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> TimesheetReport",
						"TimesheetReport sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          timesheetId,",
						"          employeeId,",
						"          employeeName,",
						"          projectId,",
						"          positionId,",
						"          positionName,",
						"          projectApprovalWorkflow,",
						"          projectName,",
						"          projectWorkOrderId,",
						"          workOrderName,",
						"          roleId,",
						"          roleName,",
						"          departmentId,",
						"          departmentName,",
						"          locationId,",
						"          locationName,",
						"          shiftTypeId,",
						"          shiftTypeName,",
						"          date,",
						"          useTime,",
						"          durationHours,",
						"          employeeSpecifiedDurationHours,",
						"          startTimeOfDay,",
						"          employeeSpecifiedStartTimeOfDay,",
						"          endTimeOfDay,",
						"          employeeSpecifiedEndTimeOfDay,",
						"          timePeriodAlerts,",
						"          breaks,",
						"          tasks,",
						"          workOrderTasks,",
						"          assets,",
						"          notes,",
						"          timePeriodMode,",
						"          status,",
						"          approvals,",
						"          publicHolidayWorked,",
						"          timeClockEvents,",
						"          customFields,",
						"          totalBreakHours,",
						"          totalWorkedHours,",
						"          allowEditing,",
						"          submittedDateTime,",
						"          lastUpdated",
						"     )) ~> WritetoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/TimesheetJson')]",
				"[concat(variables('factoryId'), '/datasets/Timesheet_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Employees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployee",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeePaymentAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeePhoneNumbers",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeStreetAddresses",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeSuperAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeSuperContributions",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSqlEmployeeTaxDeclaration",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns1"
						},
						{
							"name": "selectPaymentAccounts"
						},
						{
							"name": "flattenPaymentAccounts"
						},
						{
							"name": "selectEmployee"
						},
						{
							"name": "selectPhoneNumbers"
						},
						{
							"name": "flattenPhoneNumbers"
						},
						{
							"name": "selectStreetAddresses"
						},
						{
							"name": "flattenStreetAddresses"
						},
						{
							"name": "selectSuperAccounts"
						},
						{
							"name": "flattenSuperAccounts"
						},
						{
							"name": "selectSuperContributions"
						},
						{
							"name": "flattenSuperContributions"
						},
						{
							"name": "selectTaxDeclarationObject"
						},
						{
							"name": "selectTaxDeclarationItems"
						},
						{
							"name": "castDateColumns7"
						},
						{
							"name": "castDateColumns6"
						},
						{
							"name": "castDateColumns5"
						},
						{
							"name": "castDateColumns4"
						},
						{
							"name": "castDateColumns3"
						},
						{
							"name": "castDateColumns2"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Employees\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tdateOfBirth as date,\n\t\temailAddress as string,\n\t\temployeeId as string,\n\t\temployeeNumber as integer,\n\t\tfirstName as string,\n\t\tgender as string,\n\t\thiredDate as date,\n\t\tlastModified as string,\n\t\tmiddleName as string,\n\t\torganization as (name as string, organizationId as string),\n\t\torganizationId as string,\n\t\tpaymentAccounts as (bankAccount as (accountName as string, accountNumber as integer, bsb as string, reference as string), employeePaymentAccountId as string, paySplit as (amount as double, type as string), sortOrder as boolean)[],\n\t\tphoneNumbers as (type as string, value as string)[],\n\t\tpreferredName as string,\n\t\tstreetAddresses as (components as string, coordinate as string, countryCode as string, fullAddress as string, postCode as short, state as string, street as string, suburb as string, type as string)[],\n\t\tsuperAccounts as (ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, fundABN as long, fundESA as string, fundName as string, fundType as string, fundUSI as string, membershipNumber as string, smsfBankAccount as (accountName as string, accountNumber as integer, bsb as integer, reference as string))[],\n\t\tsuperContributions as (amount as double, ceaseDate as string, commencementDate as string, employeeId as string, employeeSuperannuationAccountId as string, employeeSuperannuationContributionId as string, minimumAmount as string, payItemDescription as string, payItemId as string, valueType as string)[],\n\t\tsurname as string,\n\t\ttaxDeclaration as (australianResidentForTaxPurposes as boolean, canEdit as boolean, claimDependantsOrSpecialTaxOffset as boolean, claimMedicareLevyVariation as boolean, claimSeniorsPensionersOffset as boolean, claimTaxFreeThreshold as boolean, effectiveDate as string, employeeId as string, employeeTaxDeclarationId as string, financialSupplementDebt as boolean, helpDebt as boolean, lodgementDate as string, lodgementStatus as string, signatureDate as string, signaturePresent as string, taxFileNumber as integer, taxFileNumberExemption as string, workingHolidayMaker as boolean),\n\t\ttitle as string,\n\t\tusername as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nselectEmployee derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%')||like(name,'%lastModified%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns1\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tpaymentAccounts,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectPaymentAccounts\nselectPaymentAccounts foldDown(unroll(paymentAccounts),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\temployeePaymentAccountId = paymentAccounts.employeePaymentAccountId,\n\t\tsortOrder = paymentAccounts.sortOrder,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName,\n\t\tevery(paymentAccounts.bankAccount,match(true()),\n\t\t\t$0 = $$),\n\t\tevery(paymentAccounts.paySplit,match(true()),\n\t\t\t$0 = $$)\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPaymentAccounts\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tdateOfBirth,\n\t\temailAddress,\n\t\temployeeNumber,\n\t\tfirstName,\n\t\tgender,\n\t\thiredDate,\n\t\tlastModified,\n\t\tmiddleName,\n\t\tpreferredName,\n\t\tsurname,\n\t\ttitle,\n\t\tusername,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectEmployee\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tphoneNumbers,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectPhoneNumbers\nselectPhoneNumbers foldDown(unroll(phoneNumbers),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttype = phoneNumbers.type,\n\t\tvalue = phoneNumbers.value,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPhoneNumbers\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tstreetAddresses,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectStreetAddresses\nselectStreetAddresses foldDown(unroll(streetAddresses),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tcomponents = streetAddresses.components,\n\t\tcoordinate = streetAddresses.coordinate,\n\t\tcountryCode = streetAddresses.countryCode,\n\t\tfullAddress = streetAddresses.fullAddress,\n\t\tpostCode = streetAddresses.postCode,\n\t\tstate = streetAddresses.state,\n\t\tstreet = streetAddresses.street,\n\t\tsuburb = streetAddresses.suburb,\n\t\ttype = streetAddresses.type,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenStreetAddresses\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tsuperAccounts,\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectSuperAccounts\nselectSuperAccounts foldDown(unroll(superAccounts),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tceaseDate = superAccounts.ceaseDate,\n\t\tcommencementDate = superAccounts.commencementDate,\n\t\t{superAccounts.employeeId} = superAccounts.employeeId,\n\t\temployeeSuperannuationAccountId = superAccounts.employeeSuperannuationAccountId,\n\t\tfundABN = superAccounts.fundABN,\n\t\tfundESA = superAccounts.fundESA,\n\t\tfundName = superAccounts.fundName,\n\t\tfundType = superAccounts.fundType,\n\t\tfundUSI = superAccounts.fundUSI,\n\t\tmembershipNumber = superAccounts.membershipNumber,\n\t\t{smsfBankAccount.accountName} = superAccounts.smsfBankAccount.accountName,\n\t\t{smsfBankAccount.accountNumber} = superAccounts.smsfBankAccount.accountNumber,\n\t\t{smsfBankAccount.bsb} = superAccounts.smsfBankAccount.bsb,\n\t\t{smsfBankAccount.reference} = superAccounts.smsfBankAccount.reference,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenSuperAccounts\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tsuperContributions,\n\t\tPipelineName,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectSuperContributions\nselectSuperContributions foldDown(unroll(superContributions),\n\tmapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\tamount = superContributions.amount,\n\t\tceaseDate = superContributions.ceaseDate,\n\t\tcommencementDate = superContributions.commencementDate,\n\t\t{superContributions.employeeId} = superContributions.employeeId,\n\t\temployeeSuperannuationAccountId = superContributions.employeeSuperannuationAccountId,\n\t\temployeeSuperannuationContributionId = superContributions.employeeSuperannuationContributionId,\n\t\tminimumAmount = superContributions.minimumAmount,\n\t\tpayItemDescription = superContributions.payItemDescription,\n\t\tpayItemId = superContributions.payItemId,\n\t\tvalueType = superContributions.valueType,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenSuperContributions\nsourceJson select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttaxDeclaration,\n\t\tPipelineName,\n\t\tpipelineRunId = PipelineRunId,\n\t\tpipelineTriggerTime = PipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectTaxDeclarationObject\nselectTaxDeclarationObject select(mapColumn(\n\t\temployeeId,\n\t\torganizationId,\n\t\ttaxDeclaration = taxDeclaration.australianResidentForTaxPurposes,\n\t\tcanEdit = taxDeclaration.canEdit,\n\t\tclaimDependantsOrSpecialTaxOffset = taxDeclaration.claimDependantsOrSpecialTaxOffset,\n\t\tclaimMedicareLevyVariation = taxDeclaration.claimMedicareLevyVariation,\n\t\tclaimSeniorsPensionersOffset = taxDeclaration.claimSeniorsPensionersOffset,\n\t\tclaimTaxFreeThreshold = taxDeclaration.claimTaxFreeThreshold,\n\t\teffectiveDate = taxDeclaration.effectiveDate,\n\t\t{taxDeclaration.employeeId} = taxDeclaration.employeeId,\n\t\temployeeTaxDeclarationId = taxDeclaration.employeeTaxDeclarationId,\n\t\tfinancialSupplementDebt = taxDeclaration.financialSupplementDebt,\n\t\thelpDebt = taxDeclaration.helpDebt,\n\t\tlodgementDate = taxDeclaration.lodgementDate,\n\t\tlodgementStatus = taxDeclaration.lodgementStatus,\n\t\tsignatureDate = taxDeclaration.signatureDate,\n\t\tsignaturePresent = taxDeclaration.signaturePresent,\n\t\ttaxFileNumber = taxDeclaration.taxFileNumber,\n\t\ttaxFileNumberExemption = taxDeclaration.taxFileNumberExemption,\n\t\tworkingHolidayMaker = taxDeclaration.workingHolidayMaker,\n\t\tPipelineName,\n\t\tpipelineRunId,\n\t\tpipelineTriggerTime,\n\t\tSourceFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectTaxDeclarationItems\nselectTaxDeclarationItems derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns7\nflattenSuperContributions derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns6\nflattenSuperAccounts derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns5\nflattenStreetAddresses derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns4\nflattenPhoneNumbers derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns3\nflattenPaymentAccounts derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns2\ncastDateColumns1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployee\ncastDateColumns2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 7,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeePaymentAccounts\ncastDateColumns3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 6,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeePhoneNumbers\ncastDateColumns4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 5,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeStreetAddresses\ncastDateColumns5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeSuperAccounts\ncastDateColumns6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeSuperContributions\ncastDateColumns7 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSqlEmployeeTaxDeclaration"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmploymentHistory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "05_Employees"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_EmploymentHistory\")\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkSql"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),",
						"     param_ErrorRowDirectory as string (\"ErrorRows\"),",
						"     param_DataflowName as string (\"df_LeaveApplications\")",
						"}",
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          PipelineName as string,",
						"          PipelineRunId as string,",
						"          PipelineTriggerTime as string,",
						"          approvers as string,",
						"          dateSubmitted as date,",
						"          employeeId as string,",
						"          employeeNumber as integer,",
						"          firstName as string,",
						"          gender as string,",
						"          leaveApplicationId as string,",
						"          leaveDateEnd as date,",
						"          leaveDateStart as date,",
						"          leaveNotes as string,",
						"          leavePaymentStatus as string,",
						"          leaveReasonName as string,",
						"          leaveTypeId as string,",
						"          leaveTypeName as string,",
						"          leaveUnitOfMeasure as string,",
						"          leaveUnits as double,",
						"          numberOfDays as short,",
						"          organizationId as string,",
						"          printName as string,",
						"          status as string,",
						"          surname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName',",
						"     documentForm: 'documentPerLine') ~> sourceJson",
						"sourceJson derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns",
						"castDateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: ($param_FileSystem),",
						"     rejectedData_folderPath: ($param_ErrorRowDirectory),",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true) ~> sinkSql"
					]
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OrgPayRuns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "07_PayRuns"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenPayRuns"
						},
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_OrgPayRuns\")\n}\nsource(output(\n\t\t{Org.LegalName} as string,\n\t\t{Org.OrganizationId} as string,\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerId as string,\n\t\tPipelineTriggerTime as string,\n\t\tcurrentFinancialYearEndDate as string,\n\t\tcurrentFinancialYearStartDate as string,\n\t\tpayCalendars as (atoLodgementsEnabled as boolean, description as string, payCalendarId as string, period as string, periodStartDate as string, proRataMode as string, weeklyFactor as double, weeklyFactorEquation as short)[],\n\t\tpayRuns as (backPayDateOverride as string, dateLastCalculated as string, dateOpened as string, datePublished as string, employeeCount as short, eofyLodgementStatus as string, financialYearEndDate as string, financialYearStartDate as string, initiatingUserId as string, initiatingUserName as string, lodgementStatus as string, notes as string, payCalendarId as string, payCalendarName as string, payRunId as string, paymentDate as string, payslipGenerationStatus as string, periodEnd as string, periodStart as string, publishingUserId as string, publishingUserName as string, runNumber as short, status as string, superannuationPaymentDate as string, type as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson foldDown(unroll(payRuns),\n\tmapColumn(\n\t\tbackPayDateOverride = payRuns.backPayDateOverride,\n\t\tdateLastCalculated = payRuns.dateLastCalculated,\n\t\tdateOpened = payRuns.dateOpened,\n\t\tdatePublished = payRuns.datePublished,\n\t\temployeeCount = payRuns.employeeCount,\n\t\teofyLodgementStatus = payRuns.eofyLodgementStatus,\n\t\tfinancialYearEndDate = payRuns.financialYearEndDate,\n\t\tfinancialYearStartDate = payRuns.financialYearStartDate,\n\t\tinitiatingUserId = payRuns.initiatingUserId,\n\t\tinitiatingUserName = payRuns.initiatingUserName,\n\t\tlodgementStatus = payRuns.lodgementStatus,\n\t\tnotes = payRuns.notes,\n\t\tpayCalendarId = payRuns.payCalendarId,\n\t\tpayCalendarName = payRuns.payCalendarName,\n\t\tpayRunId = payRuns.payRunId,\n\t\tpaymentDate = payRuns.paymentDate,\n\t\tpayslipGenerationStatus = payRuns.payslipGenerationStatus,\n\t\tperiodEnd = payRuns.periodEnd,\n\t\tperiodStart = payRuns.periodStart,\n\t\tpublishingUserId = payRuns.publishingUserId,\n\t\tpublishingUserName = payRuns.publishingUserName,\n\t\trunNumber = payRuns.runNumber,\n\t\tstatus = payRuns.status,\n\t\tsuperannuationPaymentDate = payRuns.superannuationPaymentDate,\n\t\ttype = payRuns.type,\n\t\t{Org.LegalName},\n\t\t{Org.OrganizationId},\n\t\tPipelineName,\n\t\tPipelineRunId,\n\t\tPipelineTriggerTime,\n\t\tcurrentFinancialYearEndDate,\n\t\tcurrentFinancialYearStartDate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenPayRuns\nflattenPayRuns derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Organizations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "08_Organizations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "SourceBlobDefinitiv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "SinkSqlDefinitiv",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Organizations\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tabn as string,\n\t\tacn as string,\n\t\tbeamTermsConfirmDate as string,\n\t\tbeamTermsConfirmUserId as string,\n\t\tbeamTermsConfirmUserName as string,\n\t\tbranchCode as string,\n\t\tcontactEmail as string,\n\t\tcontactFirstName as string,\n\t\tcontactPhone as string,\n\t\tcontactSurname as string,\n\t\tcontactTitle as string,\n\t\temployeeSupportEmail as string,\n\t\tfbtExempt as boolean,\n\t\tintermediary as string,\n\t\tlegalName as string,\n\t\tnotificationUserIds as string,\n\t\tnotifyLodgementSubmitters as boolean,\n\t\torganizationCode as string,\n\t\torganizationId as string,\n\t\treference as string,\n\t\tsoftwareProviderABN as string,\n\t\tsoftwareProviderName as string,\n\t\tsoftwareSubscriptionId as string,\n\t\tstreetAddress as string,\n\t\ttradingName as string,\n\t\twpn as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> SourceBlobDefinitiv\nSourceBlobDefinitiv sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: 'container-adf-nido-prod-eastau-100-1',\n\trejectedData_folderPath: 'ds_adsl2_stnidoprodeastau100_csv/definitiv.Organizations',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> SinkSqlDefinitiv"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Payslips')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "01_Payslips"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Payslips\")\n}\nsource(output(\n\t\t{Org.LegalName} as string,\n\t\t{Org.OrganizationId} as string,\n\t\t{PayRun.PayRunId} as string,\n\t\t{PayRun.PayslipGenerationStatus} as string,\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tbaseRate as double,\n\t\tdepartmentCode as string,\n\t\temployeeId as string,\n\t\temploymentTypeCode as string,\n\t\temploymentTypeCodeDesc as string,\n\t\tfirstName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tnumberOfUnits as double,\n\t\tpayDate as date,\n\t\tpayMethodCode as string,\n\t\tpayMethodCodeDesc as string,\n\t\tpayslipId as string,\n\t\tpayslipNumber as string,\n\t\tperiodEndingDate as date,\n\t\tperiodStartDate as date,\n\t\tpositionTitle as string,\n\t\tprojectCode as string,\n\t\trate as double,\n\t\tsurname as string,\n\t\tvalue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(PipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW')) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ReportingLeaveApplications')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenReportData"
						},
						{
							"name": "castDateColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),",
						"     param_ErrorRowDirectory as string (\"ErrorRows\"),",
						"     param_DataflowName as string (\"df_ReportingLeaveApplications\")",
						"}",
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          PipelineName as string,",
						"          PipelineRunId as string,",
						"          PipelineTriggerTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          extraReportData as string[],",
						"          headers as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],",
						"          reportData as (approvers as string, dateSubmitted as string, employeeId as string, employeeNumber as integer, firstName as string, gender as string, leaveAppNumDays as short, leaveApplicationId as string, leaveDateEnd as date, leaveDateStart as date, leaveNotes as string, leavePaymentStatus as string, leaveReasonName as string, leaveTypeId as string, leaveTypeName as string, leaveUnitOfMeasure as string, leaveUnits as double, printName as string, status as string, surname as string)[],",
						"          reportVariantTag as string,",
						"          serverTime as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName',",
						"     documentForm: 'documentPerLine') ~> sourceJson",
						"sourceJson foldDown(unroll(reportData),",
						"     mapColumn(",
						"          approvers = reportData.approvers,",
						"          dateSubmitted = reportData.dateSubmitted,",
						"          employeeId = reportData.employeeId,",
						"          employeeNumber = reportData.employeeNumber,",
						"          firstName = reportData.firstName,",
						"          gender = reportData.gender,",
						"          leaveAppNumDays = reportData.leaveAppNumDays,",
						"          leaveApplicationId = reportData.leaveApplicationId,",
						"          leaveDateEnd = reportData.leaveDateEnd,",
						"          leaveDateStart = reportData.leaveDateStart,",
						"          leaveNotes = reportData.leaveNotes,",
						"          leavePaymentStatus = reportData.leavePaymentStatus,",
						"          leaveReasonName = reportData.leaveReasonName,",
						"          leaveTypeId = reportData.leaveTypeId,",
						"          leaveTypeName = reportData.leaveTypeName,",
						"          leaveUnitOfMeasure = reportData.leaveUnitOfMeasure,",
						"          leaveUnits = reportData.leaveUnits,",
						"          printName = reportData.printName,",
						"          status = reportData.status,",
						"          surname = reportData.surname,",
						"          {Org.OrganizationId},",
						"          PipelineName,",
						"          PipelineRunId,",
						"          PipelineTriggerTime,",
						"          SourceFileName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenReportData",
						"flattenReportData derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns",
						"castDateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: ($param_FileSystem),",
						"     rejectedData_folderPath: ($param_ErrorRowDirectory),",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true) ~> sinkSql"
					]
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ReportingLeaveBalances')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "06_Leave"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenReportData"
						},
						{
							"name": "castDateColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),",
						"     param_ErrorRowDirectory as string (\"ErrorRows\"),",
						"     param_DataflowName as string (\"df_ReportingLeaveBalances\")",
						"}",
						"source(output(",
						"          {Org.OrganizationId} as string,",
						"          PipelineName as string,",
						"          PipelineRunId as string,",
						"          PipelineTriggerTime as string,",
						"          addFooterRow as boolean,",
						"          addStatusBar as boolean,",
						"          extraReportData as string[],",
						"          headers as (createDayOfWeekColumn as boolean, customFieldsKeyName as string, dataType as string, defaultPivotAggregation as string, defaultPivotColumnOrder as boolean, defaultPivotRowOrder as short, defaultPivotValueOrder as boolean, defaultSortDirection as string, defaultSortOrder as boolean, disableDefaultAggregation as boolean, falseText as string, fieldName as string, filterDisabled as boolean, hiddenByDefault as boolean, isCustomFields as boolean, isDynamicColumns as boolean, nullDisplayText as string, numericPrecision as string, prependBaseColumnNameToDayOfWeekColumn as boolean, searchDisabled as boolean, sortDisabled as boolean, title as string, trueText as string)[],",
						"          reportData as (employeeId as string, employeeNumber as integer, firstName as string, leaveEntitlementHours as double, leaveProRataHours as double, leaveTotalHours as double, leaveTypeId as string, leaveTypeName as string, primaryDepartmentCode as short, primaryDepartmentGlCode as string, primaryDepartmentName as string, primaryLocationCode as string, primaryLocationGlCode as string, primaryLocationName as string, primaryProjectCode as string, primaryProjectGlCode as string, primaryProjectName as string, primaryRoleCode as string, primaryRoleName as string, printName as string, surname as string)[],",
						"          reportVariantTag as string,",
						"          serverTime as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName',",
						"     documentForm: 'documentPerLine') ~> sourceJson",
						"sourceJson foldDown(unroll(reportData),",
						"     mapColumn(",
						"          employeeId = reportData.employeeId,",
						"          employeeNumber = reportData.employeeNumber,",
						"          firstName = reportData.firstName,",
						"          leaveEntitlementHours = reportData.leaveEntitlementHours,",
						"          leaveProRataHours = reportData.leaveProRataHours,",
						"          leaveTotalHours = reportData.leaveTotalHours,",
						"          leaveTypeId = reportData.leaveTypeId,",
						"          leaveTypeName = reportData.leaveTypeName,",
						"          primaryDepartmentCode = reportData.primaryDepartmentCode,",
						"          primaryDepartmentGlCode = reportData.primaryDepartmentGlCode,",
						"          primaryDepartmentName = reportData.primaryDepartmentName,",
						"          primaryLocationCode = reportData.primaryLocationCode,",
						"          primaryLocationGlCode = reportData.primaryLocationGlCode,",
						"          primaryLocationName = reportData.primaryLocationName,",
						"          primaryProjectCode = reportData.primaryProjectCode,",
						"          primaryProjectGlCode = reportData.primaryProjectGlCode,",
						"          primaryProjectName = reportData.primaryProjectName,",
						"          primaryRoleCode = reportData.primaryRoleCode,",
						"          primaryRoleName = reportData.primaryRoleName,",
						"          printName = reportData.printName,",
						"          surname = reportData.surname,",
						"          {Org.OrganizationId},",
						"          PipelineName,",
						"          PipelineRunId,",
						"          PipelineTriggerTime,",
						"          SourceFileName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenReportData",
						"flattenReportData derive(each(match(not(typeMatch(type,'datetime'))&&(like(name,'%date%')||like(name,'%Date%')||like(name,'%Time%')||like(name,'%time%'))), $$ = toTimestamp(toString($$), 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'A.U.S. Eastern Standard Time'))) ~> castDateColumns",
						"castDateColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: ($param_FileSystem),",
						"     rejectedData_folderPath: ($param_ErrorRowDirectory),",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true) ~> sinkSql"
					]
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Rosters')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "04_Rosters"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns",
							"description": "Creating/updating the columns G'PipelineName, PipelineRunId, PipelineTriggerTime, QueryFinishDate, QueryStartDate, amount, createdByUser, createdDate, date1, employeeId, employmentType, end, firstName, lastName, modifiedByUser, modifiedDate, quantity, room, rosterEntryId, rosterId, serviceCode, start, SourceFileName'"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Rosters\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tQueryFinishDate as date,\n\t\tQueryStartDate as date,\n\t\tamount as double,\n\t\tcreatedByUser as string,\n\t\tcreatedDate as string,\n\t\tdate as string,\n\t\temployeeId as string,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tfirstName as string,\n\t\tlastName as string,\n\t\tmodifiedByUser as string,\n\t\tmodifiedDate as string,\n\t\tquantity as double,\n\t\troom as string,\n\t\trosterEntryId as string,\n\t\trosterId as string,\n\t\tserviceCode as string,\n\t\tstart as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(end = toTimestamp(concat(toString(toDate(date)), ' ', end, ':00')),\n\t\tstart = toTimestamp(concat(toString(toDate(date)), ' ', start, ':00')),\n\t\tdate = toDate(date),\n\t\tPipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW'),\n\t\tcreatedDate = toDate(createdDate),\n\t\tmodifiedDate = toDate(modifiedDate)) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Timesheets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "03_Timesheets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Timesheets\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tQueryFinishDate as date,\n\t\tQueryStartDate as date,\n\t\tapprovalStatus as string,\n\t\tcentreCostCode as string,\n\t\tdate as string,\n\t\temployee as string,\n\t\temployeeId as string,\n\t\t{employeeRef.No} as integer,\n\t\temploymentType as string,\n\t\tend as string,\n\t\tleaveApplicationId as string,\n\t\troom as string,\n\t\troomCostCode as string,\n\t\troster as string,\n\t\trosterId as string,\n\t\tstart as string,\n\t\ttimesheetId as string,\n\t\ttotalCost as double,\n\t\ttotalHours as double,\n\t\tworkType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(PipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW'),\n\t\tdate = toDate(date),\n\t\tend = toTimestamp(concat(toString(toDate(date)), ' ', end, ':00')),\n\t\tstart = toTimestamp(concat(toString(toDate(date)), ' ', start, ':00'))) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Wages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "02_Wages"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls2_stnidoprodeastau100_json_output",
								"type": "DatasetReference"
							},
							"name": "sourceJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_tnk001",
								"type": "DatasetReference"
							},
							"name": "sinkSql",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls2_stnidoprodeastau100",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "castDateColumns"
						}
					],
					"script": "parameters{\n\tparam_FileSystem as string (\"container-adf-nido-prod-eastau-100-1\"),\n\tparam_ErrorRowDirectory as string (\"ErrorRows\"),\n\tparam_DataflowName as string (\"df_Wages\")\n}\nsource(output(\n\t\tPipelineName as string,\n\t\tPipelineRunId as string,\n\t\tPipelineTriggerTime as string,\n\t\tamount as double,\n\t\tdepartment as string,\n\t\temployeeId as string,\n\t\tfirstName as string,\n\t\tfullName as string,\n\t\t{hoursOrA/DCode} as integer,\n\t\t{hoursOrA/DCodeDesc} as string,\n\t\tidNumber as integer,\n\t\tlevel1Code as string,\n\t\tlevel2Code as string,\n\t\tlineItemId as integer,\n\t\tpayItemId as string,\n\t\tpayRunId as string,\n\t\tpayrunGroup as string,\n\t\tpayslipId as string,\n\t\tpositionID as string,\n\t\tpositionTitle as string,\n\t\troom as string,\n\t\tsurname as string,\n\t\tweekEndingDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFileName',\n\tdocumentForm: 'documentPerLine') ~> sourceJson\nsourceJson derive(PipelineTriggerTime = toTimestamp(PipelineTriggerTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss', 'Australia/NSW')) ~> castDateColumns\ncastDateColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\toutputRejectedData: true,\n\trejectedData_fileSystem: ($param_FileSystem),\n\trejectedData_folderPath: ($param_ErrorRowDirectory + '/' + $param_DataflowName),\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: true) ~> sinkSql"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls2_stnidoprodeastau100_json_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_tnk001')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls2_stnidoprodeastau100')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/id-nido-prod-001')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/7a7b564c-588c-4825-a61b-90fec283b855/resourceGroups/NidoSQLGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id-nido-prod-001"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": [
				"[variables('factoryId')]"
			]
		},
		{
			"name": "[parameters('factoryName')]",
			"type": "Microsoft.DataFactory/factories",
			"apiVersion": "2018-06-01",
			"properties": {
				"globalParameters": {
					"global_adls2_FileSystem": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_adls2_FileSystem_value')]"
					},
					"global_adls2_InputDirectory_Json": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_adls2_InputDirectory_Json_value')]"
					},
					"global_adls2_OutputDirectory_Json": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_adls2_OutputDirectory_Json_value')]"
					},
					"global_adls2_LogDirectory": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_adls2_LogDirectory_value')]"
					},
					"global_logic_Monitoring_baseUrl": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_logic_Monitoring_baseUrl_value')]"
					},
					"global_logic_Monitoring_SAS": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_logic_Monitoring_SAS_value')]"
					},
					"global_adls2_SqlErrorRowDirectory": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_adls2_SqlErrorRowDirectory_value')]"
					},
					"global_CustomReportId_Timesheets": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_CustomReportId_Timesheets_value')]"
					},
					"global_CustomReportId_Rosters": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_CustomReportId_Rosters_value')]"
					},
					"global_CustomReportId_Payslips": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_CustomReportId_Payslips_value')]"
					},
					"global_CustomReportId_Wages": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_CustomReportId_Wages_value')]"
					},
					"global_CustomReportId_GenericOrgId": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_CustomReportId_GenericOrgId_value')]"
					},
					"global_REST_RequestTimeoutDuration_30min": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_REST_RequestTimeoutDuration_30min_value')]"
					},
					"global_REST_RequestTimeoutDuration_90min": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_REST_RequestTimeoutDuration_90min_value')]"
					},
					"global_CustomReportId_ReportingLeaveApplications": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_global_CustomReportId_ReportingLeaveApplications_value')]"
					}
				},
				"globalConfigurations": {
					"PipelineBillingEnabled": "[parameters('dataFactory_properties_globalConfigurations_PipelineBillingEnabled')]"
				}
			},
			"dependsOn": [],
			"location": "[parameters('dataFactory_location')]",
			"identity": {
				"type": "[parameters('dataFactory_identity_type')]"
			}
		}
	]
}